/*
This file is part of Cubica.
 http://www.tkim.graphics/cubica/
Cubica is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Cubica is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Cubica.  If not, see <http://www.gnu.org/licenses/>.
*/
// ARRUDA_BOYCE.cpp: implementation of the ARRUDA_BOYCE class.
//
//////////////////////////////////////////////////////////////////////

#include "ARRUDA_BOYCE.h"

//////////////////////////////////////////////////////////////////////
// Constructor for ARRUDA_BOYCE
//////////////////////////////////////////////////////////////////////
ARRUDA_BOYCE::ARRUDA_BOYCE(Real nkTheta, Real N, Real k) :
  _nkTheta(nkTheta), 
  _Nconst(N), 
  _k(k),
  // work arrays
  _pf_pF(12,9),
  _pF_pu(9,12)
{
  _materialName.assign("ARRUDA_BOYCE");
}

//////////////////////////////////////////////////////////////////////
// stiffness matrix implementation
//////////////////////////////////////////////////////////////////////
MATRIX ARRUDA_BOYCE::stiffness(TET& tet, bool diagonal)
{
  computeStresses(tet);
  addPenalty(_k, tet, _pf_pF);
  computePFPu(tet, _pF_pu);
  MATRIX product = _pf_pF * _pF_pu;
  return product;
}

//////////////////////////////////////////////////////////////////////
// make a copy
//////////////////////////////////////////////////////////////////////
MATERIAL* ARRUDA_BOYCE::copy()
{
  return new ARRUDA_BOYCE(_nkTheta, _Nconst, _k);
}

//////////////////////////////////////////////////////////////////////
// Hessian implementation
//////////////////////////////////////////////////////////////////////
TENSOR3 ARRUDA_BOYCE::hessian(TET& tet)
{
  MATRIX3 F = tet.F();
  VECTOR flatF = TET::flattenF(F);
  const VEC3F* b = tet.b();
  computePFPu(tet, _pF_pu);

  // compute all the Arruda-Boyce quantities
  TENSOR3 tensorAB(12,9,9);
  hessian0(flatF.data(), b, tensorAB.data()[0]);
  hessian1(flatF.data(), b, tensorAB.data()[1]);
  hessian2(flatF.data(), b, tensorAB.data()[2]);
  hessian3(flatF.data(), b, tensorAB.data()[3]);
  hessian4(flatF.data(), b, tensorAB.data()[4]);
  hessian5(flatF.data(), b, tensorAB.data()[5]);
  hessian6(flatF.data(), b, tensorAB.data()[6]);
  hessian7(flatF.data(), b, tensorAB.data()[7]);
  hessian8(flatF.data(), b, tensorAB.data()[8]);
  TENSOR3 intermediateAB = tensorAB * _pF_pu;
  TENSOR3 finalAB = intermediateAB ^ _pF_pu;

  TENSOR3 tensorPressure(12,9,9);
  MATERIAL::hessian0(_k, flatF.data(), b, tensorPressure.data()[0]);
  MATERIAL::hessian1(_k, flatF.data(), b, tensorPressure.data()[1]);
  MATERIAL::hessian2(_k, flatF.data(), b, tensorPressure.data()[2]);
  MATERIAL::hessian3(_k, flatF.data(), b, tensorPressure.data()[3]);
  MATERIAL::hessian4(_k, flatF.data(), b, tensorPressure.data()[4]);
  MATERIAL::hessian5(_k, flatF.data(), b, tensorPressure.data()[5]);
  MATERIAL::hessian6(_k, flatF.data(), b, tensorPressure.data()[6]);
  MATERIAL::hessian7(_k, flatF.data(), b, tensorPressure.data()[7]);
  MATERIAL::hessian8(_k, flatF.data(), b, tensorPressure.data()[8]);
  TENSOR3 intermediatePressure = tensorPressure * _pF_pu;
  TENSOR3 finalPressure = intermediatePressure ^ _pF_pu;

  TENSOR3 final = finalAB + finalPressure;

  return final;
}

//////////////////////////////////////////////////////////////////////
// implementation of second PK stress tensor
//////////////////////////////////////////////////////////////////////
MATRIX3 ARRUDA_BOYCE::secondPiolaKirchhoff(MATRIX3& F, bool diagonal)
{
  MATRIX3 I = MATRIX3::I();
  MATRIX3 C = F.transpose() * F;
  const Real I_C = trace(C);
  MATRIX3 Sp = penaltySecondPK(_k, C);
	MATRIX3 Ss = 2 * _nkTheta*( 1.0f/2.0f*I
			+ 1.0f/(20.0f       * _Nconst)        * 2.0f * I_C        * I
			+ 11.0f/(1050.0f    * pow(_Nconst,2)) * 3.0f * pow(I_C,2) * I
			+ 19.0f/(7000.0f    * pow(_Nconst,3)) * 4.0f * pow(I_C,3) * I
			+ 519.0f/(673750.0f * pow(_Nconst,4)) * 5.0f * pow(I_C,4) * I);
	return Ss + Sp;
}

/*
//////////////////////////////////////////////////////////////////////
// autogenerated as "forceDensity" from:
//
// setup_symbols_wrt_u;
// syms nkTheta N;
// strain_energy = nkTheta*( 1/2*(I_C-3) + 1/(20*N)*(I_C^2-9) + 11/(1050*N^2)*(I_C^3-27) + 19/(7000*N^3)*(I_C^4-81) + 519/(673750*N^4)*(I_C^5-243));
// Rd_sym = sym('DUMMY_TEMP')*ones(1,12);
// for i = 1:12
//   Rd_sym(1,i) = - diff( strain_energy, u(i));
// end
// forceDensity = maple('codegen[C]', Rd_sym, 'optimized')
//
// see "MATERIAL.h" for more details
//////////////////////////////////////////////////////////////////////
void ARRUDA_BOYCE::forceDensity(TET& tet, VEC3F* forces)
{
  for (int x = 0; x < 4; x++)
    forces[x].clear();

  penaltyForceDensity(_k, tet, forces);
  VEC3F** nodes = tet.vertices;
  const MATRIX3 matInv = tet.DmInv();
  const double N = _Nconst;
  const double nkTheta = _nkTheta;

	const double a = (*nodes[0])[0];
	const double b = (*nodes[0])[1];
	const double c = (*nodes[0])[2];
	const double d = (*nodes[1])[0];
	const double e = (*nodes[1])[1];
	const double f = (*nodes[1])[2];
	const double g = (*nodes[2])[0];
	const double h = (*nodes[2])[1];
	const double i = (*nodes[2])[2];
	const double j = (*nodes[3])[0];
	const double k = (*nodes[3])[1];
	const double l = (*nodes[3])[2];

	const double m = matInv(0,0);
	const double n = matInv(0,1);
	const double o = matInv(0,2);
	const double p = matInv(1,0);
	const double q = matInv(1,1);
	const double r = matInv(1,2);
	const double s = matInv(2,0);
	const double t = matInv(2,1);
	const double u = matInv(2,2);

	const double t1 = d-a;
	const double t3 = g-a;
	const double t5 = j-a;
	const double t7 = t1*m+t3*p+t5*s;
	const double t8 = -m-p-s;
	const double t9 = t7*t8;
	const double t13 = t1*n+t3*q+t5*t;
	const double t14 = -n-q-t;
	const double t15 = t13*t14;
	const double t19 = t1*o+t3*r+t5*u;
	const double t20 = -o-r-u;
	const double t21 = t19*t20;
	const double t23 = t7*t7;
	const double t24 = e-b;
	const double t26 = h-b;
	const double t28 = k-b;
	const double t30 = t24*m+t26*p+t28*s;
	const double t31 = t30*t30;
	const double t32 = f-c;
	const double t34 = i-c;
	const double t36 = l-c;
	const double t38 = t32*m+t34*p+t36*s;
	const double t39 = t38*t38;
	const double t40 = t13*t13;
	const double t44 = t24*n+t26*q+t28*t;
	const double t45 = t44*t44;
	const double t49 = t32*n+t34*q+t36*t;
	const double t50 = t49*t49;
	const double t51 = t19*t19;
	const double t55 = t24*o+t26*r+t28*u;
	const double t56 = t55*t55;
	const double t60 = t32*o+t34*r+t36*u;
	const double t61 = t60*t60;
	const double t62 = t23+t31+t39+t40+t45+t50+t51+t56+t61;
	const double t63 = 1/N*t62;
	const double t64 = t9+t15+t21;
	const double t67 = N*N;
	const double t69 = t62*t62;
	const double t70 = 1/t67*t69;
	const double t76 = 1/t67/N*t69*t62;
	const double t79 = t67*t67;
	const double t81 = t69*t69;
	const double t82 = 1/t79*t81;
	const double t87 = t30*t8;
	const double t88 = t44*t14;
	const double t89 = t55*t20;
	const double t90 = t87+t88+t89;
	const double t101 = t38*t8;
	const double t102 = t49*t14;
	const double t103 = t60*t20;
	const double t104 = t101+t102+t103;
	const double t115 = t7*m;
	const double t116 = t13*n;
	const double t117 = t19*o;
	const double t118 = t115+t116+t117;
	const double t129 = t30*m;
	const double t130 = t44*n;
	const double t131 = t55*o;
	const double t132 = t129+t130+t131;
	const double t143 = t38*m;
	const double t144 = t49*n;
	const double t145 = t60*o;
	const double t146 = t143+t144+t145;
	const double t157 = t7*p;
	const double t158 = t13*q;
	const double t159 = t19*r;
	const double t160 = t157+t158+t159;
	const double t171 = t30*p;
	const double t172 = t44*q;
	const double t173 = t55*r;
	const double t174 = t171+t172+t173;
	const double t185 = t38*p;
	const double t186 = t49*q;
	const double t187 = t60*r;
	const double t188 = t185+t186+t187;
	const double t199 = t7*s;
	const double t200 = t13*t;
	const double t201 = t19*u;
	const double t202 = t199+t200+t201;
	const double t213 = t30*s;
	const double t214 = t44*t;
	const double t215 = t55*u;
	const double t216 = t213+t214+t215;
	const double t227 = t38*s;
	const double t228 = t49*t;
	const double t229 = t60*u;
	const double t230 = t227+t228+t229;
	forces[0][0] += -nkTheta*(t9+t15+t21+t63*t64/5.0+11.0/175.0*t70*t64+19.0/875.0*t76*t64+519.0/67375.0*t82*t64);
	forces[0][1] += -nkTheta*(t87+t88+t89+t63*t90/5.0+11.0/175.0*t70*t90+19.0/875.0*t76*t90+519.0/67375.0*t82*t90);
	forces[0][2] += -nkTheta*(t101+t102+t103+t63*t104/5.0+11.0/175.0*t70*t104+19.0/875.0*t76*t104+519.0/67375.0*t82*t104);
	forces[1][0] += -nkTheta*(t115+t116+t117+t63*t118/5.0+11.0/175.0*t70*t118+19.0/875.0*t76*t118+519.0/67375.0*t82*t118);
	forces[1][1] += -nkTheta*(t129+t130+t131+t63*t132/5.0+11.0/175.0*t70*t132+19.0/875.0*t76*t132+519.0/67375.0*t82*t132);
	forces[1][2] += -nkTheta*(t143+t144+t145+t63*t146/5.0+11.0/175.0*t70*t146+19.0/875.0*t76*t146+519.0/67375.0*t82*t146);
	forces[2][0] += -nkTheta*(t157+t158+t159+t63*t160/5.0+11.0/175.0*t70*t160+19.0/875.0*t76*t160+519.0/67375.0*t82*t160);
	forces[2][1] += -nkTheta*(t171+t172+t173+t63*t174/5.0+11.0/175.0*t70*t174+19.0/875.0*t76*t174+519.0/67375.0*t82*t174);
	forces[2][2] += -nkTheta*(t185+t186+t187+t63*t188/5.0+11.0/175.0*t70*t188+19.0/875.0*t76*t188+519.0/67375.0*t82*t188);
	forces[3][0] += -nkTheta*(t199+t200+t201+t63*t202/5.0+11.0/175.0*t70*t202+19.0/875.0*t76*t202+519.0/67375.0*t82*t202);
	forces[3][1] += -nkTheta*(t213+t214+t215+t63*t216/5.0+11.0/175.0*t70*t216+19.0/875.0*t76*t216+519.0/67375.0*t82*t216);
	forces[3][2] += -nkTheta*(t227+t228+t229+t63*t230/5.0+11.0/175.0*t70*t230+19.0/875.0*t76*t230+519.0/67375.0*t82*t230);
}
*/

//////////////////////////////////////////////////////////////////////
// autogenerated as "stiffnessDensity" from:
//
// setup_symbols_wrt_F;
// syms nkTheta N;
// strain_energy = nkTheta*( 1/2*(I_C-3) + 1/(20*N)*(I_C^2-9) + 11/(1050*N^2)*(I_C^3-27) + 19/(7000*N^3)*(I_C^4-81) + 519/(673750*N^4)*(I_C^5-243));
// [forceDensity stiffnessDensity] = codegen_density(strain_energy,F)
//
// see "MATERIAL.h" for more details
//////////////////////////////////////////////////////////////////////
void ARRUDA_BOYCE::stiffnessDensity(const Real* F, Real* stiffness,
                                    bool diagonal)
{
	const double nkTheta = _nkTheta;
	const double N = _Nconst;

	const double t1 = 1/N;
	const double t2 = F[0]*F[0];
	const double t5 = F[1]*F[1];
	const double t6 = F[2]*F[2];
	const double t7 = F[3]*F[3];
	const double t8 = F[4]*F[4];
	const double t9 = F[5]*F[5];
	const double t10 = F[6]*F[6];
	const double t11 = F[7]*F[7];
	const double t12 = F[8]*F[8];
	const double t13 = t2+t5+t6+t7+t8+t9+t10+t11+t12;
	const double t15 = t1*t13/5.0;
	const double t16 = N*N;
	const double t17 = 1/t16;
	const double t18 = t17*t13;
	const double t21 = t13*t13;
	const double t23 = 11.0/175.0*t17*t21;
	const double t25 = 1/t16/N;
	const double t26 = t25*t21;
	const double t29 = t21*t13;
	const double t31 = 19.0/875.0*t25*t29;
	const double t32 = t16*t16;
	const double t33 = 1/t32;
	const double t34 = t33*t29;
	const double t37 = t21*t21;
	const double t39 = 519.0/67375.0*t33*t37;
	const double t42 = t1*F[1];
	const double t45 = F[0]*F[1];
	const double t53 = nkTheta*(2.0/5.0*t42*F[0]+44.0/175.0*t18*t45+114.0/875.0*t26*t45+4152.0/67375.0*t34*t45);
	const double t54 = t1*F[2];
	const double t57 = F[0]*F[2];
	const double t65 = nkTheta*(2.0/5.0*t54*F[0]+44.0/175.0*t18*t57+114.0/875.0*t26*t57+4152.0/67375.0*t34*t57);
	const double t66 = t1*F[3];
	const double t69 = F[0]*F[3];
	const double t77 = nkTheta*(2.0/5.0*t66*F[0]+44.0/175.0*t18*t69+114.0/875.0*t26*t69+4152.0/67375.0*t34*t69);
	const double t78 = t1*F[4];
	const double t81 = F[0]*F[4];
	const double t89 = nkTheta*(2.0/5.0*t78*F[0]+44.0/175.0*t18*t81+114.0/875.0*t26*t81+4152.0/67375.0*t34*t81);
	const double t90 = t1*F[5];
	const double t93 = F[0]*F[5];
	const double t101 = nkTheta*(2.0/5.0*t90*F[0]+44.0/175.0*t18*t93+114.0/875.0*t26*t93+4152.0/67375.0*t34*t93);
	const double t102 = t1*F[0];
	const double t105 = F[6]*F[0];
	const double t113 = nkTheta*(2.0/5.0*t102*F[6]+44.0/175.0*t18*t105+114.0/875.0*t26*t105+4152.0/67375.0*t34*t105);
	const double t116 = F[7]*F[0];
	const double t124 = nkTheta*(2.0/5.0*t102*F[7]+44.0/175.0*t18*t116+114.0/875.0*t26*t116+4152.0/67375.0*t34*t116);
	const double t127 = F[8]*F[0];
	const double t135 = nkTheta*(2.0/5.0*t102*F[8]+44.0/175.0*t18*t127+114.0/875.0*t26*t127+4152.0/67375.0*t34*t127);
	const double t148 = F[1]*F[2];
	const double t156 = nkTheta*(2.0/5.0*t54*F[1]+44.0/175.0*t18*t148+114.0/875.0*t26*t148+4152.0/67375.0*t34*t148);
	const double t159 = F[1]*F[3];
	const double t167 = nkTheta*(2.0/5.0*t66*F[1]+44.0/175.0*t18*t159+114.0/875.0*t26*t159+4152.0/67375.0*t34*t159);
	const double t170 = F[1]*F[4];
	const double t178 = nkTheta*(2.0/5.0*t78*F[1]+44.0/175.0*t18*t170+114.0/875.0*t26*t170+4152.0/67375.0*t34*t170);
	const double t181 = F[1]*F[5];
	const double t189 = nkTheta*(2.0/5.0*t90*F[1]+44.0/175.0*t18*t181+114.0/875.0*t26*t181+4152.0/67375.0*t34*t181);
	const double t192 = F[6]*F[1];
	const double t200 = nkTheta*(2.0/5.0*t42*F[6]+44.0/175.0*t18*t192+114.0/875.0*t26*t192+4152.0/67375.0*t34*t192);
	const double t203 = F[7]*F[1];
	const double t211 = nkTheta*(2.0/5.0*t42*F[7]+44.0/175.0*t18*t203+114.0/875.0*t26*t203+4152.0/67375.0*t34*t203);
	const double t214 = F[8]*F[1];
	const double t222 = nkTheta*(2.0/5.0*t42*F[8]+44.0/175.0*t18*t214+114.0/875.0*t26*t214+4152.0/67375.0*t34*t214);
	const double t235 = F[2]*F[3];
	const double t243 = nkTheta*(2.0/5.0*t66*F[2]+44.0/175.0*t18*t235+114.0/875.0*t26*t235+4152.0/67375.0*t34*t235);
	const double t246 = F[2]*F[4];
	const double t254 = nkTheta*(2.0/5.0*t78*F[2]+44.0/175.0*t18*t246+114.0/875.0*t26*t246+4152.0/67375.0*t34*t246);
	const double t257 = F[2]*F[5];
	const double t265 = nkTheta*(2.0/5.0*t90*F[2]+44.0/175.0*t18*t257+114.0/875.0*t26*t257+4152.0/67375.0*t34*t257);
	const double t268 = F[6]*F[2];
	const double t276 = nkTheta*(2.0/5.0*t54*F[6]+44.0/175.0*t18*t268+114.0/875.0*t26*t268+4152.0/67375.0*t34*t268);
	const double t279 = F[7]*F[2];
	const double t287 = nkTheta*(2.0/5.0*t54*F[7]+44.0/175.0*t18*t279+114.0/875.0*t26*t279+4152.0/67375.0*t34*t279);
	const double t290 = F[8]*F[2];
	const double t298 = nkTheta*(2.0/5.0*t54*F[8]+44.0/175.0*t18*t290+114.0/875.0*t26*t290+4152.0/67375.0*t34*t290);
	const double t311 = F[3]*F[4];
	const double t319 = nkTheta*(2.0/5.0*t78*F[3]+44.0/175.0*t18*t311+114.0/875.0*t26*t311+4152.0/67375.0*t34*t311);
	const double t322 = F[5]*F[3];
	const double t330 = nkTheta*(2.0/5.0*t66*F[5]+44.0/175.0*t18*t322+114.0/875.0*t26*t322+4152.0/67375.0*t34*t322);
	const double t333 = F[6]*F[3];
	const double t341 = nkTheta*(2.0/5.0*t66*F[6]+44.0/175.0*t18*t333+114.0/875.0*t26*t333+4152.0/67375.0*t34*t333);
	const double t344 = F[3]*F[7];
	const double t352 = nkTheta*(2.0/5.0*t66*F[7]+44.0/175.0*t18*t344+114.0/875.0*t26*t344+4152.0/67375.0*t34*t344);
	const double t355 = F[3]*F[8];
	const double t363 = nkTheta*(2.0/5.0*t66*F[8]+44.0/175.0*t18*t355+114.0/875.0*t26*t355+4152.0/67375.0*t34*t355);
	const double t376 = F[5]*F[4];
	const double t384 = nkTheta*(2.0/5.0*t78*F[5]+44.0/175.0*t18*t376+114.0/875.0*t26*t376+4152.0/67375.0*t34*t376);
	const double t387 = F[6]*F[4];
	const double t395 = nkTheta*(2.0/5.0*t78*F[6]+44.0/175.0*t18*t387+114.0/875.0*t26*t387+4152.0/67375.0*t34*t387);
	const double t398 = F[7]*F[4];
	const double t406 = nkTheta*(2.0/5.0*t78*F[7]+44.0/175.0*t18*t398+114.0/875.0*t26*t398+4152.0/67375.0*t34*t398);
	const double t409 = F[4]*F[8];
	const double t417 = nkTheta*(2.0/5.0*t78*F[8]+44.0/175.0*t18*t409+114.0/875.0*t26*t409+4152.0/67375.0*t34*t409);
	const double t431 = F[6]*F[5];
	const double t439 = nkTheta*(2.0/5.0*t1*F[6]*F[5]+44.0/175.0*t18*t431+114.0/875.0*t26*t431+4152.0/67375.0*t34*t431);
	const double t440 = t1*F[7];
	const double t443 = F[7]*F[5];
	const double t451 = nkTheta*(2.0/5.0*t440*F[5]+44.0/175.0*t18*t443+114.0/875.0*t26*t443+4152.0/67375.0*t34*t443);
	const double t452 = t1*F[8];
	const double t455 = F[5]*F[8];
	const double t463 = nkTheta*(2.0/5.0*t452*F[5]+44.0/175.0*t18*t455+114.0/875.0*t26*t455+4152.0/67375.0*t34*t455);
	const double t476 = F[6]*F[7];
	const double t484 = nkTheta*(2.0/5.0*t440*F[6]+44.0/175.0*t18*t476+114.0/875.0*t26*t476+4152.0/67375.0*t34*t476);
	const double t487 = F[6]*F[8];
	const double t495 = nkTheta*(2.0/5.0*t452*F[6]+44.0/175.0*t18*t487+114.0/875.0*t26*t487+4152.0/67375.0*t34*t487);
	const double t508 = F[7]*F[8];
	const double t516 = nkTheta*(2.0/5.0*t452*F[7]+44.0/175.0*t18*t508+114.0/875.0*t26*t508+4152.0/67375.0*t34*t508);
	stiffness[0] = -nkTheta*(1.0+2.0/5.0*t1*t2+t15+44.0/175.0*t18*t2+t23+114.0/875.0*t26*t2+t31+4152.0/67375.0*t34*t2+t39);
	stiffness[1] = -t53;
	stiffness[2] = -t65;
	stiffness[3] = -t77;
	stiffness[4] = -t89;
	stiffness[5] = -t101;
	stiffness[6] = -t113;
	stiffness[7] = -t124;
	stiffness[8] = -t135;
	stiffness[9] = -t53;
	stiffness[10] = -nkTheta*(1.0+2.0/5.0*t1*t5+t15+44.0/175.0*t18*t5+t23+114.0/875.0*t26*t5+t31+4152.0/67375.0*t34*t5+t39);
	stiffness[11] = -t156;
	stiffness[12] = -t167;
	stiffness[13] = -t178;
	stiffness[14] = -t189;
	stiffness[15] = -t200;
	stiffness[16] = -t211;
	stiffness[17] = -t222;
	stiffness[18] = -t65;
	stiffness[19] = -t156;
	stiffness[20] = -nkTheta*(1.0+2.0/5.0*t1*t6+t15+44.0/175.0*t18*t6+t23+114.0/875.0*t26*t6+t31+4152.0/67375.0*t34*t6+t39);
	stiffness[21] = -t243;
	stiffness[22] = -t254;
	stiffness[23] = -t265;
	stiffness[24] = -t276;
	stiffness[25] = -t287;
	stiffness[26] = -t298;
	stiffness[27] = -t77;
	stiffness[28] = -t167;
	stiffness[29] = -t243;
	stiffness[30] = -nkTheta*(1.0+2.0/5.0*t1*t7+t15+44.0/175.0*t18*t7+t23+114.0/875.0*t26*t7+t31+4152.0/67375.0*t34*t7+t39);
	stiffness[31] = -t319;
	stiffness[32] = -t330;
	stiffness[33] = -t341;
	stiffness[34] = -t352;
	stiffness[35] = -t363;
	stiffness[36] = -t89;
	stiffness[37] = -t178;
	stiffness[38] = -t254;
	stiffness[39] = -t319;
	stiffness[40] = -nkTheta*(1.0+2.0/5.0*t1*t8+t15+44.0/175.0*t18*t8+t23+114.0/875.0*t26*t8+t31+4152.0/67375.0*t34*t8+t39);
	stiffness[41] = -t384;
	stiffness[42] = -t395;
	stiffness[43] = -t406;
	stiffness[44] = -t417;
	stiffness[45] = -t101;
	stiffness[46] = -t189;
	stiffness[47] = -t265;
	stiffness[48] = -t330;
	stiffness[49] = -t384;
	stiffness[50] = -nkTheta*(1.0+2.0/5.0*t1*t9+t15+44.0/175.0*t18*t9+t23+114.0/875.0*t26*t9+t31+4152.0/67375.0*t34*t9+t39);
	stiffness[51] = -t439;
	stiffness[52] = -t451;
	stiffness[53] = -t463;
	stiffness[54] = -t113;
	stiffness[55] = -t200;
	stiffness[56] = -t276;
	stiffness[57] = -t341;
	stiffness[58] = -t395;
	stiffness[59] = -t439;
	stiffness[60] = -nkTheta*(1.0+2.0/5.0*t1*t10+t15+44.0/175.0*t18*t10+t23+114.0/875.0*t26*t10+t31+4152.0/67375.0*t34*t10+t39);
	stiffness[61] = -t484;
	stiffness[62] = -t495;
	stiffness[63] = -t124;
	stiffness[64] = -t211;
	stiffness[65] = -t287;
	stiffness[66] = -t352;
	stiffness[67] = -t406;
	stiffness[68] = -t451;
	stiffness[69] = -t484;
	stiffness[70] = -nkTheta*(1.0+2.0/5.0*t1*t11+t15+44.0/175.0*t18*t11+t23+114.0/875.0*t26*t11+t31+4152.0/67375.0*t34*t11+t39);
	stiffness[71] = -t516;
	stiffness[72] = -t135;
	stiffness[73] = -t222;
	stiffness[74] = -t298;
	stiffness[75] = -t363;
	stiffness[76] = -t417;
	stiffness[77] = -t463;
	stiffness[78] = -t495;
	stiffness[79] = -t516;
	stiffness[80] = -nkTheta*(1.0+2.0/5.0*t1*t12+t15+44.0/175.0*t18*t12+t23+114.0/875.0*t26*t12+t31+4152.0/67375.0*t34*t12+t39);
  penaltyStiffnessDensity(_k, F, stiffness);
}

//////////////////////////////////////////////////////////////////////
// autogenerated as "forceDensity" from:
//
// setup_symbols;
// syms nkTheta N;
// strain_energy = nkTheta*( 1/2*(I_C-3) + 1/(20*N)*(I_C^2-9) + 11/(1050*N^2)*(I_C^3-27) + 19/(7000*N^3)*(I_C^4-81) + 519/(673750*N^4)*(I_C^5-243));
// [forceDensity stiffnessDensity] = codegen_density(strain_energy,F)
//
// see "MATERIAL.h" for more details
//////////////////////////////////////////////////////////////////////
void ARRUDA_BOYCE::forceDensity(const Real* F, Real* forces, bool diagonal)
{
	const double nkTheta = _nkTheta;
	const double N = _Nconst;
	
	const double t2 = F[0]*F[0];
	const double t3 = F[1]*F[1];
	const double t4 = F[2]*F[2];
	const double t5 = F[3]*F[3];
	const double t6 = F[4]*F[4];
	const double t7 = F[5]*F[5];
	const double t8 = F[6]*F[6];
	const double t9 = F[7]*F[7];
	const double t10 = F[8]*F[8];
	const double t11 = t2+t3+t4+t5+t6+t7+t8+t9+t10;
	const double t12 = 1/N*t11;
	const double t15 = N*N;
	const double t17 = t11*t11;
	const double t18 = 1/t15*t17;
	const double t24 = 1/t15/N*t17*t11;
	const double t27 = t15*t15;
	const double t29 = t17*t17;
	const double t30 = 1/t27*t29;

	forces[0] = -nkTheta*(F[0]+t12*F[0]/5.0+11.0/175.0*t18*F[0]+19.0/875.0*t24*F[0]+519.0/67375.0*t30*F[0]);
	forces[1] = -nkTheta*(F[1]+t12*F[1]/5.0+11.0/175.0*t18*F[1]+19.0/875.0*t24*F[1]+519.0/67375.0*t30*F[1]);
	forces[2] = -nkTheta*(F[2]+t12*F[2]/5.0+11.0/175.0*t18*F[2]+19.0/875.0*t24*F[2]+519.0/67375.0*t30*F[2]);
	forces[3] = -nkTheta*(F[3]+t12*F[3]/5.0+11.0/175.0*t18*F[3]+19.0/875.0*t24*F[3]+519.0/67375.0*t30*F[3]);
	forces[4] = -nkTheta*(F[4]+t12*F[4]/5.0+11.0/175.0*t18*F[4]+19.0/875.0*t24*F[4]+519.0/67375.0*t30*F[4]);
	forces[5] = -nkTheta*(F[5]+t12*F[5]/5.0+11.0/175.0*t18*F[5]+19.0/875.0*t24*F[5]+519.0/67375.0*t30*F[5]);
	forces[6] = -nkTheta*(F[6]+t12*F[6]/5.0+11.0/175.0*t18*F[6]+19.0/875.0*t24*F[6]+519.0/67375.0*t30*F[6]);
	forces[7] = -nkTheta*(F[7]+t12*F[7]/5.0+11.0/175.0*t18*F[7]+19.0/875.0*t24*F[7]+519.0/67375.0*t30*F[7]);
	forces[8] = -nkTheta*(F[8]+t12*F[8]/5.0+11.0/175.0*t18*F[8]+19.0/875.0*t24*F[8]+519.0/67375.0*t30*F[8]);

  //----------------------------------------
  //  Teran03 penalty force term
  //----------------------------------------
  penaltyForceDensity(_k, F, forces);
}

//////////////////////////////////////////////////////////////////////
// stiffness matrix implementation
//
// The Matlab code to generate the code is below. This computes
// stiffness wrt F with the expectation that it will be multiplied
// by DF/Du later to get the stiffness wrt u
//
// see "MATERIAL.h" for more details
/*
function code = codegen_arruda_boyce_stiffness_wrt_F()
    syms f00 f01 f02 f10 f11 f12 f20 f21 f22;
    F = [
        f00 f01 f02
        f10 f11 f12
        f20 f21 f22
        ];
    syms b00 b01 b02 b10 b11 b12 b20 b21 b22 b30 b31 b32;
    b = [
        b00 b10 b20 b30
        b01 b11 b21 b31
        b02 b12 b22 b32
        ];
    display '-- computing 2nd PK --';
    C = mytrans(F)*F;
    syms nkTheta N kBulkMod;
    display '-- calculating force --';
    I_C = trace(C);
    energy = nkTheta*( 1/2*(I_C-3) + 1/(20*N)*(I_C^2-9) + 11/(1050*N^2)*(I_C^3-27) + 19/(7000*N^3)*(I_C^4-81) + 519/(673750*N^4)*(I_C^5-243));    
    P = [diff(energy, f00) diff(energy, f01) diff(energy, f02);
         diff(energy, f10) diff(energy, f11) diff(energy, f12);
         diff(energy, f20) diff(energy, f21) diff(energy, f22)]
    
    forces = P * b;
    forces = reshape(forces, 12, 1);
    F = reshape(F, 9, 1);
    
    display '-- differentiating --';
    df_dF = sym('a') * ones(12,9);
    for i = 1:12
        for j = 1:9
            df_dF(i,j) = diff( forces(i), F(j) );
        end
    end
    display '-- code gen''ing --';   
    code = maple('codegen[C]', df_dF, 'optimized');
end
*/
//////////////////////////////////////////////////////////////////////
void ARRUDA_BOYCE::computeStresses(TET& tet)
{
  MATRIX3 F = tet.F();
  const VEC3F* areaVecs = tet.b();
  _pf_pF.clear();

  const double N = _Nconst;
  const double nkTheta = _nkTheta;
  
  const double f00 = F(0,0);
  const double f01 = F(0,1);
  const double f02 = F(0,2);
  const double f10 = F(1,0);
  const double f11 = F(1,1);
  const double f12 = F(1,2);
  const double f20 = F(2,0);
  const double f21 = F(2,1);
  const double f22 = F(2,2);

  const double b00 = areaVecs[0][0];
  const double b01 = areaVecs[0][1];
  const double b02 = areaVecs[0][2];
  const double b10 = areaVecs[1][0];
  const double b11 = areaVecs[1][1];
  const double b12 = areaVecs[1][2];
  const double b20 = areaVecs[2][0];
  const double b21 = areaVecs[2][1];
  const double b22 = areaVecs[2][2];
  const double b30 = areaVecs[3][0];
  const double b31 = areaVecs[3][1];
  const double b32 = areaVecs[3][2];

  const double t1 = 1/N;
  const double t2 = f00*f00;
  const double t3 = f10*f10;
  const double t4 = f20*f20;
  const double t5 = f01*f01;
  const double t6 = f11*f11;
  const double t7 = f21*f21;
  const double t8 = f02*f02;
  const double t9 = f12*f12;
  const double t10 = f22*f22;
  const double t11 = t2+t3+t4+t5+t6+t7+t8+t9+t10;
  const double t14 = N*N;
  const double t15 = 1/t14;
  const double t16 = t11*t11;
  const double t20 = 1/t14/N;
  const double t21 = t16*t11;
  const double t24 = t14*t14;
  const double t25 = 1/t24;
  const double t26 = t16*t16;
  const double t30 = nkTheta*(1.0/2.0+t1*t11/10.0+11.0/350.0*t15*t16+19.0/1750.0*t20*t21+519.0/134750.0*t25*t26);
  const double t31 = t30*b00;
  const double t32 = f00*nkTheta;
  const double t35 = t15*t11;
  const double t38 = t20*t16;
  const double t41 = t25*t21;
  const double t44 = t1*f00/5.0+22.0/175.0*t35*f00+57.0/875.0*t38*f00+2076.0/67375.0*t41*f00;
  const double t45 = t44*b00;
  const double t47 = f01*nkTheta;
  const double t48 = t44*b01;
  const double t50 = f02*nkTheta;
  const double t51 = t44*b02;
  const double t62 = t1*f10/5.0+22.0/175.0*t35*f10+57.0/875.0*t38*f10+2076.0/67375.0*t41*f10;
  const double t63 = t62*b00;
  const double t65 = t62*b01;
  const double t67 = t62*b02;
  const double t78 = t1*f20/5.0+22.0/175.0*t35*f20+57.0/875.0*t38*f20+2076.0/67375.0*t41*f20;
  const double t79 = t78*b00;
  const double t81 = t78*b01;
  const double t83 = t78*b02;
  const double t94 = t1*f01/5.0+22.0/175.0*t35*f01+57.0/875.0*t38*f01+2076.0/67375.0*t41*f01;
  const double t95 = t94*b00;
  const double t97 = t30*b01;
  const double t98 = t94*b01;
  const double t100 = t94*b02;
  const double t111 = t1*f11/5.0+22.0/175.0*t35*f11+57.0/875.0*t38*f11+2076.0/67375.0*t41*f11;
  const double t112 = t111*b00;
  const double t114 = t111*b01;
  const double t116 = t111*b02;
  const double t127 = t1*f21/5.0+22.0/175.0*t35*f21+57.0/875.0*t38*f21+2076.0/67375.0*t41*f21;
  const double t128 = t127*b00;
  const double t130 = t127*b01;
  const double t132 = t127*b02;
  const double t143 = t1*f02/5.0+22.0/175.0*t35*f02+57.0/875.0*t38*f02+2076.0/67375.0*t41*f02;
  const double t144 = t143*b00;
  const double t146 = t143*b01;
  const double t148 = t30*b02;
  const double t149 = t143*b02;
  const double t160 = t1*f12/5.0+22.0/175.0*t35*f12+57.0/875.0*t38*f12+2076.0/67375.0*t41*f12;
  const double t161 = t160*b00;
  const double t163 = t160*b01;
  const double t165 = t160*b02;
  const double t176 = t1*f22/5.0+22.0/175.0*t35*f22+57.0/875.0*t38*f22+2076.0/67375.0*t41*f22;
  const double t177 = t176*b00;
  const double t179 = t176*b01;
  const double t181 = t176*b02;
  const double t184 = f10*nkTheta;
  const double t186 = f11*nkTheta;
  const double t188 = f12*nkTheta;
  const double t223 = f20*nkTheta;
  const double t225 = f21*nkTheta;
  const double t227 = f22*nkTheta;
  const double t262 = t30*b10;
  const double t263 = t44*b10;
  const double t265 = t44*b11;
  const double t267 = t44*b12;
  const double t270 = t62*b10;
  const double t272 = t62*b11;
  const double t274 = t62*b12;
  const double t277 = t78*b10;
  const double t279 = t78*b11;
  const double t281 = t78*b12;
  const double t284 = t94*b10;
  const double t286 = t30*b11;
  const double t287 = t94*b11;
  const double t289 = t94*b12;
  const double t292 = t111*b10;
  const double t294 = t111*b11;
  const double t296 = t111*b12;
  const double t299 = t127*b10;
  const double t301 = t127*b11;
  const double t303 = t127*b12;
  const double t306 = t143*b10;
  const double t308 = t143*b11;
  const double t310 = t30*b12;
  const double t311 = t143*b12;
  const double t314 = t160*b10;
  const double t316 = t160*b11;
  const double t318 = t160*b12;
  const double t321 = t176*b10;
  const double t323 = t176*b11;
  const double t325 = t176*b12;
  const double t400 = t30*b20;
  const double t401 = t44*b20;
  const double t403 = t44*b21;
  const double t405 = t44*b22;
  const double t408 = t62*b20;
  const double t410 = t62*b21;
  const double t412 = t62*b22;
  const double t415 = t78*b20;
  const double t417 = t78*b21;
  const double t419 = t78*b22;
  const double t422 = t94*b20;
  const double t424 = t30*b21;
  const double t425 = t94*b21;
  const double t427 = t94*b22;
  const double t430 = t111*b20;
  const double t432 = t111*b21;
  const double t434 = t111*b22;
  const double t437 = t127*b20;
  const double t439 = t127*b21;
  const double t441 = t127*b22;
  const double t444 = t143*b20;
  const double t446 = t143*b21;
  const double t448 = t30*b22;
  const double t449 = t143*b22;
  const double t452 = t160*b20;
  const double t454 = t160*b21;
  const double t456 = t160*b22;
  const double t459 = t176*b20;
  const double t461 = t176*b21;
  const double t463 = t176*b22;
  const double t538 = t30*b30;
  const double t539 = t44*b30;
  const double t541 = t44*b31;
  const double t543 = t44*b32;
  const double t546 = t62*b30;
  const double t548 = t62*b31;
  const double t550 = t62*b32;
  const double t553 = t78*b30;
  const double t555 = t78*b31;
  const double t557 = t78*b32;
  const double t560 = t94*b30;
  const double t562 = t30*b31;
  const double t563 = t94*b31;
  const double t565 = t94*b32;
  const double t568 = t111*b30;
  const double t570 = t111*b31;
  const double t572 = t111*b32;
  const double t575 = t127*b30;
  const double t577 = t127*b31;
  const double t579 = t127*b32;
  const double t582 = t143*b30;
  const double t584 = t143*b31;
  const double t586 = t30*b32;
  const double t587 = t143*b32;
  const double t590 = t160*b30;
  const double t592 = t160*b31;
  const double t594 = t160*b32;
  const double t597 = t176*b30;
  const double t599 = t176*b31;
  const double t601 = t176*b32;
  _pf_pF(0,0) += 2.0*t31+2.0*t32*t45+2.0*t47*t48+2.0*t50*t51;
  _pf_pF(0,1) += 2.0*t32*t63+2.0*t47*t65+2.0*t50*t67;
  _pf_pF(0,2) += 2.0*t32*t79+2.0*t47*t81+2.0*t50*t83;
  _pf_pF(0,3) += 2.0*t32*t95+2.0*t97+2.0*t47*t98+2.0*t50*t100;
  _pf_pF(0,4) += 2.0*t32*t112+2.0*t47*t114+2.0*t50*t116;
  _pf_pF(0,5) += 2.0*t32*t128+2.0*t47*t130+2.0*t50*t132;
  _pf_pF(0,6) += 2.0*t32*t144+2.0*t47*t146+2.0*t148+2.0*t50*t149;
  _pf_pF(0,7) += 2.0*t32*t161+2.0*t47*t163+2.0*t50*t165;
  _pf_pF(0,8) += 2.0*t32*t177+2.0*t47*t179+2.0*t50*t181;
  _pf_pF(1,0) += 2.0*t184*t45+2.0*t186*t48+2.0*t188*t51;
  _pf_pF(1,1) += 2.0*t31+2.0*t184*t63+2.0*t186*t65+2.0*t188*t67;
  _pf_pF(1,2) += 2.0*t184*t79+2.0*t186*t81+2.0*t188*t83;
  _pf_pF(1,3) += 2.0*t184*t95+2.0*t186*t98+2.0*t188*t100;
  _pf_pF(1,4) += 2.0*t184*t112+2.0*t97+2.0*t186*t114+2.0*t188*t116;
  _pf_pF(1,5) += 2.0*t184*t128+2.0*t186*t130+2.0*t188*t132;
  _pf_pF(1,6) += 2.0*t184*t144+2.0*t186*t146+2.0*t188*t149;
  _pf_pF(1,7) += 2.0*t184*t161+2.0*t186*t163+2.0*t148+2.0*t188*t165;
  _pf_pF(1,8) += 2.0*t184*t177+2.0*t186*t179+2.0*t188*t181;
  _pf_pF(2,0) += 2.0*t223*t45+2.0*t225*t48+2.0*t227*t51;
  _pf_pF(2,1) += 2.0*t223*t63+2.0*t225*t65+2.0*t227*t67;
  _pf_pF(2,2) += 2.0*t31+2.0*t223*t79+2.0*t225*t81+2.0*t227*t83;
  _pf_pF(2,3) += 2.0*t223*t95+2.0*t225*t98+2.0*t227*t100;
  _pf_pF(2,4) += 2.0*t223*t112+2.0*t225*t114+2.0*t227*t116;
  _pf_pF(2,5) += 2.0*t223*t128+2.0*t97+2.0*t225*t130+2.0*t227*t132;
  _pf_pF(2,6) += 2.0*t223*t144+2.0*t225*t146+2.0*t227*t149;
  _pf_pF(2,7) += 2.0*t223*t161+2.0*t225*t163+2.0*t227*t165;
  _pf_pF(2,8) += 2.0*t223*t177+2.0*t225*t179+2.0*t148+2.0*t227*t181;
  _pf_pF(3,0) += 2.0*t262+2.0*t32*t263+2.0*t47*t265+2.0*t50*t267;
  _pf_pF(3,1) += 2.0*t32*t270+2.0*t47*t272+2.0*t50*t274;
  _pf_pF(3,2) += 2.0*t32*t277+2.0*t47*t279+2.0*t50*t281;
  _pf_pF(3,3) += 2.0*t32*t284+2.0*t286+2.0*t47*t287+2.0*t50*t289;
  _pf_pF(3,4) += 2.0*t32*t292+2.0*t47*t294+2.0*t50*t296;
  _pf_pF(3,5) += 2.0*t32*t299+2.0*t47*t301+2.0*t50*t303;
  _pf_pF(3,6) += 2.0*t32*t306+2.0*t47*t308+2.0*t310+2.0*t50*t311;
  _pf_pF(3,7) += 2.0*t32*t314+2.0*t47*t316+2.0*t50*t318;
  _pf_pF(3,8) += 2.0*t32*t321+2.0*t47*t323+2.0*t50*t325;
  _pf_pF(4,0) += 2.0*t184*t263+2.0*t186*t265+2.0*t188*t267;
  _pf_pF(4,1) += 2.0*t262+2.0*t184*t270+2.0*t186*t272+2.0*t188*t274;
  _pf_pF(4,2) += 2.0*t184*t277+2.0*t186*t279+2.0*t188*t281;
  _pf_pF(4,3) += 2.0*t184*t284+2.0*t186*t287+2.0*t188*t289;
  _pf_pF(4,4) += 2.0*t184*t292+2.0*t286+2.0*t186*t294+2.0*t188*t296;
  _pf_pF(4,5) += 2.0*t184*t299+2.0*t186*t301+2.0*t188*t303;
  _pf_pF(4,6) += 2.0*t184*t306+2.0*t186*t308+2.0*t188*t311;
  _pf_pF(4,7) += 2.0*t184*t314+2.0*t186*t316+2.0*t310+2.0*t188*t318;
  _pf_pF(4,8) += 2.0*t184*t321+2.0*t186*t323+2.0*t188*t325;
  _pf_pF(5,0) += 2.0*t223*t263+2.0*t225*t265+2.0*t227*t267;
  _pf_pF(5,1) += 2.0*t223*t270+2.0*t225*t272+2.0*t227*t274;
  _pf_pF(5,2) += 2.0*t262+2.0*t223*t277+2.0*t225*t279+2.0*t227*t281;
  _pf_pF(5,3) += 2.0*t223*t284+2.0*t225*t287+2.0*t227*t289;
  _pf_pF(5,4) += 2.0*t223*t292+2.0*t225*t294+2.0*t227*t296;
  _pf_pF(5,5) += 2.0*t223*t299+2.0*t286+2.0*t225*t301+2.0*t227*t303;
  _pf_pF(5,6) += 2.0*t223*t306+2.0*t225*t308+2.0*t227*t311;
  _pf_pF(5,7) += 2.0*t223*t314+2.0*t225*t316+2.0*t227*t318;
  _pf_pF(5,8) += 2.0*t223*t321+2.0*t225*t323+2.0*t310+2.0*t227*t325;
  _pf_pF(6,0) += 2.0*t400+2.0*t32*t401+2.0*t47*t403+2.0*t50*t405;
  _pf_pF(6,1) += 2.0*t32*t408+2.0*t47*t410+2.0*t50*t412;
  _pf_pF(6,2) += 2.0*t32*t415+2.0*t47*t417+2.0*t50*t419;
  _pf_pF(6,3) += 2.0*t32*t422+2.0*t424+2.0*t47*t425+2.0*t50*t427;
  _pf_pF(6,4) += 2.0*t32*t430+2.0*t47*t432+2.0*t50*t434;
  _pf_pF(6,5) += 2.0*t32*t437+2.0*t47*t439+2.0*t50*t441;
  _pf_pF(6,6) += 2.0*t32*t444+2.0*t47*t446+2.0*t448+2.0*t50*t449;
  _pf_pF(6,7) += 2.0*t32*t452+2.0*t47*t454+2.0*t50*t456;
  _pf_pF(6,8) += 2.0*t32*t459+2.0*t47*t461+2.0*t50*t463;
  _pf_pF(7,0) += 2.0*t184*t401+2.0*t186*t403+2.0*t188*t405;
  _pf_pF(7,1) += 2.0*t400+2.0*t184*t408+2.0*t186*t410+2.0*t188*t412;
  _pf_pF(7,2) += 2.0*t184*t415+2.0*t186*t417+2.0*t188*t419;
  _pf_pF(7,3) += 2.0*t184*t422+2.0*t186*t425+2.0*t188*t427;
  _pf_pF(7,4) += 2.0*t184*t430+2.0*t424+2.0*t186*t432+2.0*t188*t434;
  _pf_pF(7,5) += 2.0*t184*t437+2.0*t186*t439+2.0*t188*t441;
  _pf_pF(7,6) += 2.0*t184*t444+2.0*t186*t446+2.0*t188*t449;
  _pf_pF(7,7) += 2.0*t184*t452+2.0*t186*t454+2.0*t448+2.0*t188*t456;
  _pf_pF(7,8) += 2.0*t184*t459+2.0*t186*t461+2.0*t188*t463;
  _pf_pF(8,0) += 2.0*t223*t401+2.0*t225*t403+2.0*t227*t405;
  _pf_pF(8,1) += 2.0*t223*t408+2.0*t225*t410+2.0*t227*t412;
  _pf_pF(8,2) += 2.0*t400+2.0*t223*t415+2.0*t225*t417+2.0*t227*t419;
  _pf_pF(8,3) += 2.0*t223*t422+2.0*t225*t425+2.0*t227*t427;
  _pf_pF(8,4) += 2.0*t223*t430+2.0*t225*t432+2.0*t227*t434;
  _pf_pF(8,5) += 2.0*t223*t437+2.0*t424+2.0*t225*t439+2.0*t227*t441;
  _pf_pF(8,6) += 2.0*t223*t444+2.0*t225*t446+2.0*t227*t449;
  _pf_pF(8,7) += 2.0*t223*t452+2.0*t225*t454+2.0*t227*t456;
  _pf_pF(8,8) += 2.0*t223*t459+2.0*t225*t461+2.0*t448+2.0*t227*t463;
  _pf_pF(9,0) += 2.0*t538+2.0*t32*t539+2.0*t47*t541+2.0*t50*t543;
  _pf_pF(9,1) += 2.0*t32*t546+2.0*t47*t548+2.0*t50*t550;
  _pf_pF(9,2) += 2.0*t32*t553+2.0*t47*t555+2.0*t50*t557;
  _pf_pF(9,3) += 2.0*t32*t560+2.0*t562+2.0*t47*t563+2.0*t50*t565;
  _pf_pF(9,4) += 2.0*t32*t568+2.0*t47*t570+2.0*t50*t572;
  _pf_pF(9,5) += 2.0*t32*t575+2.0*t47*t577+2.0*t50*t579;
  _pf_pF(9,6) += 2.0*t32*t582+2.0*t47*t584+2.0*t586+2.0*t50*t587;
  _pf_pF(9,7) += 2.0*t32*t590+2.0*t47*t592+2.0*t50*t594;
  _pf_pF(9,8) += 2.0*t32*t597+2.0*t47*t599+2.0*t50*t601;
  _pf_pF(10,0) += 2.0*t184*t539+2.0*t186*t541+2.0*t188*t543;
  _pf_pF(10,1) += 2.0*t538+2.0*t184*t546+2.0*t186*t548+2.0*t188*t550;
  _pf_pF(10,2) += 2.0*t184*t553+2.0*t186*t555+2.0*t188*t557;
  _pf_pF(10,3) += 2.0*t184*t560+2.0*t186*t563+2.0*t188*t565;
  _pf_pF(10,4) += 2.0*t184*t568+2.0*t562+2.0*t186*t570+2.0*t188*t572;
  _pf_pF(10,5) += 2.0*t184*t575+2.0*t186*t577+2.0*t188*t579;
  _pf_pF(10,6) += 2.0*t184*t582+2.0*t186*t584+2.0*t188*t587;
  _pf_pF(10,7) += 2.0*t184*t590+2.0*t186*t592+2.0*t586+2.0*t188*t594;
  _pf_pF(10,8) += 2.0*t184*t597+2.0*t186*t599+2.0*t188*t601;
  _pf_pF(11,0) += 2.0*t223*t539+2.0*t225*t541+2.0*t227*t543;
  _pf_pF(11,1) += 2.0*t223*t546+2.0*t225*t548+2.0*t227*t550;
  _pf_pF(11,2) += 2.0*t538+2.0*t223*t553+2.0*t225*t555+2.0*t227*t557;
  _pf_pF(11,3) += 2.0*t223*t560+2.0*t225*t563+2.0*t227*t565;
  _pf_pF(11,4) += 2.0*t223*t568+2.0*t225*t570+2.0*t227*t572;
  _pf_pF(11,5) += 2.0*t223*t575+2.0*t562+2.0*t225*t577+2.0*t227*t579;
  _pf_pF(11,6) += 2.0*t223*t582+2.0*t225*t584+2.0*t227*t587;
  _pf_pF(11,7) += 2.0*t223*t590+2.0*t225*t592+2.0*t227*t594;
  _pf_pF(11,8) += 2.0*t223*t597+2.0*t225*t599+2.0*t586+2.0*t227*t601;
}

void ARRUDA_BOYCE::hessian0(const Real* F, const VEC3F* b, MATRIX& hessian) {
  const double N = _Nconst;
  const double nkTheta = _nkTheta;
  const double b00 = b[0][0];
  const double b01 = b[0][1];
  const double b02 = b[0][2];
  const double b10 = b[1][0];
  const double b11 = b[1][1];
  const double b12 = b[1][2];
  const double b20 = b[2][0];
  const double b21 = b[2][1];
  const double b22 = b[2][2];
  const double b30 = b[3][0];
  const double b31 = b[3][1];
  const double b32 = b[3][2]; 

 
  Real t1 = 1/N;
  Real t2 = t1*F[0];
  Real t4 = N*N;
  Real t5 = 1/t4;
  Real t6 = F[0]*F[0];
  Real t7 = t6*F[0];
  Real t10 = F[1]*F[1];
  Real t11 = F[2]*F[2];
  Real t12 = F[3]*F[3];
  Real t13 = F[4]*F[4];
  Real t14 = F[5]*F[5];
  Real t15 = F[6]*F[6];
  Real t16 = F[7]*F[7];
  Real t17 = F[8]*F[8];
  Real t18 = t6+t10+t11+t12+t13+t14+t15+t16+t17;
  Real t19 = t5*t18;
  Real t20 = t19*F[0];
  Real t23 = 1/t4/N;
  Real t24 = t23*t18;
  Real t27 = t18*t18;
  Real t28 = t23*t27;
  Real t29 = t28*F[0];
  Real t31 = t4*t4;
  Real t32 = 1/t31;
  Real t33 = t32*t27;
  Real t37 = t32*t27*t18;
  Real t38 = t37*F[0];
  Real t41 = nkTheta*(6.0/5.0*t2+88.0/175.0*t5*t7+132.0/175.0*t20+456.0/875.0*t24*t7+342.0/875.0*t29+24912.0/67375.0*t33*t7+12456.0/67375.0*t38);
  Real t45 = t5*t6;
  Real t50 = F[3]*t6;
  Real t60 = nkTheta*(2.0/5.0*t1*F[3]+88.0/175.0*t45*F[3]+44.0/175.0*t19*F[3]+456.0/875.0*t24*t50+114.0/875.0*t28*F[3]+24912.0/67375.0*t33*t50+4152.0/67375.0*t37*F[3]);
  Real t64 = t5*F[6];
  Real t69 = t6*F[6];
  Real t79 = nkTheta*(2.0/5.0*t1*F[6]+88.0/175.0*t64*t6+44.0/175.0*t19*F[6]+456.0/875.0*t24*t69+114.0/875.0*t28*F[6]+24912.0/67375.0*t33*t69+4152.0/67375.0*t37*F[6]);
  Real t88 = t6*F[1];
  Real t98 = nkTheta*(2.0/5.0*t1*F[1]+88.0/175.0*t45*F[1]+44.0/175.0*t19*F[1]+456.0/875.0*t24*t88+114.0/875.0*t28*F[1]+24912.0/67375.0*t33*t88+4152.0/67375.0*t37*F[1]);
  Real t99 = t98*b00;
  Real t100 = t5*F[0];
  Real t101 = F[3]*F[1];
  Real t104 = t101*F[0];
  Real t110 = nkTheta*(88.0/175.0*t100*t101+456.0/875.0*t24*t104+24912.0/67375.0*t33*t104);
  Real t112 = F[0]*F[1];
  Real t115 = t112*F[6];
  Real t121 = nkTheta*(88.0/175.0*t64*t112+456.0/875.0*t24*t115+24912.0/67375.0*t33*t115);
  Real t130 = t6*F[2];
  Real t140 = nkTheta*(2.0/5.0*t1*F[2]+88.0/175.0*t45*F[2]+44.0/175.0*t19*F[2]+456.0/875.0*t24*t130+114.0/875.0*t28*F[2]+24912.0/67375.0*t33*t130+4152.0/67375.0*t37*F[2]);
  Real t141 = t140*b00;
  Real t142 = F[3]*F[2];
  Real t145 = t142*F[0];
  Real t151 = nkTheta*(88.0/175.0*t100*t142+456.0/875.0*t24*t145+24912.0/67375.0*t33*t145);
  Real t153 = F[6]*F[2];
  Real t156 = t153*F[0];
  Real t162 = nkTheta*(88.0/175.0*t100*t153+456.0/875.0*t24*t156+24912.0/67375.0*t33*t156);
  Real t166 = 2.0/5.0*t2;
  Real t169 = 44.0/175.0*t20;
  Real t170 = t12*F[0];
  Real t173 = 114.0/875.0*t29;
  Real t176 = 4152.0/67375.0*t38;
  Real t178 = nkTheta*(t166+88.0/175.0*t100*t12+t169+456.0/875.0*t24*t170+t173+24912.0/67375.0*t33*t170+t176);
  Real t180 = F[6]*F[3];
  Real t183 = t180*F[0];
  Real t189 = nkTheta*(88.0/175.0*t100*t180+456.0/875.0*t24*t183+24912.0/67375.0*t33*t183);
  Real t198 = t6*F[4];
  Real t208 = nkTheta*(2.0/5.0*t1*F[4]+88.0/175.0*t45*F[4]+44.0/175.0*t19*F[4]+456.0/875.0*t24*t198+114.0/875.0*t28*F[4]+24912.0/67375.0*t33*t198+4152.0/67375.0*t37*F[4]);
  Real t210 = F[3]*F[4];
  Real t213 = t210*F[0];
  Real t219 = nkTheta*(88.0/175.0*t100*t210+456.0/875.0*t24*t213+24912.0/67375.0*t33*t213);
  Real t220 = t219*b01;
  Real t221 = F[6]*F[4];
  Real t224 = t221*F[0];
  Real t230 = nkTheta*(88.0/175.0*t100*t221+456.0/875.0*t24*t224+24912.0/67375.0*t33*t224);
  Real t235 = t5*F[5];
  Real t240 = t6*F[5];
  Real t250 = nkTheta*(2.0/5.0*t1*F[5]+88.0/175.0*t235*t6+44.0/175.0*t19*F[5]+456.0/875.0*t24*t240+114.0/875.0*t28*F[5]+24912.0/67375.0*t33*t240+4152.0/67375.0*t37*F[5]);
  Real t252 = F[3]*F[5];
  Real t255 = t252*F[0];
  Real t261 = nkTheta*(88.0/175.0*t100*t252+456.0/875.0*t24*t255+24912.0/67375.0*t33*t255);
  Real t262 = t261*b01;
  Real t263 = F[6]*F[0];
  Real t266 = t263*F[5];
  Real t272 = nkTheta*(88.0/175.0*t235*t263+456.0/875.0*t24*t266+24912.0/67375.0*t33*t266);
  Real t280 = t15*F[0];
  Real t286 = nkTheta*(t166+88.0/175.0*t5*t15*F[0]+t169+456.0/875.0*t24*t280+t173+24912.0/67375.0*t33*t280+t176);
  Real t291 = t5*F[7];
  Real t296 = t6*F[7];
  Real t306 = nkTheta*(2.0/5.0*t1*F[7]+88.0/175.0*t291*t6+44.0/175.0*t19*F[7]+456.0/875.0*t24*t296+114.0/875.0*t28*F[7]+24912.0/67375.0*t33*t296+4152.0/67375.0*t37*F[7]);
  Real t308 = F[3]*F[7];
  Real t311 = t308*F[0];
  Real t317 = nkTheta*(88.0/175.0*t100*t308+456.0/875.0*t24*t311+24912.0/67375.0*t33*t311);
  Real t319 = F[0]*F[7];
  Real t322 = t319*F[6];
  Real t328 = nkTheta*(88.0/175.0*t64*t319+456.0/875.0*t24*t322+24912.0/67375.0*t33*t322);
  Real t329 = t328*b02;
  Real t333 = t5*F[8];
  Real t338 = t6*F[8];
  Real t348 = nkTheta*(2.0/5.0*t1*F[8]+88.0/175.0*t333*t6+44.0/175.0*t19*F[8]+456.0/875.0*t24*t338+114.0/875.0*t28*F[8]+24912.0/67375.0*t33*t338+4152.0/67375.0*t37*F[8]);
  Real t350 = F[3]*F[8];
  Real t353 = t350*F[0];
  Real t359 = nkTheta*(88.0/175.0*t100*t350+456.0/875.0*t24*t353+24912.0/67375.0*t33*t353);
  Real t361 = F[0]*F[8];
  Real t364 = t361*F[6];
  Real t370 = nkTheta*(88.0/175.0*t64*t361+456.0/875.0*t24*t364+24912.0/67375.0*t33*t364);
  Real t371 = t370*b02;
  Real t378 = t10*F[0];
  Real t384 = nkTheta*(t166+88.0/175.0*t100*t10+t169+456.0/875.0*t24*t378+t173+24912.0/67375.0*t33*t378+t176);
  Real t386 = F[4]*F[1];
  Real t389 = t386*F[0];
  Real t395 = nkTheta*(88.0/175.0*t100*t386+456.0/875.0*t24*t389+24912.0/67375.0*t33*t389);
  Real t399 = t112*F[7];
  Real t405 = nkTheta*(88.0/175.0*t291*t112+456.0/875.0*t24*t399+24912.0/67375.0*t33*t399);
  Real t408 = F[1]*F[2];
  Real t411 = t408*F[0];
  Real t417 = nkTheta*(88.0/175.0*t100*t408+456.0/875.0*t24*t411+24912.0/67375.0*t33*t411);
  Real t418 = t417*b00;
  Real t419 = F[4]*F[2];
  Real t422 = t419*F[0];
  Real t428 = nkTheta*(88.0/175.0*t100*t419+456.0/875.0*t24*t422+24912.0/67375.0*t33*t422);
  Real t430 = F[7]*F[2];
  Real t433 = t430*F[0];
  Real t439 = nkTheta*(88.0/175.0*t100*t430+456.0/875.0*t24*t433+24912.0/67375.0*t33*t433);
  Real t448 = t13*F[0];
  Real t454 = nkTheta*(t166+88.0/175.0*t100*t13+t169+456.0/875.0*t24*t448+t173+24912.0/67375.0*t33*t448+t176);
  Real t456 = F[7]*F[4];
  Real t459 = t456*F[0];
  Real t465 = nkTheta*(88.0/175.0*t100*t456+456.0/875.0*t24*t459+24912.0/67375.0*t33*t459);
  Real t470 = t112*F[5];
  Real t476 = nkTheta*(88.0/175.0*t235*t112+456.0/875.0*t24*t470+24912.0/67375.0*t33*t470);
  Real t478 = F[4]*F[5];
  Real t481 = t478*F[0];
  Real t487 = nkTheta*(88.0/175.0*t100*t478+456.0/875.0*t24*t481+24912.0/67375.0*t33*t481);
  Real t488 = t487*b01;
  Real t491 = t319*F[5];
  Real t497 = nkTheta*(88.0/175.0*t235*t319+456.0/875.0*t24*t491+24912.0/67375.0*t33*t491);
  Real t508 = F[0]*t16;
  Real t514 = nkTheta*(t166+88.0/175.0*t5*t16*F[0]+t169+456.0/875.0*t24*t508+t173+24912.0/67375.0*t33*t508+t176);
  Real t519 = t112*F[8];
  Real t525 = nkTheta*(88.0/175.0*t333*t112+456.0/875.0*t24*t519+24912.0/67375.0*t33*t519);
  Real t527 = F[4]*F[8];
  Real t530 = t527*F[0];
  Real t536 = nkTheta*(88.0/175.0*t100*t527+456.0/875.0*t24*t530+24912.0/67375.0*t33*t530);
  Real t540 = t361*F[7];
  Real t546 = nkTheta*(88.0/175.0*t291*t361+456.0/875.0*t24*t540+24912.0/67375.0*t33*t540);
  Real t547 = t546*b02;
  Real t557 = t11*F[0];
  Real t563 = nkTheta*(t166+88.0/175.0*t100*t11+t169+456.0/875.0*t24*t557+t173+24912.0/67375.0*t33*t557+t176);
  Real t565 = F[5]*F[2];
  Real t568 = t565*F[0];
  Real t574 = nkTheta*(88.0/175.0*t100*t565+456.0/875.0*t24*t568+24912.0/67375.0*t33*t568);
  Real t576 = F[8]*F[2];
  Real t579 = t576*F[0];
  Real t585 = nkTheta*(88.0/175.0*t100*t576+456.0/875.0*t24*t579+24912.0/67375.0*t33*t579);
  Real t598 = F[0]*t14;
  Real t604 = nkTheta*(t166+88.0/175.0*t5*t14*F[0]+t169+456.0/875.0*t24*t598+t173+24912.0/67375.0*t33*t598+t176);
  Real t608 = t361*F[5];
  Real t614 = nkTheta*(88.0/175.0*t235*t361+456.0/875.0*t24*t608+24912.0/67375.0*t33*t608);
  Real t628 = F[0]*t17;
  Real t634 = nkTheta*(t166+88.0/175.0*t5*t17*F[0]+t169+456.0/875.0*t24*t628+t173+24912.0/67375.0*t33*t628+t176);
  Real t641 = t98*b10;
  Real t645 = t140*b10;
  Real t654 = t219*b11;
  Real t658 = t261*b11;
  Real t667 = t328*b12;
  Real t671 = t370*b12;
  Real t680 = t417*b10;
  Real t692 = t487*b11;
  Real t704 = t546*b12;
  Real t740 = t98*b20;
  Real t744 = t140*b20;
  Real t753 = t219*b21;
  Real t757 = t261*b21;
  Real t766 = t328*b22;
  Real t770 = t370*b22;
  Real t779 = t417*b20;
  Real t791 = t487*b21;
  Real t803 = t546*b22;
  Real t839 = t98*b30;
  Real t843 = t140*b30;
  Real t852 = t219*b31;
  Real t856 = t261*b31;
  Real t865 = t328*b32;
  Real t869 = t370*b32;
  Real t878 = t417*b30;
  Real t890 = t487*b31;
  Real t902 = t546*b32;
  hessian(0,0) = t41*b00+t60*b01+t79*b02;
  hessian(0,1) = t99+t110*b01+t121*b02;
  hessian(0,2) = t141+t151*b01+t162*b02;
  hessian(0,3) = t60*b00+t178*b01+t189*b02;
  hessian(0,4) = t208*b00+t220+t230*b02;
  hessian(0,5) = t250*b00+t262+t272*b02;
  hessian(0,6) = t79*b00+t189*b01+t286*b02;
  hessian(0,7) = t306*b00+t317*b01+t329;
  hessian(0,8) = t348*b00+t359*b01+t371;
  hessian(1,0) = t99+t208*b01+t306*b02;
  hessian(1,1) = t384*b00+t395*b01+t405*b02;
  hessian(1,2) = t418+t428*b01+t439*b02;
  hessian(1,3) = t110*b00+t220+t317*b02;
  hessian(1,4) = t395*b00+t454*b01+t465*b02;
  hessian(1,5) = t476*b00+t488+t497*b02;
  hessian(1,6) = t121*b00+t230*b01+t329;
  hessian(1,7) = t405*b00+t465*b01+t514*b02;
  hessian(1,8) = t525*b00+t536*b01+t547;
  hessian(2,0) = t141+t250*b01+t348*b02;
  hessian(2,1) = t418+t476*b01+t525*b02;
  hessian(2,2) = t563*b00+t574*b01+t585*b02;
  hessian(2,3) = t151*b00+t262+t359*b02;
  hessian(2,4) = t428*b00+t488+t536*b02;
  hessian(2,5) = t574*b00+t604*b01+t614*b02;
  hessian(2,6) = t162*b00+t272*b01+t371;
  hessian(2,7) = t439*b00+t497*b01+t547;
  hessian(2,8) = t585*b00+t614*b01+t634*b02;
  hessian(3,0) = t41*b10+t60*b11+t79*b12;
  hessian(3,1) = t641+t110*b11+t121*b12;
  hessian(3,2) = t645+t151*b11+t162*b12;
  hessian(3,3) = t60*b10+t178*b11+t189*b12;
  hessian(3,4) = t208*b10+t654+t230*b12;
  hessian(3,5) = t250*b10+t658+t272*b12;
  hessian(3,6) = t79*b10+t189*b11+t286*b12;
  hessian(3,7) = t306*b10+t317*b11+t667;
  hessian(3,8) = t348*b10+t359*b11+t671;
  hessian(4,0) = t641+t208*b11+t306*b12;
  hessian(4,1) = t384*b10+t395*b11+t405*b12;
  hessian(4,2) = t680+t428*b11+t439*b12;
  hessian(4,3) = t110*b10+t654+t317*b12;
  hessian(4,4) = t395*b10+t454*b11+t465*b12;
  hessian(4,5) = t476*b10+t692+t497*b12;
  hessian(4,6) = t121*b10+t230*b11+t667;
  hessian(4,7) = t405*b10+t465*b11+t514*b12;
  hessian(4,8) = t525*b10+t536*b11+t704;
  hessian(5,0) = t645+t250*b11+t348*b12;
  hessian(5,1) = t680+t476*b11+t525*b12;
  hessian(5,2) = t563*b10+t574*b11+t585*b12;
  hessian(5,3) = t151*b10+t658+t359*b12;
  hessian(5,4) = t428*b10+t692+t536*b12;
  hessian(5,5) = t574*b10+t604*b11+t614*b12;
  hessian(5,6) = t162*b10+t272*b11+t671;
  hessian(5,7) = t439*b10+t497*b11+t704;
  hessian(5,8) = t585*b10+t614*b11+t634*b12;
  hessian(6,0) = t41*b20+t60*b21+t79*b22;
  hessian(6,1) = t740+t110*b21+t121*b22;
  hessian(6,2) = t744+t151*b21+t162*b22;
  hessian(6,3) = t60*b20+t178*b21+t189*b22;
  hessian(6,4) = t208*b20+t753+t230*b22;
  hessian(6,5) = t250*b20+t757+t272*b22;
  hessian(6,6) = t79*b20+t189*b21+t286*b22;
  hessian(6,7) = t306*b20+t317*b21+t766;
  hessian(6,8) = t348*b20+t359*b21+t770;
  hessian(7,0) = t740+t208*b21+t306*b22;
  hessian(7,1) = t384*b20+t395*b21+t405*b22;
  hessian(7,2) = t779+t428*b21+t439*b22;
  hessian(7,3) = t110*b20+t753+t317*b22;
  hessian(7,4) = t395*b20+t454*b21+t465*b22;
  hessian(7,5) = t476*b20+t791+t497*b22;
  hessian(7,6) = t121*b20+t230*b21+t766;
  hessian(7,7) = t405*b20+t465*b21+t514*b22;
  hessian(7,8) = t525*b20+t536*b21+t803;
  hessian(8,0) = t744+t250*b21+t348*b22;
  hessian(8,1) = t779+t476*b21+t525*b22;
  hessian(8,2) = t563*b20+t574*b21+t585*b22;
  hessian(8,3) = t151*b20+t757+t359*b22;
  hessian(8,4) = t428*b20+t791+t536*b22;
  hessian(8,5) = t574*b20+t604*b21+t614*b22;
  hessian(8,6) = t162*b20+t272*b21+t770;
  hessian(8,7) = t439*b20+t497*b21+t803;
  hessian(8,8) = t585*b20+t614*b21+t634*b22;
  hessian(9,0) = t41*b30+t60*b31+t79*b32;
  hessian(9,1) = t839+t110*b31+t121*b32;
  hessian(9,2) = t843+t151*b31+t162*b32;
  hessian(9,3) = t60*b30+t178*b31+t189*b32;
  hessian(9,4) = t208*b30+t852+t230*b32;
  hessian(9,5) = t250*b30+t856+t272*b32;
  hessian(9,6) = t79*b30+t189*b31+t286*b32;
  hessian(9,7) = t306*b30+t317*b31+t865;
  hessian(9,8) = t348*b30+t359*b31+t869;
  hessian(10,0) = t839+t208*b31+t306*b32;
  hessian(10,1) = t384*b30+t395*b31+t405*b32;
  hessian(10,2) = t878+t428*b31+t439*b32;
  hessian(10,3) = t110*b30+t852+t317*b32;
  hessian(10,4) = t395*b30+t454*b31+t465*b32;
  hessian(10,5) = t476*b30+t890+t497*b32;
  hessian(10,6) = t121*b30+t230*b31+t865;
  hessian(10,7) = t405*b30+t465*b31+t514*b32;
  hessian(10,8) = t525*b30+t536*b31+t902;
  hessian(11,0) = t843+t250*b31+t348*b32;
  hessian(11,1) = t878+t476*b31+t525*b32;
  hessian(11,2) = t563*b30+t574*b31+t585*b32;
  hessian(11,3) = t151*b30+t856+t359*b32;
  hessian(11,4) = t428*b30+t890+t536*b32;
  hessian(11,5) = t574*b30+t604*b31+t614*b32;
  hessian(11,6) = t162*b30+t272*b31+t869;
  hessian(11,7) = t439*b30+t497*b31+t902;
  hessian(11,8) = t585*b30+t614*b31+t634*b32;
 
 
}

void ARRUDA_BOYCE::hessian1(const Real* F, const VEC3F* b, MATRIX& hessian) {
  const double N = _Nconst;
  const double nkTheta = _nkTheta;
  const double b00 = b[0][0];
  const double b01 = b[0][1];
  const double b02 = b[0][2];
  const double b10 = b[1][0];
  const double b11 = b[1][1];
  const double b12 = b[1][2];
  const double b20 = b[2][0];
  const double b21 = b[2][1];
  const double b22 = b[2][2];
  const double b30 = b[3][0];
  const double b31 = b[3][1];
  const double b32 = b[3][2]; 

 
  Real t1 = 1/N;
  Real t2 = t1*F[1];
  Real t3 = 2.0/5.0*t2;
  Real t4 = N*N;
  Real t5 = 1/t4;
  Real t6 = F[0]*F[0];
  Real t10 = F[1]*F[1];
  Real t11 = F[2]*F[2];
  Real t12 = F[3]*F[3];
  Real t13 = F[4]*F[4];
  Real t14 = F[5]*F[5];
  Real t15 = F[6]*F[6];
  Real t16 = F[7]*F[7];
  Real t17 = F[8]*F[8];
  Real t18 = t6+t10+t11+t12+t13+t14+t15+t16+t17;
  Real t19 = t5*t18;
  Real t20 = t19*F[1];
  Real t21 = 44.0/175.0*t20;
  Real t23 = 1/t4/N;
  Real t24 = t23*t18;
  Real t25 = t6*F[1];
  Real t28 = t18*t18;
  Real t29 = t23*t28;
  Real t30 = t29*F[1];
  Real t31 = 114.0/875.0*t30;
  Real t32 = t4*t4;
  Real t33 = 1/t32;
  Real t34 = t33*t28;
  Real t38 = t33*t28*t18;
  Real t39 = t38*F[1];
  Real t40 = 4152.0/67375.0*t39;
  Real t42 = nkTheta*(t3+88.0/175.0*t5*t6*F[1]+t21+456.0/875.0*t24*t25+t31+24912.0/67375.0*t34*t25+t40);
  Real t44 = t5*F[0];
  Real t45 = F[3]*F[1];
  Real t48 = t45*F[0];
  Real t54 = nkTheta*(88.0/175.0*t44*t45+456.0/875.0*t24*t48+24912.0/67375.0*t34*t48);
  Real t56 = F[6]*F[1];
  Real t59 = t56*F[0];
  Real t65 = nkTheta*(88.0/175.0*t44*t56+456.0/875.0*t24*t59+24912.0/67375.0*t34*t59);
  Real t74 = t10*F[0];
  Real t84 = nkTheta*(2.0/5.0*t1*F[0]+88.0/175.0*t44*t10+44.0/175.0*t19*F[0]+456.0/875.0*t24*t74+114.0/875.0*t29*F[0]+24912.0/67375.0*t34*t74+4152.0/67375.0*t38*F[0]);
  Real t85 = t84*b00;
  Real t88 = t5*t10;
  Real t93 = F[3]*t10;
  Real t103 = nkTheta*(2.0/5.0*t1*F[3]+88.0/175.0*t88*F[3]+44.0/175.0*t19*F[3]+456.0/875.0*t24*t93+114.0/875.0*t29*F[3]+24912.0/67375.0*t34*t93+4152.0/67375.0*t38*F[3]);
  Real t111 = F[6]*t10;
  Real t121 = nkTheta*(2.0/5.0*t1*F[6]+88.0/175.0*t88*F[6]+44.0/175.0*t19*F[6]+456.0/875.0*t24*t111+114.0/875.0*t29*F[6]+24912.0/67375.0*t34*t111+4152.0/67375.0*t38*F[6]);
  Real t124 = F[1]*F[2];
  Real t127 = t124*F[0];
  Real t133 = nkTheta*(88.0/175.0*t44*t124+456.0/875.0*t24*t127+24912.0/67375.0*t34*t127);
  Real t134 = t133*b00;
  Real t135 = t5*F[1];
  Real t136 = F[3]*F[2];
  Real t139 = t136*F[1];
  Real t145 = nkTheta*(88.0/175.0*t135*t136+456.0/875.0*t24*t139+24912.0/67375.0*t34*t139);
  Real t147 = F[6]*F[2];
  Real t150 = t147*F[1];
  Real t156 = nkTheta*(88.0/175.0*t135*t147+456.0/875.0*t24*t150+24912.0/67375.0*t34*t150);
  Real t162 = t12*F[1];
  Real t168 = nkTheta*(t3+88.0/175.0*t135*t12+t21+456.0/875.0*t24*t162+t31+24912.0/67375.0*t34*t162+t40);
  Real t170 = F[6]*F[3];
  Real t173 = t170*F[1];
  Real t179 = nkTheta*(88.0/175.0*t135*t170+456.0/875.0*t24*t173+24912.0/67375.0*t34*t173);
  Real t182 = F[4]*F[1];
  Real t185 = t182*F[0];
  Real t191 = nkTheta*(88.0/175.0*t44*t182+456.0/875.0*t24*t185+24912.0/67375.0*t34*t185);
  Real t193 = F[3]*F[4];
  Real t196 = t193*F[1];
  Real t202 = nkTheta*(88.0/175.0*t135*t193+456.0/875.0*t24*t196+24912.0/67375.0*t34*t196);
  Real t203 = t202*b01;
  Real t204 = F[6]*F[4];
  Real t207 = t204*F[1];
  Real t213 = nkTheta*(88.0/175.0*t135*t204+456.0/875.0*t24*t207+24912.0/67375.0*t34*t207);
  Real t216 = F[1]*F[5];
  Real t219 = t216*F[0];
  Real t225 = nkTheta*(88.0/175.0*t44*t216+456.0/875.0*t24*t219+24912.0/67375.0*t34*t219);
  Real t227 = F[3]*F[5];
  Real t230 = t227*F[1];
  Real t236 = nkTheta*(88.0/175.0*t135*t227+456.0/875.0*t24*t230+24912.0/67375.0*t34*t230);
  Real t237 = t236*b01;
  Real t238 = F[6]*F[5];
  Real t241 = t238*F[1];
  Real t247 = nkTheta*(88.0/175.0*t135*t238+456.0/875.0*t24*t241+24912.0/67375.0*t34*t241);
  Real t254 = t15*F[1];
  Real t260 = nkTheta*(t3+88.0/175.0*t135*t15+t21+456.0/875.0*t24*t254+t31+24912.0/67375.0*t34*t254+t40);
  Real t263 = F[7]*F[1];
  Real t266 = t263*F[0];
  Real t272 = nkTheta*(88.0/175.0*t44*t263+456.0/875.0*t24*t266+24912.0/67375.0*t34*t266);
  Real t274 = F[3]*F[7];
  Real t277 = t274*F[1];
  Real t283 = nkTheta*(88.0/175.0*t135*t274+456.0/875.0*t24*t277+24912.0/67375.0*t34*t277);
  Real t285 = F[6]*F[7];
  Real t288 = t285*F[1];
  Real t294 = nkTheta*(88.0/175.0*t135*t285+456.0/875.0*t24*t288+24912.0/67375.0*t34*t288);
  Real t295 = t294*b02;
  Real t297 = F[1]*F[8];
  Real t300 = t297*F[0];
  Real t306 = nkTheta*(88.0/175.0*t44*t297+456.0/875.0*t24*t300+24912.0/67375.0*t34*t300);
  Real t308 = F[3]*F[8];
  Real t311 = t308*F[1];
  Real t317 = nkTheta*(88.0/175.0*t135*t308+456.0/875.0*t24*t311+24912.0/67375.0*t34*t311);
  Real t319 = F[6]*F[8];
  Real t322 = t319*F[1];
  Real t328 = nkTheta*(88.0/175.0*t135*t319+456.0/875.0*t24*t322+24912.0/67375.0*t34*t322);
  Real t329 = t328*b02;
  Real t335 = t10*F[1];
  Real t346 = nkTheta*(6.0/5.0*t2+88.0/175.0*t5*t335+132.0/175.0*t20+456.0/875.0*t24*t335+342.0/875.0*t30+24912.0/67375.0*t34*t335+12456.0/67375.0*t39);
  Real t354 = F[4]*t10;
  Real t364 = nkTheta*(2.0/5.0*t1*F[4]+88.0/175.0*t88*F[4]+44.0/175.0*t19*F[4]+456.0/875.0*t24*t354+114.0/875.0*t29*F[4]+24912.0/67375.0*t34*t354+4152.0/67375.0*t38*F[4]);
  Real t372 = F[7]*t10;
  Real t382 = nkTheta*(2.0/5.0*t1*F[7]+88.0/175.0*t88*F[7]+44.0/175.0*t19*F[7]+456.0/875.0*t24*t372+114.0/875.0*t29*F[7]+24912.0/67375.0*t34*t372+4152.0/67375.0*t38*F[7]);
  Real t391 = t10*F[2];
  Real t401 = nkTheta*(2.0/5.0*t1*F[2]+88.0/175.0*t88*F[2]+44.0/175.0*t19*F[2]+456.0/875.0*t24*t391+114.0/875.0*t29*F[2]+24912.0/67375.0*t34*t391+4152.0/67375.0*t38*F[2]);
  Real t402 = t401*b00;
  Real t403 = F[4]*F[2];
  Real t406 = t403*F[1];
  Real t412 = nkTheta*(88.0/175.0*t135*t403+456.0/875.0*t24*t406+24912.0/67375.0*t34*t406);
  Real t414 = F[7]*F[2];
  Real t417 = t414*F[1];
  Real t423 = nkTheta*(88.0/175.0*t135*t414+456.0/875.0*t24*t417+24912.0/67375.0*t34*t417);
  Real t432 = t13*F[1];
  Real t438 = nkTheta*(t3+88.0/175.0*t135*t13+t21+456.0/875.0*t24*t432+t31+24912.0/67375.0*t34*t432+t40);
  Real t440 = F[7]*F[4];
  Real t443 = t440*F[1];
  Real t449 = nkTheta*(88.0/175.0*t135*t440+456.0/875.0*t24*t443+24912.0/67375.0*t34*t443);
  Real t458 = t10*F[5];
  Real t468 = nkTheta*(2.0/5.0*t1*F[5]+88.0/175.0*t88*F[5]+44.0/175.0*t19*F[5]+456.0/875.0*t24*t458+114.0/875.0*t29*F[5]+24912.0/67375.0*t34*t458+4152.0/67375.0*t38*F[5]);
  Real t470 = F[4]*F[5];
  Real t473 = t470*F[1];
  Real t479 = nkTheta*(88.0/175.0*t135*t470+456.0/875.0*t24*t473+24912.0/67375.0*t34*t473);
  Real t480 = t479*b01;
  Real t481 = F[7]*F[5];
  Real t484 = t481*F[1];
  Real t490 = nkTheta*(88.0/175.0*t135*t481+456.0/875.0*t24*t484+24912.0/67375.0*t34*t484);
  Real t500 = t16*F[1];
  Real t506 = nkTheta*(t3+88.0/175.0*t135*t16+t21+456.0/875.0*t24*t500+t31+24912.0/67375.0*t34*t500+t40);
  Real t515 = t10*F[8];
  Real t525 = nkTheta*(2.0/5.0*t1*F[8]+88.0/175.0*t88*F[8]+44.0/175.0*t19*F[8]+456.0/875.0*t24*t515+114.0/875.0*t29*F[8]+24912.0/67375.0*t34*t515+4152.0/67375.0*t38*F[8]);
  Real t527 = F[4]*F[8];
  Real t530 = t527*F[1];
  Real t536 = nkTheta*(88.0/175.0*t135*t527+456.0/875.0*t24*t530+24912.0/67375.0*t34*t530);
  Real t538 = F[7]*F[8];
  Real t541 = t538*F[1];
  Real t547 = nkTheta*(88.0/175.0*t135*t538+456.0/875.0*t24*t541+24912.0/67375.0*t34*t541);
  Real t548 = t547*b02;
  Real t558 = t11*F[1];
  Real t564 = nkTheta*(t3+88.0/175.0*t135*t11+t21+456.0/875.0*t24*t558+t31+24912.0/67375.0*t34*t558+t40);
  Real t566 = F[5]*F[2];
  Real t569 = t566*F[1];
  Real t575 = nkTheta*(88.0/175.0*t135*t566+456.0/875.0*t24*t569+24912.0/67375.0*t34*t569);
  Real t577 = F[8]*F[2];
  Real t580 = t577*F[1];
  Real t586 = nkTheta*(88.0/175.0*t135*t577+456.0/875.0*t24*t580+24912.0/67375.0*t34*t580);
  Real t598 = t14*F[1];
  Real t604 = nkTheta*(t3+88.0/175.0*t135*t14+t21+456.0/875.0*t24*t598+t31+24912.0/67375.0*t34*t598+t40);
  Real t606 = F[8]*F[5];
  Real t609 = t606*F[1];
  Real t615 = nkTheta*(88.0/175.0*t135*t606+456.0/875.0*t24*t609+24912.0/67375.0*t34*t609);
  Real t628 = t17*F[1];
  Real t634 = nkTheta*(t3+88.0/175.0*t135*t17+t21+456.0/875.0*t24*t628+t31+24912.0/67375.0*t34*t628+t40);
  Real t641 = t84*b10;
  Real t645 = t133*b10;
  Real t654 = t202*b11;
  Real t658 = t236*b11;
  Real t667 = t294*b12;
  Real t671 = t328*b12;
  Real t680 = t401*b10;
  Real t692 = t479*b11;
  Real t704 = t547*b12;
  Real t740 = t84*b20;
  Real t744 = t133*b20;
  Real t753 = t202*b21;
  Real t757 = t236*b21;
  Real t766 = t294*b22;
  Real t770 = t328*b22;
  Real t779 = t401*b20;
  Real t791 = t479*b21;
  Real t803 = t547*b22;
  Real t839 = t84*b30;
  Real t843 = t133*b30;
  Real t852 = t202*b31;
  Real t856 = t236*b31;
  Real t865 = t294*b32;
  Real t869 = t328*b32;
  Real t878 = t401*b30;
  Real t890 = t479*b31;
  Real t902 = t547*b32;
  hessian(0,0) = t42*b00+t54*b01+t65*b02;
  hessian(0,1) = t85+t103*b01+t121*b02;
  hessian(0,2) = t134+t145*b01+t156*b02;
  hessian(0,3) = t54*b00+t168*b01+t179*b02;
  hessian(0,4) = t191*b00+t203+t213*b02;
  hessian(0,5) = t225*b00+t237+t247*b02;
  hessian(0,6) = t65*b00+t179*b01+t260*b02;
  hessian(0,7) = t272*b00+t283*b01+t295;
  hessian(0,8) = t306*b00+t317*b01+t329;
  hessian(1,0) = t85+t191*b01+t272*b02;
  hessian(1,1) = t346*b00+t364*b01+t382*b02;
  hessian(1,2) = t402+t412*b01+t423*b02;
  hessian(1,3) = t103*b00+t203+t283*b02;
  hessian(1,4) = t364*b00+t438*b01+t449*b02;
  hessian(1,5) = t468*b00+t480+t490*b02;
  hessian(1,6) = t121*b00+t213*b01+t295;
  hessian(1,7) = t382*b00+t449*b01+t506*b02;
  hessian(1,8) = t525*b00+t536*b01+t548;
  hessian(2,0) = t134+t225*b01+t306*b02;
  hessian(2,1) = t402+t468*b01+t525*b02;
  hessian(2,2) = t564*b00+t575*b01+t586*b02;
  hessian(2,3) = t145*b00+t237+t317*b02;
  hessian(2,4) = t412*b00+t480+t536*b02;
  hessian(2,5) = t575*b00+t604*b01+t615*b02;
  hessian(2,6) = t156*b00+t247*b01+t329;
  hessian(2,7) = t423*b00+t490*b01+t548;
  hessian(2,8) = t586*b00+t615*b01+t634*b02;
  hessian(3,0) = t42*b10+t54*b11+t65*b12;
  hessian(3,1) = t641+t103*b11+t121*b12;
  hessian(3,2) = t645+t145*b11+t156*b12;
  hessian(3,3) = t54*b10+t168*b11+t179*b12;
  hessian(3,4) = t191*b10+t654+t213*b12;
  hessian(3,5) = t225*b10+t658+t247*b12;
  hessian(3,6) = t65*b10+t179*b11+t260*b12;
  hessian(3,7) = t272*b10+t283*b11+t667;
  hessian(3,8) = t306*b10+t317*b11+t671;
  hessian(4,0) = t641+t191*b11+t272*b12;
  hessian(4,1) = t346*b10+t364*b11+t382*b12;
  hessian(4,2) = t680+t412*b11+t423*b12;
  hessian(4,3) = t103*b10+t654+t283*b12;
  hessian(4,4) = t364*b10+t438*b11+t449*b12;
  hessian(4,5) = t468*b10+t692+t490*b12;
  hessian(4,6) = t121*b10+t213*b11+t667;
  hessian(4,7) = t382*b10+t449*b11+t506*b12;
  hessian(4,8) = t525*b10+t536*b11+t704;
  hessian(5,0) = t645+t225*b11+t306*b12;
  hessian(5,1) = t680+t468*b11+t525*b12;
  hessian(5,2) = t564*b10+t575*b11+t586*b12;
  hessian(5,3) = t145*b10+t658+t317*b12;
  hessian(5,4) = t412*b10+t692+t536*b12;
  hessian(5,5) = t575*b10+t604*b11+t615*b12;
  hessian(5,6) = t156*b10+t247*b11+t671;
  hessian(5,7) = t423*b10+t490*b11+t704;
  hessian(5,8) = t586*b10+t615*b11+t634*b12;
  hessian(6,0) = t42*b20+t54*b21+t65*b22;
  hessian(6,1) = t740+t103*b21+t121*b22;
  hessian(6,2) = t744+t145*b21+t156*b22;
  hessian(6,3) = t54*b20+t168*b21+t179*b22;
  hessian(6,4) = t191*b20+t753+t213*b22;
  hessian(6,5) = t225*b20+t757+t247*b22;
  hessian(6,6) = t65*b20+t179*b21+t260*b22;
  hessian(6,7) = t272*b20+t283*b21+t766;
  hessian(6,8) = t306*b20+t317*b21+t770;
  hessian(7,0) = t740+t191*b21+t272*b22;
  hessian(7,1) = t346*b20+t364*b21+t382*b22;
  hessian(7,2) = t779+t412*b21+t423*b22;
  hessian(7,3) = t103*b20+t753+t283*b22;
  hessian(7,4) = t364*b20+t438*b21+t449*b22;
  hessian(7,5) = t468*b20+t791+t490*b22;
  hessian(7,6) = t121*b20+t213*b21+t766;
  hessian(7,7) = t382*b20+t449*b21+t506*b22;
  hessian(7,8) = t525*b20+t536*b21+t803;
  hessian(8,0) = t744+t225*b21+t306*b22;
  hessian(8,1) = t779+t468*b21+t525*b22;
  hessian(8,2) = t564*b20+t575*b21+t586*b22;
  hessian(8,3) = t145*b20+t757+t317*b22;
  hessian(8,4) = t412*b20+t791+t536*b22;
  hessian(8,5) = t575*b20+t604*b21+t615*b22;
  hessian(8,6) = t156*b20+t247*b21+t770;
  hessian(8,7) = t423*b20+t490*b21+t803;
  hessian(8,8) = t586*b20+t615*b21+t634*b22;
  hessian(9,0) = t42*b30+t54*b31+t65*b32;
  hessian(9,1) = t839+t103*b31+t121*b32;
  hessian(9,2) = t843+t145*b31+t156*b32;
  hessian(9,3) = t54*b30+t168*b31+t179*b32;
  hessian(9,4) = t191*b30+t852+t213*b32;
  hessian(9,5) = t225*b30+t856+t247*b32;
  hessian(9,6) = t65*b30+t179*b31+t260*b32;
  hessian(9,7) = t272*b30+t283*b31+t865;
  hessian(9,8) = t306*b30+t317*b31+t869;
  hessian(10,0) = t839+t191*b31+t272*b32;
  hessian(10,1) = t346*b30+t364*b31+t382*b32;
  hessian(10,2) = t878+t412*b31+t423*b32;
  hessian(10,3) = t103*b30+t852+t283*b32;
  hessian(10,4) = t364*b30+t438*b31+t449*b32;
  hessian(10,5) = t468*b30+t890+t490*b32;
  hessian(10,6) = t121*b30+t213*b31+t865;
  hessian(10,7) = t382*b30+t449*b31+t506*b32;
  hessian(10,8) = t525*b30+t536*b31+t902;
  hessian(11,0) = t843+t225*b31+t306*b32;
  hessian(11,1) = t878+t468*b31+t525*b32;
  hessian(11,2) = t564*b30+t575*b31+t586*b32;
  hessian(11,3) = t145*b30+t856+t317*b32;
  hessian(11,4) = t412*b30+t890+t536*b32;
  hessian(11,5) = t575*b30+t604*b31+t615*b32;
  hessian(11,6) = t156*b30+t247*b31+t869;
  hessian(11,7) = t423*b30+t490*b31+t902;
  hessian(11,8) = t586*b30+t615*b31+t634*b32;
 
 
}

void ARRUDA_BOYCE::hessian2(const Real* F, const VEC3F* b, MATRIX& hessian) {
  const double N = _Nconst;
  const double nkTheta = _nkTheta;
  const double b00 = b[0][0];
  const double b01 = b[0][1];
  const double b02 = b[0][2];
  const double b10 = b[1][0];
  const double b11 = b[1][1];
  const double b12 = b[1][2];
  const double b20 = b[2][0];
  const double b21 = b[2][1];
  const double b22 = b[2][2];
  const double b30 = b[3][0];
  const double b31 = b[3][1];
  const double b32 = b[3][2]; 

 
  Real t1 = 1/N;
  Real t2 = t1*F[2];
  Real t3 = 2.0/5.0*t2;
  Real t4 = N*N;
  Real t5 = 1/t4;
  Real t6 = F[0]*F[0];
  Real t10 = F[1]*F[1];
  Real t11 = F[2]*F[2];
  Real t12 = F[3]*F[3];
  Real t13 = F[4]*F[4];
  Real t14 = F[5]*F[5];
  Real t15 = F[6]*F[6];
  Real t16 = F[7]*F[7];
  Real t17 = F[8]*F[8];
  Real t18 = t6+t10+t11+t12+t13+t14+t15+t16+t17;
  Real t19 = t5*t18;
  Real t20 = t19*F[2];
  Real t21 = 44.0/175.0*t20;
  Real t23 = 1/t4/N;
  Real t24 = t23*t18;
  Real t25 = t6*F[2];
  Real t28 = t18*t18;
  Real t29 = t23*t28;
  Real t30 = t29*F[2];
  Real t31 = 114.0/875.0*t30;
  Real t32 = t4*t4;
  Real t33 = 1/t32;
  Real t34 = t33*t28;
  Real t38 = t33*t28*t18;
  Real t39 = t38*F[2];
  Real t40 = 4152.0/67375.0*t39;
  Real t42 = nkTheta*(t3+88.0/175.0*t5*t6*F[2]+t21+456.0/875.0*t24*t25+t31+24912.0/67375.0*t34*t25+t40);
  Real t44 = t5*F[0];
  Real t45 = F[3]*F[2];
  Real t48 = t45*F[0];
  Real t54 = nkTheta*(88.0/175.0*t44*t45+456.0/875.0*t24*t48+24912.0/67375.0*t34*t48);
  Real t56 = F[6]*F[2];
  Real t59 = t56*F[0];
  Real t65 = nkTheta*(88.0/175.0*t44*t56+456.0/875.0*t24*t59+24912.0/67375.0*t34*t59);
  Real t68 = F[1]*F[2];
  Real t71 = t68*F[0];
  Real t77 = nkTheta*(88.0/175.0*t44*t68+456.0/875.0*t24*t71+24912.0/67375.0*t34*t71);
  Real t78 = t77*b00;
  Real t79 = t5*F[1];
  Real t82 = t45*F[1];
  Real t88 = nkTheta*(88.0/175.0*t79*t45+456.0/875.0*t24*t82+24912.0/67375.0*t34*t82);
  Real t92 = t56*F[1];
  Real t98 = nkTheta*(88.0/175.0*t79*t56+456.0/875.0*t24*t92+24912.0/67375.0*t34*t92);
  Real t107 = t11*F[0];
  Real t117 = nkTheta*(2.0/5.0*t1*F[0]+88.0/175.0*t44*t11+44.0/175.0*t19*F[0]+456.0/875.0*t24*t107+114.0/875.0*t29*F[0]+24912.0/67375.0*t34*t107+4152.0/67375.0*t38*F[0]);
  Real t118 = t117*b00;
  Real t121 = t5*t11;
  Real t126 = F[3]*t11;
  Real t136 = nkTheta*(2.0/5.0*t1*F[3]+88.0/175.0*t121*F[3]+44.0/175.0*t19*F[3]+456.0/875.0*t24*t126+114.0/875.0*t29*F[3]+24912.0/67375.0*t34*t126+4152.0/67375.0*t38*F[3]);
  Real t144 = F[6]*t11;
  Real t154 = nkTheta*(2.0/5.0*t1*F[6]+88.0/175.0*t121*F[6]+44.0/175.0*t19*F[6]+456.0/875.0*t24*t144+114.0/875.0*t29*F[6]+24912.0/67375.0*t34*t144+4152.0/67375.0*t38*F[6]);
  Real t158 = t5*F[2];
  Real t161 = t12*F[2];
  Real t167 = nkTheta*(t3+88.0/175.0*t158*t12+t21+456.0/875.0*t24*t161+t31+24912.0/67375.0*t34*t161+t40);
  Real t169 = F[6]*F[3];
  Real t172 = t169*F[2];
  Real t178 = nkTheta*(88.0/175.0*t158*t169+456.0/875.0*t24*t172+24912.0/67375.0*t34*t172);
  Real t181 = F[4]*F[2];
  Real t184 = t181*F[0];
  Real t190 = nkTheta*(88.0/175.0*t44*t181+456.0/875.0*t24*t184+24912.0/67375.0*t34*t184);
  Real t192 = F[3]*F[4];
  Real t195 = t192*F[2];
  Real t201 = nkTheta*(88.0/175.0*t158*t192+456.0/875.0*t24*t195+24912.0/67375.0*t34*t195);
  Real t202 = t201*b01;
  Real t203 = F[6]*F[4];
  Real t206 = t203*F[2];
  Real t212 = nkTheta*(88.0/175.0*t158*t203+456.0/875.0*t24*t206+24912.0/67375.0*t34*t206);
  Real t215 = F[5]*F[2];
  Real t218 = t215*F[0];
  Real t224 = nkTheta*(88.0/175.0*t44*t215+456.0/875.0*t24*t218+24912.0/67375.0*t34*t218);
  Real t226 = F[3]*F[5];
  Real t229 = t226*F[2];
  Real t235 = nkTheta*(88.0/175.0*t158*t226+456.0/875.0*t24*t229+24912.0/67375.0*t34*t229);
  Real t236 = t235*b01;
  Real t237 = F[6]*F[5];
  Real t240 = t237*F[2];
  Real t246 = nkTheta*(88.0/175.0*t158*t237+456.0/875.0*t24*t240+24912.0/67375.0*t34*t240);
  Real t253 = t15*F[2];
  Real t259 = nkTheta*(t3+88.0/175.0*t158*t15+t21+456.0/875.0*t24*t253+t31+24912.0/67375.0*t34*t253+t40);
  Real t262 = F[7]*F[2];
  Real t265 = t262*F[0];
  Real t271 = nkTheta*(88.0/175.0*t44*t262+456.0/875.0*t24*t265+24912.0/67375.0*t34*t265);
  Real t273 = F[3]*F[7];
  Real t276 = t273*F[2];
  Real t282 = nkTheta*(88.0/175.0*t158*t273+456.0/875.0*t24*t276+24912.0/67375.0*t34*t276);
  Real t284 = F[6]*F[7];
  Real t287 = t284*F[2];
  Real t293 = nkTheta*(88.0/175.0*t158*t284+456.0/875.0*t24*t287+24912.0/67375.0*t34*t287);
  Real t294 = t293*b02;
  Real t296 = F[8]*F[2];
  Real t299 = t296*F[0];
  Real t305 = nkTheta*(88.0/175.0*t44*t296+456.0/875.0*t24*t299+24912.0/67375.0*t34*t299);
  Real t307 = F[3]*F[8];
  Real t310 = t307*F[2];
  Real t316 = nkTheta*(88.0/175.0*t158*t307+456.0/875.0*t24*t310+24912.0/67375.0*t34*t310);
  Real t318 = F[6]*F[8];
  Real t321 = t318*F[2];
  Real t327 = nkTheta*(88.0/175.0*t158*t318+456.0/875.0*t24*t321+24912.0/67375.0*t34*t321);
  Real t328 = t327*b02;
  Real t336 = t10*F[2];
  Real t342 = nkTheta*(t3+88.0/175.0*t5*t10*F[2]+t21+456.0/875.0*t24*t336+t31+24912.0/67375.0*t34*t336+t40);
  Real t346 = t181*F[1];
  Real t352 = nkTheta*(88.0/175.0*t79*t181+456.0/875.0*t24*t346+24912.0/67375.0*t34*t346);
  Real t356 = t262*F[1];
  Real t362 = nkTheta*(88.0/175.0*t79*t262+456.0/875.0*t24*t356+24912.0/67375.0*t34*t356);
  Real t371 = t11*F[1];
  Real t381 = nkTheta*(2.0/5.0*t1*F[1]+88.0/175.0*t79*t11+44.0/175.0*t19*F[1]+456.0/875.0*t24*t371+114.0/875.0*t29*F[1]+24912.0/67375.0*t34*t371+4152.0/67375.0*t38*F[1]);
  Real t382 = t381*b00;
  Real t389 = F[4]*t11;
  Real t399 = nkTheta*(2.0/5.0*t1*F[4]+88.0/175.0*t121*F[4]+44.0/175.0*t19*F[4]+456.0/875.0*t24*t389+114.0/875.0*t29*F[4]+24912.0/67375.0*t34*t389+4152.0/67375.0*t38*F[4]);
  Real t407 = F[7]*t11;
  Real t417 = nkTheta*(2.0/5.0*t1*F[7]+88.0/175.0*t121*F[7]+44.0/175.0*t19*F[7]+456.0/875.0*t24*t407+114.0/875.0*t29*F[7]+24912.0/67375.0*t34*t407+4152.0/67375.0*t38*F[7]);
  Real t426 = t13*F[2];
  Real t432 = nkTheta*(t3+88.0/175.0*t158*t13+t21+456.0/875.0*t24*t426+t31+24912.0/67375.0*t34*t426+t40);
  Real t434 = F[7]*F[4];
  Real t437 = t434*F[2];
  Real t443 = nkTheta*(88.0/175.0*t158*t434+456.0/875.0*t24*t437+24912.0/67375.0*t34*t437);
  Real t448 = t215*F[1];
  Real t454 = nkTheta*(88.0/175.0*t79*t215+456.0/875.0*t24*t448+24912.0/67375.0*t34*t448);
  Real t456 = F[4]*F[5];
  Real t459 = t456*F[2];
  Real t465 = nkTheta*(88.0/175.0*t158*t456+456.0/875.0*t24*t459+24912.0/67375.0*t34*t459);
  Real t466 = t465*b01;
  Real t467 = F[7]*F[5];
  Real t470 = t467*F[2];
  Real t476 = nkTheta*(88.0/175.0*t158*t467+456.0/875.0*t24*t470+24912.0/67375.0*t34*t470);
  Real t486 = t16*F[2];
  Real t492 = nkTheta*(t3+88.0/175.0*t158*t16+t21+456.0/875.0*t24*t486+t31+24912.0/67375.0*t34*t486+t40);
  Real t497 = t296*F[1];
  Real t503 = nkTheta*(88.0/175.0*t79*t296+456.0/875.0*t24*t497+24912.0/67375.0*t34*t497);
  Real t505 = F[4]*F[8];
  Real t508 = t505*F[2];
  Real t514 = nkTheta*(88.0/175.0*t158*t505+456.0/875.0*t24*t508+24912.0/67375.0*t34*t508);
  Real t516 = F[7]*F[8];
  Real t519 = t516*F[2];
  Real t525 = nkTheta*(88.0/175.0*t158*t516+456.0/875.0*t24*t519+24912.0/67375.0*t34*t519);
  Real t526 = t525*b02;
  Real t535 = t11*F[2];
  Real t546 = nkTheta*(6.0/5.0*t2+88.0/175.0*t5*t535+132.0/175.0*t20+456.0/875.0*t24*t535+342.0/875.0*t30+24912.0/67375.0*t34*t535+12456.0/67375.0*t39);
  Real t554 = F[5]*t11;
  Real t564 = nkTheta*(2.0/5.0*t1*F[5]+88.0/175.0*t121*F[5]+44.0/175.0*t19*F[5]+456.0/875.0*t24*t554+114.0/875.0*t29*F[5]+24912.0/67375.0*t34*t554+4152.0/67375.0*t38*F[5]);
  Real t572 = F[8]*t11;
  Real t582 = nkTheta*(2.0/5.0*t1*F[8]+88.0/175.0*t121*F[8]+44.0/175.0*t19*F[8]+456.0/875.0*t24*t572+114.0/875.0*t29*F[8]+24912.0/67375.0*t34*t572+4152.0/67375.0*t38*F[8]);
  Real t594 = t14*F[2];
  Real t600 = nkTheta*(t3+88.0/175.0*t158*t14+t21+456.0/875.0*t24*t594+t31+24912.0/67375.0*t34*t594+t40);
  Real t602 = F[8]*F[5];
  Real t605 = t602*F[2];
  Real t611 = nkTheta*(88.0/175.0*t158*t602+456.0/875.0*t24*t605+24912.0/67375.0*t34*t605);
  Real t624 = t17*F[2];
  Real t630 = nkTheta*(t3+88.0/175.0*t158*t17+t21+456.0/875.0*t24*t624+t31+24912.0/67375.0*t34*t624+t40);
  Real t637 = t77*b10;
  Real t641 = t117*b10;
  Real t650 = t201*b11;
  Real t654 = t235*b11;
  Real t663 = t293*b12;
  Real t667 = t327*b12;
  Real t676 = t381*b10;
  Real t688 = t465*b11;
  Real t700 = t525*b12;
  Real t736 = t77*b20;
  Real t740 = t117*b20;
  Real t749 = t201*b21;
  Real t753 = t235*b21;
  Real t762 = t293*b22;
  Real t766 = t327*b22;
  Real t775 = t381*b20;
  Real t787 = t465*b21;
  Real t799 = t525*b22;
  Real t835 = t77*b30;
  Real t839 = t117*b30;
  Real t848 = t201*b31;
  Real t852 = t235*b31;
  Real t861 = t293*b32;
  Real t865 = t327*b32;
  Real t874 = t381*b30;
  Real t886 = t465*b31;
  Real t898 = t525*b32;
  hessian(0,0) = t42*b00+t54*b01+t65*b02;
  hessian(0,1) = t78+t88*b01+t98*b02;
  hessian(0,2) = t118+t136*b01+t154*b02;
  hessian(0,3) = t54*b00+t167*b01+t178*b02;
  hessian(0,4) = t190*b00+t202+t212*b02;
  hessian(0,5) = t224*b00+t236+t246*b02;
  hessian(0,6) = t65*b00+t178*b01+t259*b02;
  hessian(0,7) = t271*b00+t282*b01+t294;
  hessian(0,8) = t305*b00+t316*b01+t328;
  hessian(1,0) = t78+t190*b01+t271*b02;
  hessian(1,1) = t342*b00+t352*b01+t362*b02;
  hessian(1,2) = t382+t399*b01+t417*b02;
  hessian(1,3) = t88*b00+t202+t282*b02;
  hessian(1,4) = t352*b00+t432*b01+t443*b02;
  hessian(1,5) = t454*b00+t466+t476*b02;
  hessian(1,6) = t98*b00+t212*b01+t294;
  hessian(1,7) = t362*b00+t443*b01+t492*b02;
  hessian(1,8) = t503*b00+t514*b01+t526;
  hessian(2,0) = t118+t224*b01+t305*b02;
  hessian(2,1) = t382+t454*b01+t503*b02;
  hessian(2,2) = t546*b00+t564*b01+t582*b02;
  hessian(2,3) = t136*b00+t236+t316*b02;
  hessian(2,4) = t399*b00+t466+t514*b02;
  hessian(2,5) = t564*b00+t600*b01+t611*b02;
  hessian(2,6) = t154*b00+t246*b01+t328;
  hessian(2,7) = t417*b00+t476*b01+t526;
  hessian(2,8) = t582*b00+t611*b01+t630*b02;
  hessian(3,0) = t42*b10+t54*b11+t65*b12;
  hessian(3,1) = t637+t88*b11+t98*b12;
  hessian(3,2) = t641+t136*b11+t154*b12;
  hessian(3,3) = t54*b10+t167*b11+t178*b12;
  hessian(3,4) = t190*b10+t650+t212*b12;
  hessian(3,5) = t224*b10+t654+t246*b12;
  hessian(3,6) = t65*b10+t178*b11+t259*b12;
  hessian(3,7) = t271*b10+t282*b11+t663;
  hessian(3,8) = t305*b10+t316*b11+t667;
  hessian(4,0) = t637+t190*b11+t271*b12;
  hessian(4,1) = t342*b10+t352*b11+t362*b12;
  hessian(4,2) = t676+t399*b11+t417*b12;
  hessian(4,3) = t88*b10+t650+t282*b12;
  hessian(4,4) = t352*b10+t432*b11+t443*b12;
  hessian(4,5) = t454*b10+t688+t476*b12;
  hessian(4,6) = t98*b10+t212*b11+t663;
  hessian(4,7) = t362*b10+t443*b11+t492*b12;
  hessian(4,8) = t503*b10+t514*b11+t700;
  hessian(5,0) = t641+t224*b11+t305*b12;
  hessian(5,1) = t676+t454*b11+t503*b12;
  hessian(5,2) = t546*b10+t564*b11+t582*b12;
  hessian(5,3) = t136*b10+t654+t316*b12;
  hessian(5,4) = t399*b10+t688+t514*b12;
  hessian(5,5) = t564*b10+t600*b11+t611*b12;
  hessian(5,6) = t154*b10+t246*b11+t667;
  hessian(5,7) = t417*b10+t476*b11+t700;
  hessian(5,8) = t582*b10+t611*b11+t630*b12;
  hessian(6,0) = t42*b20+t54*b21+t65*b22;
  hessian(6,1) = t736+t88*b21+t98*b22;
  hessian(6,2) = t740+t136*b21+t154*b22;
  hessian(6,3) = t54*b20+t167*b21+t178*b22;
  hessian(6,4) = t190*b20+t749+t212*b22;
  hessian(6,5) = t224*b20+t753+t246*b22;
  hessian(6,6) = t65*b20+t178*b21+t259*b22;
  hessian(6,7) = t271*b20+t282*b21+t762;
  hessian(6,8) = t305*b20+t316*b21+t766;
  hessian(7,0) = t736+t190*b21+t271*b22;
  hessian(7,1) = t342*b20+t352*b21+t362*b22;
  hessian(7,2) = t775+t399*b21+t417*b22;
  hessian(7,3) = t88*b20+t749+t282*b22;
  hessian(7,4) = t352*b20+t432*b21+t443*b22;
  hessian(7,5) = t454*b20+t787+t476*b22;
  hessian(7,6) = t98*b20+t212*b21+t762;
  hessian(7,7) = t362*b20+t443*b21+t492*b22;
  hessian(7,8) = t503*b20+t514*b21+t799;
  hessian(8,0) = t740+t224*b21+t305*b22;
  hessian(8,1) = t775+t454*b21+t503*b22;
  hessian(8,2) = t546*b20+t564*b21+t582*b22;
  hessian(8,3) = t136*b20+t753+t316*b22;
  hessian(8,4) = t399*b20+t787+t514*b22;
  hessian(8,5) = t564*b20+t600*b21+t611*b22;
  hessian(8,6) = t154*b20+t246*b21+t766;
  hessian(8,7) = t417*b20+t476*b21+t799;
  hessian(8,8) = t582*b20+t611*b21+t630*b22;
  hessian(9,0) = t42*b30+t54*b31+t65*b32;
  hessian(9,1) = t835+t88*b31+t98*b32;
  hessian(9,2) = t839+t136*b31+t154*b32;
  hessian(9,3) = t54*b30+t167*b31+t178*b32;
  hessian(9,4) = t190*b30+t848+t212*b32;
  hessian(9,5) = t224*b30+t852+t246*b32;
  hessian(9,6) = t65*b30+t178*b31+t259*b32;
  hessian(9,7) = t271*b30+t282*b31+t861;
  hessian(9,8) = t305*b30+t316*b31+t865;
  hessian(10,0) = t835+t190*b31+t271*b32;
  hessian(10,1) = t342*b30+t352*b31+t362*b32;
  hessian(10,2) = t874+t399*b31+t417*b32;
  hessian(10,3) = t88*b30+t848+t282*b32;
  hessian(10,4) = t352*b30+t432*b31+t443*b32;
  hessian(10,5) = t454*b30+t886+t476*b32;
  hessian(10,6) = t98*b30+t212*b31+t861;
  hessian(10,7) = t362*b30+t443*b31+t492*b32;
  hessian(10,8) = t503*b30+t514*b31+t898;
  hessian(11,0) = t839+t224*b31+t305*b32;
  hessian(11,1) = t874+t454*b31+t503*b32;
  hessian(11,2) = t546*b30+t564*b31+t582*b32;
  hessian(11,3) = t136*b30+t852+t316*b32;
  hessian(11,4) = t399*b30+t886+t514*b32;
  hessian(11,5) = t564*b30+t600*b31+t611*b32;
  hessian(11,6) = t154*b30+t246*b31+t865;
  hessian(11,7) = t417*b30+t476*b31+t898;
  hessian(11,8) = t582*b30+t611*b31+t630*b32;
 
 
}

void ARRUDA_BOYCE::hessian3(const Real* F, const VEC3F* b, MATRIX& hessian) {
  const double N = _Nconst;
  const double nkTheta = _nkTheta;
  const double b00 = b[0][0];
  const double b01 = b[0][1];
  const double b02 = b[0][2];
  const double b10 = b[1][0];
  const double b11 = b[1][1];
  const double b12 = b[1][2];
  const double b20 = b[2][0];
  const double b21 = b[2][1];
  const double b22 = b[2][2];
  const double b30 = b[3][0];
  const double b31 = b[3][1];
  const double b32 = b[3][2]; 

 
  Real t1 = 1/N;
  Real t2 = t1*F[3];
  Real t3 = 2.0/5.0*t2;
  Real t4 = N*N;
  Real t5 = 1/t4;
  Real t6 = F[0]*F[0];
  Real t10 = F[1]*F[1];
  Real t11 = F[2]*F[2];
  Real t12 = F[3]*F[3];
  Real t13 = F[4]*F[4];
  Real t14 = F[5]*F[5];
  Real t15 = F[6]*F[6];
  Real t16 = F[7]*F[7];
  Real t17 = F[8]*F[8];
  Real t18 = t6+t10+t11+t12+t13+t14+t15+t16+t17;
  Real t19 = t5*t18;
  Real t20 = t19*F[3];
  Real t21 = 44.0/175.0*t20;
  Real t23 = 1/t4/N;
  Real t24 = t23*t18;
  Real t25 = F[3]*t6;
  Real t28 = t18*t18;
  Real t29 = t23*t28;
  Real t30 = t29*F[3];
  Real t31 = 114.0/875.0*t30;
  Real t32 = t4*t4;
  Real t33 = 1/t32;
  Real t34 = t33*t28;
  Real t38 = t33*t28*t18;
  Real t39 = t38*F[3];
  Real t40 = 4152.0/67375.0*t39;
  Real t42 = nkTheta*(t3+88.0/175.0*t5*t6*F[3]+t21+456.0/875.0*t24*t25+t31+24912.0/67375.0*t34*t25+t40);
  Real t46 = t5*F[0];
  Real t51 = t12*F[0];
  Real t61 = nkTheta*(2.0/5.0*t1*F[0]+88.0/175.0*t46*t12+44.0/175.0*t19*F[0]+456.0/875.0*t24*t51+114.0/875.0*t29*F[0]+24912.0/67375.0*t34*t51+4152.0/67375.0*t38*F[0]);
  Real t63 = F[6]*F[3];
  Real t66 = t63*F[0];
  Real t72 = nkTheta*(88.0/175.0*t46*t63+456.0/875.0*t24*t66+24912.0/67375.0*t34*t66);
  Real t75 = F[3]*F[1];
  Real t78 = t75*F[0];
  Real t84 = nkTheta*(88.0/175.0*t46*t75+456.0/875.0*t24*t78+24912.0/67375.0*t34*t78);
  Real t85 = t84*b00;
  Real t88 = t5*F[1];
  Real t93 = t12*F[1];
  Real t103 = nkTheta*(2.0/5.0*t1*F[1]+88.0/175.0*t88*t12+44.0/175.0*t19*F[1]+456.0/875.0*t24*t93+114.0/875.0*t29*F[1]+24912.0/67375.0*t34*t93+4152.0/67375.0*t38*F[1]);
  Real t107 = t63*F[1];
  Real t113 = nkTheta*(88.0/175.0*t88*t63+456.0/875.0*t24*t107+24912.0/67375.0*t34*t107);
  Real t116 = F[3]*F[2];
  Real t119 = t116*F[0];
  Real t125 = nkTheta*(88.0/175.0*t46*t116+456.0/875.0*t24*t119+24912.0/67375.0*t34*t119);
  Real t126 = t125*b00;
  Real t129 = t5*F[2];
  Real t134 = t12*F[2];
  Real t144 = nkTheta*(2.0/5.0*t1*F[2]+88.0/175.0*t129*t12+44.0/175.0*t19*F[2]+456.0/875.0*t24*t134+114.0/875.0*t29*F[2]+24912.0/67375.0*t34*t134+4152.0/67375.0*t38*F[2]);
  Real t148 = t63*F[2];
  Real t154 = nkTheta*(88.0/175.0*t129*t63+456.0/875.0*t24*t148+24912.0/67375.0*t34*t148);
  Real t159 = t12*F[3];
  Real t170 = nkTheta*(6.0/5.0*t2+88.0/175.0*t5*t159+132.0/175.0*t20+456.0/875.0*t24*t159+342.0/875.0*t30+24912.0/67375.0*t34*t159+12456.0/67375.0*t39);
  Real t174 = t5*t12;
  Real t179 = F[6]*t12;
  Real t189 = nkTheta*(2.0/5.0*t1*F[6]+88.0/175.0*t174*F[6]+44.0/175.0*t19*F[6]+456.0/875.0*t24*t179+114.0/875.0*t29*F[6]+24912.0/67375.0*t34*t179+4152.0/67375.0*t38*F[6]);
  Real t192 = F[3]*F[4];
  Real t195 = t192*F[0];
  Real t201 = nkTheta*(88.0/175.0*t46*t192+456.0/875.0*t24*t195+24912.0/67375.0*t34*t195);
  Real t209 = t12*F[4];
  Real t219 = nkTheta*(2.0/5.0*t1*F[4]+88.0/175.0*t174*F[4]+44.0/175.0*t19*F[4]+456.0/875.0*t24*t209+114.0/875.0*t29*F[4]+24912.0/67375.0*t34*t209+4152.0/67375.0*t38*F[4]);
  Real t220 = t219*b01;
  Real t221 = t5*F[3];
  Real t222 = F[6]*F[4];
  Real t225 = t222*F[3];
  Real t231 = nkTheta*(88.0/175.0*t221*t222+456.0/875.0*t24*t225+24912.0/67375.0*t34*t225);
  Real t234 = F[3]*F[5];
  Real t237 = t234*F[0];
  Real t243 = nkTheta*(88.0/175.0*t46*t234+456.0/875.0*t24*t237+24912.0/67375.0*t34*t237);
  Real t251 = t12*F[5];
  Real t261 = nkTheta*(2.0/5.0*t1*F[5]+88.0/175.0*t174*F[5]+44.0/175.0*t19*F[5]+456.0/875.0*t24*t251+114.0/875.0*t29*F[5]+24912.0/67375.0*t34*t251+4152.0/67375.0*t38*F[5]);
  Real t262 = t261*b01;
  Real t263 = F[6]*F[5];
  Real t266 = t263*F[3];
  Real t272 = nkTheta*(88.0/175.0*t221*t263+456.0/875.0*t24*t266+24912.0/67375.0*t34*t266);
  Real t279 = t15*F[3];
  Real t285 = nkTheta*(t3+88.0/175.0*t221*t15+t21+456.0/875.0*t24*t279+t31+24912.0/67375.0*t34*t279+t40);
  Real t288 = F[3]*F[7];
  Real t291 = t288*F[0];
  Real t297 = nkTheta*(88.0/175.0*t46*t288+456.0/875.0*t24*t291+24912.0/67375.0*t34*t291);
  Real t305 = t12*F[7];
  Real t315 = nkTheta*(2.0/5.0*t1*F[7]+88.0/175.0*t174*F[7]+44.0/175.0*t19*F[7]+456.0/875.0*t24*t305+114.0/875.0*t29*F[7]+24912.0/67375.0*t34*t305+4152.0/67375.0*t38*F[7]);
  Real t317 = F[6]*F[7];
  Real t320 = t317*F[3];
  Real t326 = nkTheta*(88.0/175.0*t221*t317+456.0/875.0*t24*t320+24912.0/67375.0*t34*t320);
  Real t327 = t326*b02;
  Real t329 = F[3]*F[8];
  Real t332 = t329*F[0];
  Real t338 = nkTheta*(88.0/175.0*t46*t329+456.0/875.0*t24*t332+24912.0/67375.0*t34*t332);
  Real t346 = t12*F[8];
  Real t356 = nkTheta*(2.0/5.0*t1*F[8]+88.0/175.0*t174*F[8]+44.0/175.0*t19*F[8]+456.0/875.0*t24*t346+114.0/875.0*t29*F[8]+24912.0/67375.0*t34*t346+4152.0/67375.0*t38*F[8]);
  Real t358 = F[6]*F[8];
  Real t361 = t358*F[3];
  Real t367 = nkTheta*(88.0/175.0*t221*t358+456.0/875.0*t24*t361+24912.0/67375.0*t34*t361);
  Real t368 = t367*b02;
  Real t376 = F[3]*t10;
  Real t382 = nkTheta*(t3+88.0/175.0*t5*t10*F[3]+t21+456.0/875.0*t24*t376+t31+24912.0/67375.0*t34*t376+t40);
  Real t386 = t192*F[1];
  Real t392 = nkTheta*(88.0/175.0*t88*t192+456.0/875.0*t24*t386+24912.0/67375.0*t34*t386);
  Real t396 = t288*F[1];
  Real t402 = nkTheta*(88.0/175.0*t88*t288+456.0/875.0*t24*t396+24912.0/67375.0*t34*t396);
  Real t407 = t116*F[1];
  Real t413 = nkTheta*(88.0/175.0*t88*t116+456.0/875.0*t24*t407+24912.0/67375.0*t34*t407);
  Real t414 = t413*b00;
  Real t417 = t192*F[2];
  Real t423 = nkTheta*(88.0/175.0*t129*t192+456.0/875.0*t24*t417+24912.0/67375.0*t34*t417);
  Real t427 = t288*F[2];
  Real t433 = nkTheta*(88.0/175.0*t129*t288+456.0/875.0*t24*t427+24912.0/67375.0*t34*t427);
  Real t442 = t13*F[3];
  Real t448 = nkTheta*(t3+88.0/175.0*t221*t13+t21+456.0/875.0*t24*t442+t31+24912.0/67375.0*t34*t442+t40);
  Real t450 = F[7]*F[4];
  Real t453 = t450*F[3];
  Real t459 = nkTheta*(88.0/175.0*t221*t450+456.0/875.0*t24*t453+24912.0/67375.0*t34*t453);
  Real t464 = t234*F[1];
  Real t470 = nkTheta*(88.0/175.0*t88*t234+456.0/875.0*t24*t464+24912.0/67375.0*t34*t464);
  Real t472 = F[4]*F[5];
  Real t475 = t472*F[3];
  Real t481 = nkTheta*(88.0/175.0*t221*t472+456.0/875.0*t24*t475+24912.0/67375.0*t34*t475);
  Real t482 = t481*b01;
  Real t483 = F[7]*F[5];
  Real t486 = t483*F[3];
  Real t492 = nkTheta*(88.0/175.0*t221*t483+456.0/875.0*t24*t486+24912.0/67375.0*t34*t486);
  Real t502 = t16*F[3];
  Real t508 = nkTheta*(t3+88.0/175.0*t221*t16+t21+456.0/875.0*t24*t502+t31+24912.0/67375.0*t34*t502+t40);
  Real t513 = t329*F[1];
  Real t519 = nkTheta*(88.0/175.0*t88*t329+456.0/875.0*t24*t513+24912.0/67375.0*t34*t513);
  Real t521 = F[4]*F[8];
  Real t524 = t521*F[3];
  Real t530 = nkTheta*(88.0/175.0*t221*t521+456.0/875.0*t24*t524+24912.0/67375.0*t34*t524);
  Real t532 = F[7]*F[8];
  Real t535 = t532*F[3];
  Real t541 = nkTheta*(88.0/175.0*t221*t532+456.0/875.0*t24*t535+24912.0/67375.0*t34*t535);
  Real t542 = t541*b02;
  Real t553 = F[3]*t11;
  Real t559 = nkTheta*(t3+88.0/175.0*t5*t11*F[3]+t21+456.0/875.0*t24*t553+t31+24912.0/67375.0*t34*t553+t40);
  Real t563 = t234*F[2];
  Real t569 = nkTheta*(88.0/175.0*t129*t234+456.0/875.0*t24*t563+24912.0/67375.0*t34*t563);
  Real t573 = t329*F[2];
  Real t579 = nkTheta*(88.0/175.0*t129*t329+456.0/875.0*t24*t573+24912.0/67375.0*t34*t573);
  Real t591 = t14*F[3];
  Real t597 = nkTheta*(t3+88.0/175.0*t221*t14+t21+456.0/875.0*t24*t591+t31+24912.0/67375.0*t34*t591+t40);
  Real t599 = F[8]*F[5];
  Real t602 = t599*F[3];
  Real t608 = nkTheta*(88.0/175.0*t221*t599+456.0/875.0*t24*t602+24912.0/67375.0*t34*t602);
  Real t621 = t17*F[3];
  Real t627 = nkTheta*(t3+88.0/175.0*t221*t17+t21+456.0/875.0*t24*t621+t31+24912.0/67375.0*t34*t621+t40);
  Real t634 = t84*b10;
  Real t638 = t125*b10;
  Real t647 = t219*b11;
  Real t651 = t261*b11;
  Real t660 = t326*b12;
  Real t664 = t367*b12;
  Real t673 = t413*b10;
  Real t685 = t481*b11;
  Real t697 = t541*b12;
  Real t733 = t84*b20;
  Real t737 = t125*b20;
  Real t746 = t219*b21;
  Real t750 = t261*b21;
  Real t759 = t326*b22;
  Real t763 = t367*b22;
  Real t772 = t413*b20;
  Real t784 = t481*b21;
  Real t796 = t541*b22;
  Real t832 = t84*b30;
  Real t836 = t125*b30;
  Real t845 = t219*b31;
  Real t849 = t261*b31;
  Real t858 = t326*b32;
  Real t862 = t367*b32;
  Real t871 = t413*b30;
  Real t883 = t481*b31;
  Real t895 = t541*b32;
  hessian(0,0) = t42*b00+t61*b01+t72*b02;
  hessian(0,1) = t85+t103*b01+t113*b02;
  hessian(0,2) = t126+t144*b01+t154*b02;
  hessian(0,3) = t61*b00+t170*b01+t189*b02;
  hessian(0,4) = t201*b00+t220+t231*b02;
  hessian(0,5) = t243*b00+t262+t272*b02;
  hessian(0,6) = t72*b00+t189*b01+t285*b02;
  hessian(0,7) = t297*b00+t315*b01+t327;
  hessian(0,8) = t338*b00+t356*b01+t368;
  hessian(1,0) = t85+t201*b01+t297*b02;
  hessian(1,1) = t382*b00+t392*b01+t402*b02;
  hessian(1,2) = t414+t423*b01+t433*b02;
  hessian(1,3) = t103*b00+t220+t315*b02;
  hessian(1,4) = t392*b00+t448*b01+t459*b02;
  hessian(1,5) = t470*b00+t482+t492*b02;
  hessian(1,6) = t113*b00+t231*b01+t327;
  hessian(1,7) = t402*b00+t459*b01+t508*b02;
  hessian(1,8) = t519*b00+t530*b01+t542;
  hessian(2,0) = t126+t243*b01+t338*b02;
  hessian(2,1) = t414+t470*b01+t519*b02;
  hessian(2,2) = t559*b00+t569*b01+t579*b02;
  hessian(2,3) = t144*b00+t262+t356*b02;
  hessian(2,4) = t423*b00+t482+t530*b02;
  hessian(2,5) = t569*b00+t597*b01+t608*b02;
  hessian(2,6) = t154*b00+t272*b01+t368;
  hessian(2,7) = t433*b00+t492*b01+t542;
  hessian(2,8) = t579*b00+t608*b01+t627*b02;
  hessian(3,0) = t42*b10+t61*b11+t72*b12;
  hessian(3,1) = t634+t103*b11+t113*b12;
  hessian(3,2) = t638+t144*b11+t154*b12;
  hessian(3,3) = t61*b10+t170*b11+t189*b12;
  hessian(3,4) = t201*b10+t647+t231*b12;
  hessian(3,5) = t243*b10+t651+t272*b12;
  hessian(3,6) = t72*b10+t189*b11+t285*b12;
  hessian(3,7) = t297*b10+t315*b11+t660;
  hessian(3,8) = t338*b10+t356*b11+t664;
  hessian(4,0) = t634+t201*b11+t297*b12;
  hessian(4,1) = t382*b10+t392*b11+t402*b12;
  hessian(4,2) = t673+t423*b11+t433*b12;
  hessian(4,3) = t103*b10+t647+t315*b12;
  hessian(4,4) = t392*b10+t448*b11+t459*b12;
  hessian(4,5) = t470*b10+t685+t492*b12;
  hessian(4,6) = t113*b10+t231*b11+t660;
  hessian(4,7) = t402*b10+t459*b11+t508*b12;
  hessian(4,8) = t519*b10+t530*b11+t697;
  hessian(5,0) = t638+t243*b11+t338*b12;
  hessian(5,1) = t673+t470*b11+t519*b12;
  hessian(5,2) = t559*b10+t569*b11+t579*b12;
  hessian(5,3) = t144*b10+t651+t356*b12;
  hessian(5,4) = t423*b10+t685+t530*b12;
  hessian(5,5) = t569*b10+t597*b11+t608*b12;
  hessian(5,6) = t154*b10+t272*b11+t664;
  hessian(5,7) = t433*b10+t492*b11+t697;
  hessian(5,8) = t579*b10+t608*b11+t627*b12;
  hessian(6,0) = t42*b20+t61*b21+t72*b22;
  hessian(6,1) = t733+t103*b21+t113*b22;
  hessian(6,2) = t737+t144*b21+t154*b22;
  hessian(6,3) = t61*b20+t170*b21+t189*b22;
  hessian(6,4) = t201*b20+t746+t231*b22;
  hessian(6,5) = t243*b20+t750+t272*b22;
  hessian(6,6) = t72*b20+t189*b21+t285*b22;
  hessian(6,7) = t297*b20+t315*b21+t759;
  hessian(6,8) = t338*b20+t356*b21+t763;
  hessian(7,0) = t733+t201*b21+t297*b22;
  hessian(7,1) = t382*b20+t392*b21+t402*b22;
  hessian(7,2) = t772+t423*b21+t433*b22;
  hessian(7,3) = t103*b20+t746+t315*b22;
  hessian(7,4) = t392*b20+t448*b21+t459*b22;
  hessian(7,5) = t470*b20+t784+t492*b22;
  hessian(7,6) = t113*b20+t231*b21+t759;
  hessian(7,7) = t402*b20+t459*b21+t508*b22;
  hessian(7,8) = t519*b20+t530*b21+t796;
  hessian(8,0) = t737+t243*b21+t338*b22;
  hessian(8,1) = t772+t470*b21+t519*b22;
  hessian(8,2) = t559*b20+t569*b21+t579*b22;
  hessian(8,3) = t144*b20+t750+t356*b22;
  hessian(8,4) = t423*b20+t784+t530*b22;
  hessian(8,5) = t569*b20+t597*b21+t608*b22;
  hessian(8,6) = t154*b20+t272*b21+t763;
  hessian(8,7) = t433*b20+t492*b21+t796;
  hessian(8,8) = t579*b20+t608*b21+t627*b22;
  hessian(9,0) = t42*b30+t61*b31+t72*b32;
  hessian(9,1) = t832+t103*b31+t113*b32;
  hessian(9,2) = t836+t144*b31+t154*b32;
  hessian(9,3) = t61*b30+t170*b31+t189*b32;
  hessian(9,4) = t201*b30+t845+t231*b32;
  hessian(9,5) = t243*b30+t849+t272*b32;
  hessian(9,6) = t72*b30+t189*b31+t285*b32;
  hessian(9,7) = t297*b30+t315*b31+t858;
  hessian(9,8) = t338*b30+t356*b31+t862;
  hessian(10,0) = t832+t201*b31+t297*b32;
  hessian(10,1) = t382*b30+t392*b31+t402*b32;
  hessian(10,2) = t871+t423*b31+t433*b32;
  hessian(10,3) = t103*b30+t845+t315*b32;
  hessian(10,4) = t392*b30+t448*b31+t459*b32;
  hessian(10,5) = t470*b30+t883+t492*b32;
  hessian(10,6) = t113*b30+t231*b31+t858;
  hessian(10,7) = t402*b30+t459*b31+t508*b32;
  hessian(10,8) = t519*b30+t530*b31+t895;
  hessian(11,0) = t836+t243*b31+t338*b32;
  hessian(11,1) = t871+t470*b31+t519*b32;
  hessian(11,2) = t559*b30+t569*b31+t579*b32;
  hessian(11,3) = t144*b30+t849+t356*b32;
  hessian(11,4) = t423*b30+t883+t530*b32;
  hessian(11,5) = t569*b30+t597*b31+t608*b32;
  hessian(11,6) = t154*b30+t272*b31+t862;
  hessian(11,7) = t433*b30+t492*b31+t895;
  hessian(11,8) = t579*b30+t608*b31+t627*b32;
 
 
}

void ARRUDA_BOYCE::hessian4(const Real* F, const VEC3F* b, MATRIX& hessian) {
  const double N = _Nconst;
  const double nkTheta = _nkTheta;
  const double b00 = b[0][0];
  const double b01 = b[0][1];
  const double b02 = b[0][2];
  const double b10 = b[1][0];
  const double b11 = b[1][1];
  const double b12 = b[1][2];
  const double b20 = b[2][0];
  const double b21 = b[2][1];
  const double b22 = b[2][2];
  const double b30 = b[3][0];
  const double b31 = b[3][1];
  const double b32 = b[3][2]; 

 
  Real t1 = 1/N;
  Real t2 = t1*F[4];
  Real t3 = 2.0/5.0*t2;
  Real t4 = N*N;
  Real t5 = 1/t4;
  Real t6 = F[0]*F[0];
  Real t10 = F[1]*F[1];
  Real t11 = F[2]*F[2];
  Real t12 = F[3]*F[3];
  Real t13 = F[4]*F[4];
  Real t14 = F[5]*F[5];
  Real t15 = F[6]*F[6];
  Real t16 = F[7]*F[7];
  Real t17 = F[8]*F[8];
  Real t18 = t6+t10+t11+t12+t13+t14+t15+t16+t17;
  Real t19 = t5*t18;
  Real t20 = t19*F[4];
  Real t21 = 44.0/175.0*t20;
  Real t23 = 1/t4/N;
  Real t24 = t23*t18;
  Real t25 = t6*F[4];
  Real t28 = t18*t18;
  Real t29 = t23*t28;
  Real t30 = t29*F[4];
  Real t31 = 114.0/875.0*t30;
  Real t32 = t4*t4;
  Real t33 = 1/t32;
  Real t34 = t33*t28;
  Real t38 = t33*t28*t18;
  Real t39 = t38*F[4];
  Real t40 = 4152.0/67375.0*t39;
  Real t42 = nkTheta*(t3+88.0/175.0*t5*t6*F[4]+t21+456.0/875.0*t24*t25+t31+24912.0/67375.0*t34*t25+t40);
  Real t44 = t5*F[0];
  Real t45 = F[3]*F[4];
  Real t48 = t45*F[0];
  Real t54 = nkTheta*(88.0/175.0*t44*t45+456.0/875.0*t24*t48+24912.0/67375.0*t34*t48);
  Real t56 = F[6]*F[4];
  Real t59 = t56*F[0];
  Real t65 = nkTheta*(88.0/175.0*t44*t56+456.0/875.0*t24*t59+24912.0/67375.0*t34*t59);
  Real t68 = F[4]*F[1];
  Real t71 = t68*F[0];
  Real t77 = nkTheta*(88.0/175.0*t44*t68+456.0/875.0*t24*t71+24912.0/67375.0*t34*t71);
  Real t78 = t77*b00;
  Real t79 = t5*F[1];
  Real t82 = t45*F[1];
  Real t88 = nkTheta*(88.0/175.0*t79*t45+456.0/875.0*t24*t82+24912.0/67375.0*t34*t82);
  Real t92 = t56*F[1];
  Real t98 = nkTheta*(88.0/175.0*t79*t56+456.0/875.0*t24*t92+24912.0/67375.0*t34*t92);
  Real t101 = F[4]*F[2];
  Real t104 = t101*F[0];
  Real t110 = nkTheta*(88.0/175.0*t44*t101+456.0/875.0*t24*t104+24912.0/67375.0*t34*t104);
  Real t111 = t110*b00;
  Real t112 = t5*F[2];
  Real t115 = t45*F[2];
  Real t121 = nkTheta*(88.0/175.0*t112*t45+456.0/875.0*t24*t115+24912.0/67375.0*t34*t115);
  Real t125 = t56*F[2];
  Real t131 = nkTheta*(88.0/175.0*t112*t56+456.0/875.0*t24*t125+24912.0/67375.0*t34*t125);
  Real t138 = t12*F[4];
  Real t144 = nkTheta*(t3+88.0/175.0*t5*t12*F[4]+t21+456.0/875.0*t24*t138+t31+24912.0/67375.0*t34*t138+t40);
  Real t146 = t5*F[3];
  Real t149 = t56*F[3];
  Real t155 = nkTheta*(88.0/175.0*t146*t56+456.0/875.0*t24*t149+24912.0/67375.0*t34*t149);
  Real t164 = t13*F[0];
  Real t174 = nkTheta*(2.0/5.0*t1*F[0]+88.0/175.0*t44*t13+44.0/175.0*t19*F[0]+456.0/875.0*t24*t164+114.0/875.0*t29*F[0]+24912.0/67375.0*t34*t164+4152.0/67375.0*t38*F[0]);
  Real t182 = t13*F[3];
  Real t192 = nkTheta*(2.0/5.0*t1*F[3]+88.0/175.0*t146*t13+44.0/175.0*t19*F[3]+456.0/875.0*t24*t182+114.0/875.0*t29*F[3]+24912.0/67375.0*t34*t182+4152.0/67375.0*t38*F[3]);
  Real t193 = t192*b01;
  Real t196 = t5*t13;
  Real t201 = F[6]*t13;
  Real t211 = nkTheta*(2.0/5.0*t1*F[6]+88.0/175.0*t196*F[6]+44.0/175.0*t19*F[6]+456.0/875.0*t24*t201+114.0/875.0*t29*F[6]+24912.0/67375.0*t34*t201+4152.0/67375.0*t38*F[6]);
  Real t214 = F[4]*F[5];
  Real t217 = t214*F[0];
  Real t223 = nkTheta*(88.0/175.0*t44*t214+456.0/875.0*t24*t217+24912.0/67375.0*t34*t217);
  Real t227 = t214*F[3];
  Real t233 = nkTheta*(88.0/175.0*t146*t214+456.0/875.0*t24*t227+24912.0/67375.0*t34*t227);
  Real t234 = t233*b01;
  Real t235 = t5*F[4];
  Real t236 = F[6]*F[5];
  Real t239 = t236*F[4];
  Real t245 = nkTheta*(88.0/175.0*t235*t236+456.0/875.0*t24*t239+24912.0/67375.0*t34*t239);
  Real t252 = t15*F[4];
  Real t258 = nkTheta*(t3+88.0/175.0*t235*t15+t21+456.0/875.0*t24*t252+t31+24912.0/67375.0*t34*t252+t40);
  Real t261 = F[7]*F[4];
  Real t264 = t261*F[0];
  Real t270 = nkTheta*(88.0/175.0*t44*t261+456.0/875.0*t24*t264+24912.0/67375.0*t34*t264);
  Real t274 = t261*F[3];
  Real t280 = nkTheta*(88.0/175.0*t146*t261+456.0/875.0*t24*t274+24912.0/67375.0*t34*t274);
  Real t282 = F[6]*F[7];
  Real t285 = t282*F[4];
  Real t291 = nkTheta*(88.0/175.0*t235*t282+456.0/875.0*t24*t285+24912.0/67375.0*t34*t285);
  Real t292 = t291*b02;
  Real t294 = F[4]*F[8];
  Real t297 = t294*F[0];
  Real t303 = nkTheta*(88.0/175.0*t44*t294+456.0/875.0*t24*t297+24912.0/67375.0*t34*t297);
  Real t307 = t294*F[3];
  Real t313 = nkTheta*(88.0/175.0*t146*t294+456.0/875.0*t24*t307+24912.0/67375.0*t34*t307);
  Real t315 = F[6]*F[8];
  Real t318 = t315*F[4];
  Real t324 = nkTheta*(88.0/175.0*t235*t315+456.0/875.0*t24*t318+24912.0/67375.0*t34*t318);
  Real t325 = t324*b02;
  Real t333 = F[4]*t10;
  Real t339 = nkTheta*(t3+88.0/175.0*t5*t10*F[4]+t21+456.0/875.0*t24*t333+t31+24912.0/67375.0*t34*t333+t40);
  Real t347 = t13*F[1];
  Real t357 = nkTheta*(2.0/5.0*t1*F[1]+88.0/175.0*t79*t13+44.0/175.0*t19*F[1]+456.0/875.0*t24*t347+114.0/875.0*t29*F[1]+24912.0/67375.0*t34*t347+4152.0/67375.0*t38*F[1]);
  Real t361 = t261*F[1];
  Real t367 = nkTheta*(88.0/175.0*t79*t261+456.0/875.0*t24*t361+24912.0/67375.0*t34*t361);
  Real t372 = t101*F[1];
  Real t378 = nkTheta*(88.0/175.0*t79*t101+456.0/875.0*t24*t372+24912.0/67375.0*t34*t372);
  Real t379 = t378*b00;
  Real t386 = t13*F[2];
  Real t396 = nkTheta*(2.0/5.0*t1*F[2]+88.0/175.0*t112*t13+44.0/175.0*t19*F[2]+456.0/875.0*t24*t386+114.0/875.0*t29*F[2]+24912.0/67375.0*t34*t386+4152.0/67375.0*t38*F[2]);
  Real t400 = t261*F[2];
  Real t406 = nkTheta*(88.0/175.0*t112*t261+456.0/875.0*t24*t400+24912.0/67375.0*t34*t400);
  Real t414 = t13*F[4];
  Real t425 = nkTheta*(6.0/5.0*t2+88.0/175.0*t5*t414+132.0/175.0*t20+456.0/875.0*t24*t414+342.0/875.0*t30+24912.0/67375.0*t34*t414+12456.0/67375.0*t39);
  Real t433 = F[7]*t13;
  Real t443 = nkTheta*(2.0/5.0*t1*F[7]+88.0/175.0*t196*F[7]+44.0/175.0*t19*F[7]+456.0/875.0*t24*t433+114.0/875.0*t29*F[7]+24912.0/67375.0*t34*t433+4152.0/67375.0*t38*F[7]);
  Real t448 = t214*F[1];
  Real t454 = nkTheta*(88.0/175.0*t79*t214+456.0/875.0*t24*t448+24912.0/67375.0*t34*t448);
  Real t462 = t13*F[5];
  Real t472 = nkTheta*(2.0/5.0*t1*F[5]+88.0/175.0*t196*F[5]+44.0/175.0*t19*F[5]+456.0/875.0*t24*t462+114.0/875.0*t29*F[5]+24912.0/67375.0*t34*t462+4152.0/67375.0*t38*F[5]);
  Real t473 = t472*b01;
  Real t474 = F[7]*F[5];
  Real t477 = t474*F[4];
  Real t483 = nkTheta*(88.0/175.0*t235*t474+456.0/875.0*t24*t477+24912.0/67375.0*t34*t477);
  Real t493 = t16*F[4];
  Real t499 = nkTheta*(t3+88.0/175.0*t235*t16+t21+456.0/875.0*t24*t493+t31+24912.0/67375.0*t34*t493+t40);
  Real t504 = t294*F[1];
  Real t510 = nkTheta*(88.0/175.0*t79*t294+456.0/875.0*t24*t504+24912.0/67375.0*t34*t504);
  Real t518 = t13*F[8];
  Real t528 = nkTheta*(2.0/5.0*t1*F[8]+88.0/175.0*t196*F[8]+44.0/175.0*t19*F[8]+456.0/875.0*t24*t518+114.0/875.0*t29*F[8]+24912.0/67375.0*t34*t518+4152.0/67375.0*t38*F[8]);
  Real t530 = F[7]*F[8];
  Real t533 = t530*F[4];
  Real t539 = nkTheta*(88.0/175.0*t235*t530+456.0/875.0*t24*t533+24912.0/67375.0*t34*t533);
  Real t540 = t539*b02;
  Real t551 = F[4]*t11;
  Real t557 = nkTheta*(t3+88.0/175.0*t5*t11*F[4]+t21+456.0/875.0*t24*t551+t31+24912.0/67375.0*t34*t551+t40);
  Real t561 = t214*F[2];
  Real t567 = nkTheta*(88.0/175.0*t112*t214+456.0/875.0*t24*t561+24912.0/67375.0*t34*t561);
  Real t571 = t294*F[2];
  Real t577 = nkTheta*(88.0/175.0*t112*t294+456.0/875.0*t24*t571+24912.0/67375.0*t34*t571);
  Real t589 = t14*F[4];
  Real t595 = nkTheta*(t3+88.0/175.0*t235*t14+t21+456.0/875.0*t24*t589+t31+24912.0/67375.0*t34*t589+t40);
  Real t597 = F[8]*F[5];
  Real t600 = t597*F[4];
  Real t606 = nkTheta*(88.0/175.0*t235*t597+456.0/875.0*t24*t600+24912.0/67375.0*t34*t600);
  Real t619 = t17*F[4];
  Real t625 = nkTheta*(t3+88.0/175.0*t235*t17+t21+456.0/875.0*t24*t619+t31+24912.0/67375.0*t34*t619+t40);
  Real t632 = t77*b10;
  Real t636 = t110*b10;
  Real t645 = t192*b11;
  Real t649 = t233*b11;
  Real t658 = t291*b12;
  Real t662 = t324*b12;
  Real t671 = t378*b10;
  Real t683 = t472*b11;
  Real t695 = t539*b12;
  Real t731 = t77*b20;
  Real t735 = t110*b20;
  Real t744 = t192*b21;
  Real t748 = t233*b21;
  Real t757 = t291*b22;
  Real t761 = t324*b22;
  Real t770 = t378*b20;
  Real t782 = t472*b21;
  Real t794 = t539*b22;
  Real t830 = t77*b30;
  Real t834 = t110*b30;
  Real t843 = t192*b31;
  Real t847 = t233*b31;
  Real t856 = t291*b32;
  Real t860 = t324*b32;
  Real t869 = t378*b30;
  Real t881 = t472*b31;
  Real t893 = t539*b32;
  hessian(0,0) = t42*b00+t54*b01+t65*b02;
  hessian(0,1) = t78+t88*b01+t98*b02;
  hessian(0,2) = t111+t121*b01+t131*b02;
  hessian(0,3) = t54*b00+t144*b01+t155*b02;
  hessian(0,4) = t174*b00+t193+t211*b02;
  hessian(0,5) = t223*b00+t234+t245*b02;
  hessian(0,6) = t65*b00+t155*b01+t258*b02;
  hessian(0,7) = t270*b00+t280*b01+t292;
  hessian(0,8) = t303*b00+t313*b01+t325;
  hessian(1,0) = t78+t174*b01+t270*b02;
  hessian(1,1) = t339*b00+t357*b01+t367*b02;
  hessian(1,2) = t379+t396*b01+t406*b02;
  hessian(1,3) = t88*b00+t193+t280*b02;
  hessian(1,4) = t357*b00+t425*b01+t443*b02;
  hessian(1,5) = t454*b00+t473+t483*b02;
  hessian(1,6) = t98*b00+t211*b01+t292;
  hessian(1,7) = t367*b00+t443*b01+t499*b02;
  hessian(1,8) = t510*b00+t528*b01+t540;
  hessian(2,0) = t111+t223*b01+t303*b02;
  hessian(2,1) = t379+t454*b01+t510*b02;
  hessian(2,2) = t557*b00+t567*b01+t577*b02;
  hessian(2,3) = t121*b00+t234+t313*b02;
  hessian(2,4) = t396*b00+t473+t528*b02;
  hessian(2,5) = t567*b00+t595*b01+t606*b02;
  hessian(2,6) = t131*b00+t245*b01+t325;
  hessian(2,7) = t406*b00+t483*b01+t540;
  hessian(2,8) = t577*b00+t606*b01+t625*b02;
  hessian(3,0) = t42*b10+t54*b11+t65*b12;
  hessian(3,1) = t632+t88*b11+t98*b12;
  hessian(3,2) = t636+t121*b11+t131*b12;
  hessian(3,3) = t54*b10+t144*b11+t155*b12;
  hessian(3,4) = t174*b10+t645+t211*b12;
  hessian(3,5) = t223*b10+t649+t245*b12;
  hessian(3,6) = t65*b10+t155*b11+t258*b12;
  hessian(3,7) = t270*b10+t280*b11+t658;
  hessian(3,8) = t303*b10+t313*b11+t662;
  hessian(4,0) = t632+t174*b11+t270*b12;
  hessian(4,1) = t339*b10+t357*b11+t367*b12;
  hessian(4,2) = t671+t396*b11+t406*b12;
  hessian(4,3) = t88*b10+t645+t280*b12;
  hessian(4,4) = t357*b10+t425*b11+t443*b12;
  hessian(4,5) = t454*b10+t683+t483*b12;
  hessian(4,6) = t98*b10+t211*b11+t658;
  hessian(4,7) = t367*b10+t443*b11+t499*b12;
  hessian(4,8) = t510*b10+t528*b11+t695;
  hessian(5,0) = t636+t223*b11+t303*b12;
  hessian(5,1) = t671+t454*b11+t510*b12;
  hessian(5,2) = t557*b10+t567*b11+t577*b12;
  hessian(5,3) = t121*b10+t649+t313*b12;
  hessian(5,4) = t396*b10+t683+t528*b12;
  hessian(5,5) = t567*b10+t595*b11+t606*b12;
  hessian(5,6) = t131*b10+t245*b11+t662;
  hessian(5,7) = t406*b10+t483*b11+t695;
  hessian(5,8) = t577*b10+t606*b11+t625*b12;
  hessian(6,0) = t42*b20+t54*b21+t65*b22;
  hessian(6,1) = t731+t88*b21+t98*b22;
  hessian(6,2) = t735+t121*b21+t131*b22;
  hessian(6,3) = t54*b20+t144*b21+t155*b22;
  hessian(6,4) = t174*b20+t744+t211*b22;
  hessian(6,5) = t223*b20+t748+t245*b22;
  hessian(6,6) = t65*b20+t155*b21+t258*b22;
  hessian(6,7) = t270*b20+t280*b21+t757;
  hessian(6,8) = t303*b20+t313*b21+t761;
  hessian(7,0) = t731+t174*b21+t270*b22;
  hessian(7,1) = t339*b20+t357*b21+t367*b22;
  hessian(7,2) = t770+t396*b21+t406*b22;
  hessian(7,3) = t88*b20+t744+t280*b22;
  hessian(7,4) = t357*b20+t425*b21+t443*b22;
  hessian(7,5) = t454*b20+t782+t483*b22;
  hessian(7,6) = t98*b20+t211*b21+t757;
  hessian(7,7) = t367*b20+t443*b21+t499*b22;
  hessian(7,8) = t510*b20+t528*b21+t794;
  hessian(8,0) = t735+t223*b21+t303*b22;
  hessian(8,1) = t770+t454*b21+t510*b22;
  hessian(8,2) = t557*b20+t567*b21+t577*b22;
  hessian(8,3) = t121*b20+t748+t313*b22;
  hessian(8,4) = t396*b20+t782+t528*b22;
  hessian(8,5) = t567*b20+t595*b21+t606*b22;
  hessian(8,6) = t131*b20+t245*b21+t761;
  hessian(8,7) = t406*b20+t483*b21+t794;
  hessian(8,8) = t577*b20+t606*b21+t625*b22;
  hessian(9,0) = t42*b30+t54*b31+t65*b32;
  hessian(9,1) = t830+t88*b31+t98*b32;
  hessian(9,2) = t834+t121*b31+t131*b32;
  hessian(9,3) = t54*b30+t144*b31+t155*b32;
  hessian(9,4) = t174*b30+t843+t211*b32;
  hessian(9,5) = t223*b30+t847+t245*b32;
  hessian(9,6) = t65*b30+t155*b31+t258*b32;
  hessian(9,7) = t270*b30+t280*b31+t856;
  hessian(9,8) = t303*b30+t313*b31+t860;
  hessian(10,0) = t830+t174*b31+t270*b32;
  hessian(10,1) = t339*b30+t357*b31+t367*b32;
  hessian(10,2) = t869+t396*b31+t406*b32;
  hessian(10,3) = t88*b30+t843+t280*b32;
  hessian(10,4) = t357*b30+t425*b31+t443*b32;
  hessian(10,5) = t454*b30+t881+t483*b32;
  hessian(10,6) = t98*b30+t211*b31+t856;
  hessian(10,7) = t367*b30+t443*b31+t499*b32;
  hessian(10,8) = t510*b30+t528*b31+t893;
  hessian(11,0) = t834+t223*b31+t303*b32;
  hessian(11,1) = t869+t454*b31+t510*b32;
  hessian(11,2) = t557*b30+t567*b31+t577*b32;
  hessian(11,3) = t121*b30+t847+t313*b32;
  hessian(11,4) = t396*b30+t881+t528*b32;
  hessian(11,5) = t567*b30+t595*b31+t606*b32;
  hessian(11,6) = t131*b30+t245*b31+t860;
  hessian(11,7) = t406*b30+t483*b31+t893;
  hessian(11,8) = t577*b30+t606*b31+t625*b32;
 
 
}

void ARRUDA_BOYCE::hessian5(const Real* F, const VEC3F* b, MATRIX& hessian) {
  const double N = _Nconst;
  const double nkTheta = _nkTheta;
  const double b00 = b[0][0];
  const double b01 = b[0][1];
  const double b02 = b[0][2];
  const double b10 = b[1][0];
  const double b11 = b[1][1];
  const double b12 = b[1][2];
  const double b20 = b[2][0];
  const double b21 = b[2][1];
  const double b22 = b[2][2];
  const double b30 = b[3][0];
  const double b31 = b[3][1];
  const double b32 = b[3][2]; 

 
  Real t1 = 1/N;
  Real t2 = t1*F[5];
  Real t3 = 2.0/5.0*t2;
  Real t4 = N*N;
  Real t5 = 1/t4;
  Real t6 = t5*F[5];
  Real t7 = F[0]*F[0];
  Real t10 = F[1]*F[1];
  Real t11 = F[2]*F[2];
  Real t12 = F[3]*F[3];
  Real t13 = F[4]*F[4];
  Real t14 = F[5]*F[5];
  Real t15 = F[6]*F[6];
  Real t16 = F[7]*F[7];
  Real t17 = F[8]*F[8];
  Real t18 = t7+t10+t11+t12+t13+t14+t15+t16+t17;
  Real t19 = t5*t18;
  Real t20 = t19*F[5];
  Real t21 = 44.0/175.0*t20;
  Real t23 = 1/t4/N;
  Real t24 = t23*t18;
  Real t25 = t7*F[5];
  Real t28 = t18*t18;
  Real t29 = t23*t28;
  Real t30 = t29*F[5];
  Real t31 = 114.0/875.0*t30;
  Real t32 = t4*t4;
  Real t33 = 1/t32;
  Real t34 = t33*t28;
  Real t38 = t33*t28*t18;
  Real t39 = t38*F[5];
  Real t40 = 4152.0/67375.0*t39;
  Real t42 = nkTheta*(t3+88.0/175.0*t6*t7+t21+456.0/875.0*t24*t25+t31+24912.0/67375.0*t34*t25+t40);
  Real t44 = t5*F[0];
  Real t45 = F[3]*F[5];
  Real t48 = t45*F[0];
  Real t54 = nkTheta*(88.0/175.0*t44*t45+456.0/875.0*t24*t48+24912.0/67375.0*t34*t48);
  Real t56 = F[6]*F[0];
  Real t59 = t56*F[5];
  Real t65 = nkTheta*(88.0/175.0*t6*t56+456.0/875.0*t24*t59+24912.0/67375.0*t34*t59);
  Real t68 = F[0]*F[1];
  Real t71 = t68*F[5];
  Real t77 = nkTheta*(88.0/175.0*t6*t68+456.0/875.0*t24*t71+24912.0/67375.0*t34*t71);
  Real t78 = t77*b00;
  Real t79 = t5*F[1];
  Real t82 = t45*F[1];
  Real t88 = nkTheta*(88.0/175.0*t79*t45+456.0/875.0*t24*t82+24912.0/67375.0*t34*t82);
  Real t90 = F[6]*F[1];
  Real t93 = t90*F[5];
  Real t99 = nkTheta*(88.0/175.0*t6*t90+456.0/875.0*t24*t93+24912.0/67375.0*t34*t93);
  Real t102 = F[5]*F[2];
  Real t105 = t102*F[0];
  Real t111 = nkTheta*(88.0/175.0*t44*t102+456.0/875.0*t24*t105+24912.0/67375.0*t34*t105);
  Real t112 = t111*b00;
  Real t113 = t5*F[2];
  Real t116 = t45*F[2];
  Real t122 = nkTheta*(88.0/175.0*t113*t45+456.0/875.0*t24*t116+24912.0/67375.0*t34*t116);
  Real t124 = F[6]*F[5];
  Real t127 = t124*F[2];
  Real t133 = nkTheta*(88.0/175.0*t113*t124+456.0/875.0*t24*t127+24912.0/67375.0*t34*t127);
  Real t140 = t12*F[5];
  Real t146 = nkTheta*(t3+88.0/175.0*t5*t12*F[5]+t21+456.0/875.0*t24*t140+t31+24912.0/67375.0*t34*t140+t40);
  Real t148 = t5*F[3];
  Real t151 = t124*F[3];
  Real t157 = nkTheta*(88.0/175.0*t148*t124+456.0/875.0*t24*t151+24912.0/67375.0*t34*t151);
  Real t160 = F[4]*F[5];
  Real t163 = t160*F[0];
  Real t169 = nkTheta*(88.0/175.0*t44*t160+456.0/875.0*t24*t163+24912.0/67375.0*t34*t163);
  Real t173 = t160*F[3];
  Real t179 = nkTheta*(88.0/175.0*t148*t160+456.0/875.0*t24*t173+24912.0/67375.0*t34*t173);
  Real t180 = t179*b01;
  Real t181 = t5*F[4];
  Real t184 = t124*F[4];
  Real t190 = nkTheta*(88.0/175.0*t181*t124+456.0/875.0*t24*t184+24912.0/67375.0*t34*t184);
  Real t195 = t5*t14;
  Real t200 = F[0]*t14;
  Real t210 = nkTheta*(2.0/5.0*t1*F[0]+88.0/175.0*t195*F[0]+44.0/175.0*t19*F[0]+456.0/875.0*t24*t200+114.0/875.0*t29*F[0]+24912.0/67375.0*t34*t200+4152.0/67375.0*t38*F[0]);
  Real t218 = t14*F[3];
  Real t228 = nkTheta*(2.0/5.0*t1*F[3]+88.0/175.0*t148*t14+44.0/175.0*t19*F[3]+456.0/875.0*t24*t218+114.0/875.0*t29*F[3]+24912.0/67375.0*t34*t218+4152.0/67375.0*t38*F[3]);
  Real t229 = t228*b01;
  Real t236 = F[6]*t14;
  Real t246 = nkTheta*(2.0/5.0*t1*F[6]+88.0/175.0*t195*F[6]+44.0/175.0*t19*F[6]+456.0/875.0*t24*t236+114.0/875.0*t29*F[6]+24912.0/67375.0*t34*t236+4152.0/67375.0*t38*F[6]);
  Real t253 = t15*F[5];
  Real t259 = nkTheta*(t3+88.0/175.0*t6*t15+t21+456.0/875.0*t24*t253+t31+24912.0/67375.0*t34*t253+t40);
  Real t262 = F[0]*F[7];
  Real t265 = t262*F[5];
  Real t271 = nkTheta*(88.0/175.0*t6*t262+456.0/875.0*t24*t265+24912.0/67375.0*t34*t265);
  Real t273 = F[7]*F[5];
  Real t276 = t273*F[3];
  Real t282 = nkTheta*(88.0/175.0*t148*t273+456.0/875.0*t24*t276+24912.0/67375.0*t34*t276);
  Real t284 = F[6]*F[7];
  Real t287 = t284*F[5];
  Real t293 = nkTheta*(88.0/175.0*t6*t284+456.0/875.0*t24*t287+24912.0/67375.0*t34*t287);
  Real t294 = t293*b02;
  Real t296 = F[0]*F[8];
  Real t299 = t296*F[5];
  Real t305 = nkTheta*(88.0/175.0*t6*t296+456.0/875.0*t24*t299+24912.0/67375.0*t34*t299);
  Real t307 = F[8]*F[5];
  Real t310 = t307*F[3];
  Real t316 = nkTheta*(88.0/175.0*t148*t307+456.0/875.0*t24*t310+24912.0/67375.0*t34*t310);
  Real t318 = F[6]*F[8];
  Real t321 = t318*F[5];
  Real t327 = nkTheta*(88.0/175.0*t6*t318+456.0/875.0*t24*t321+24912.0/67375.0*t34*t321);
  Real t328 = t327*b02;
  Real t335 = t10*F[5];
  Real t341 = nkTheta*(t3+88.0/175.0*t6*t10+t21+456.0/875.0*t24*t335+t31+24912.0/67375.0*t34*t335+t40);
  Real t345 = t160*F[1];
  Real t351 = nkTheta*(88.0/175.0*t79*t160+456.0/875.0*t24*t345+24912.0/67375.0*t34*t345);
  Real t353 = F[7]*F[1];
  Real t356 = t353*F[5];
  Real t362 = nkTheta*(88.0/175.0*t6*t353+456.0/875.0*t24*t356+24912.0/67375.0*t34*t356);
  Real t367 = t102*F[1];
  Real t373 = nkTheta*(88.0/175.0*t79*t102+456.0/875.0*t24*t367+24912.0/67375.0*t34*t367);
  Real t374 = t373*b00;
  Real t377 = t160*F[2];
  Real t383 = nkTheta*(88.0/175.0*t113*t160+456.0/875.0*t24*t377+24912.0/67375.0*t34*t377);
  Real t387 = t273*F[2];
  Real t393 = nkTheta*(88.0/175.0*t113*t273+456.0/875.0*t24*t387+24912.0/67375.0*t34*t387);
  Real t403 = t13*F[5];
  Real t409 = nkTheta*(t3+88.0/175.0*t5*t13*F[5]+t21+456.0/875.0*t24*t403+t31+24912.0/67375.0*t34*t403+t40);
  Real t413 = t273*F[4];
  Real t419 = nkTheta*(88.0/175.0*t181*t273+456.0/875.0*t24*t413+24912.0/67375.0*t34*t413);
  Real t428 = F[1]*t14;
  Real t438 = nkTheta*(2.0/5.0*t1*F[1]+88.0/175.0*t195*F[1]+44.0/175.0*t19*F[1]+456.0/875.0*t24*t428+114.0/875.0*t29*F[1]+24912.0/67375.0*t34*t428+4152.0/67375.0*t38*F[1]);
  Real t446 = t14*F[4];
  Real t456 = nkTheta*(2.0/5.0*t1*F[4]+88.0/175.0*t181*t14+44.0/175.0*t19*F[4]+456.0/875.0*t24*t446+114.0/875.0*t29*F[4]+24912.0/67375.0*t34*t446+4152.0/67375.0*t38*F[4]);
  Real t457 = t456*b01;
  Real t464 = F[7]*t14;
  Real t474 = nkTheta*(2.0/5.0*t1*F[7]+88.0/175.0*t195*F[7]+44.0/175.0*t19*F[7]+456.0/875.0*t24*t464+114.0/875.0*t29*F[7]+24912.0/67375.0*t34*t464+4152.0/67375.0*t38*F[7]);
  Real t484 = t16*F[5];
  Real t490 = nkTheta*(t3+88.0/175.0*t6*t16+t21+456.0/875.0*t24*t484+t31+24912.0/67375.0*t34*t484+t40);
  Real t493 = F[1]*F[8];
  Real t496 = t493*F[5];
  Real t502 = nkTheta*(88.0/175.0*t6*t493+456.0/875.0*t24*t496+24912.0/67375.0*t34*t496);
  Real t506 = t307*F[4];
  Real t512 = nkTheta*(88.0/175.0*t181*t307+456.0/875.0*t24*t506+24912.0/67375.0*t34*t506);
  Real t514 = F[7]*F[8];
  Real t517 = t514*F[5];
  Real t523 = nkTheta*(88.0/175.0*t6*t514+456.0/875.0*t24*t517+24912.0/67375.0*t34*t517);
  Real t524 = t523*b02;
  Real t535 = F[5]*t11;
  Real t541 = nkTheta*(t3+88.0/175.0*t5*t11*F[5]+t21+456.0/875.0*t24*t535+t31+24912.0/67375.0*t34*t535+t40);
  Real t549 = t14*F[2];
  Real t559 = nkTheta*(2.0/5.0*t1*F[2]+88.0/175.0*t113*t14+44.0/175.0*t19*F[2]+456.0/875.0*t24*t549+114.0/875.0*t29*F[2]+24912.0/67375.0*t34*t549+4152.0/67375.0*t38*F[2]);
  Real t563 = t307*F[2];
  Real t569 = nkTheta*(88.0/175.0*t113*t307+456.0/875.0*t24*t563+24912.0/67375.0*t34*t563);
  Real t580 = t14*F[5];
  Real t591 = nkTheta*(6.0/5.0*t2+88.0/175.0*t5*t580+132.0/175.0*t20+456.0/875.0*t24*t580+342.0/875.0*t30+24912.0/67375.0*t34*t580+12456.0/67375.0*t39);
  Real t599 = F[8]*t14;
  Real t609 = nkTheta*(2.0/5.0*t1*F[8]+88.0/175.0*t195*F[8]+44.0/175.0*t19*F[8]+456.0/875.0*t24*t599+114.0/875.0*t29*F[8]+24912.0/67375.0*t34*t599+4152.0/67375.0*t38*F[8]);
  Real t622 = t17*F[5];
  Real t628 = nkTheta*(t3+88.0/175.0*t6*t17+t21+456.0/875.0*t24*t622+t31+24912.0/67375.0*t34*t622+t40);
  Real t635 = t77*b10;
  Real t639 = t111*b10;
  Real t648 = t179*b11;
  Real t652 = t228*b11;
  Real t661 = t293*b12;
  Real t665 = t327*b12;
  Real t674 = t373*b10;
  Real t686 = t456*b11;
  Real t698 = t523*b12;
  Real t734 = t77*b20;
  Real t738 = t111*b20;
  Real t747 = t179*b21;
  Real t751 = t228*b21;
  Real t760 = t293*b22;
  Real t764 = t327*b22;
  Real t773 = t373*b20;
  Real t785 = t456*b21;
  Real t797 = t523*b22;
  Real t833 = t77*b30;
  Real t837 = t111*b30;
  Real t846 = t179*b31;
  Real t850 = t228*b31;
  Real t859 = t293*b32;
  Real t863 = t327*b32;
  Real t872 = t373*b30;
  Real t884 = t456*b31;
  Real t896 = t523*b32;
  hessian(0,0) = t42*b00+t54*b01+t65*b02;
  hessian(0,1) = t78+t88*b01+t99*b02;
  hessian(0,2) = t112+t122*b01+t133*b02;
  hessian(0,3) = t54*b00+t146*b01+t157*b02;
  hessian(0,4) = t169*b00+t180+t190*b02;
  hessian(0,5) = t210*b00+t229+t246*b02;
  hessian(0,6) = t65*b00+t157*b01+t259*b02;
  hessian(0,7) = t271*b00+t282*b01+t294;
  hessian(0,8) = t305*b00+t316*b01+t328;
  hessian(1,0) = t78+t169*b01+t271*b02;
  hessian(1,1) = t341*b00+t351*b01+t362*b02;
  hessian(1,2) = t374+t383*b01+t393*b02;
  hessian(1,3) = t88*b00+t180+t282*b02;
  hessian(1,4) = t351*b00+t409*b01+t419*b02;
  hessian(1,5) = t438*b00+t457+t474*b02;
  hessian(1,6) = t99*b00+t190*b01+t294;
  hessian(1,7) = t362*b00+t419*b01+t490*b02;
  hessian(1,8) = t502*b00+t512*b01+t524;
  hessian(2,0) = t112+t210*b01+t305*b02;
  hessian(2,1) = t374+t438*b01+t502*b02;
  hessian(2,2) = t541*b00+t559*b01+t569*b02;
  hessian(2,3) = t122*b00+t229+t316*b02;
  hessian(2,4) = t383*b00+t457+t512*b02;
  hessian(2,5) = t559*b00+t591*b01+t609*b02;
  hessian(2,6) = t133*b00+t246*b01+t328;
  hessian(2,7) = t393*b00+t474*b01+t524;
  hessian(2,8) = t569*b00+t609*b01+t628*b02;
  hessian(3,0) = t42*b10+t54*b11+t65*b12;
  hessian(3,1) = t635+t88*b11+t99*b12;
  hessian(3,2) = t639+t122*b11+t133*b12;
  hessian(3,3) = t54*b10+t146*b11+t157*b12;
  hessian(3,4) = t169*b10+t648+t190*b12;
  hessian(3,5) = t210*b10+t652+t246*b12;
  hessian(3,6) = t65*b10+t157*b11+t259*b12;
  hessian(3,7) = t271*b10+t282*b11+t661;
  hessian(3,8) = t305*b10+t316*b11+t665;
  hessian(4,0) = t635+t169*b11+t271*b12;
  hessian(4,1) = t341*b10+t351*b11+t362*b12;
  hessian(4,2) = t674+t383*b11+t393*b12;
  hessian(4,3) = t88*b10+t648+t282*b12;
  hessian(4,4) = t351*b10+t409*b11+t419*b12;
  hessian(4,5) = t438*b10+t686+t474*b12;
  hessian(4,6) = t99*b10+t190*b11+t661;
  hessian(4,7) = t362*b10+t419*b11+t490*b12;
  hessian(4,8) = t502*b10+t512*b11+t698;
  hessian(5,0) = t639+t210*b11+t305*b12;
  hessian(5,1) = t674+t438*b11+t502*b12;
  hessian(5,2) = t541*b10+t559*b11+t569*b12;
  hessian(5,3) = t122*b10+t652+t316*b12;
  hessian(5,4) = t383*b10+t686+t512*b12;
  hessian(5,5) = t559*b10+t591*b11+t609*b12;
  hessian(5,6) = t133*b10+t246*b11+t665;
  hessian(5,7) = t393*b10+t474*b11+t698;
  hessian(5,8) = t569*b10+t609*b11+t628*b12;
  hessian(6,0) = t42*b20+t54*b21+t65*b22;
  hessian(6,1) = t734+t88*b21+t99*b22;
  hessian(6,2) = t738+t122*b21+t133*b22;
  hessian(6,3) = t54*b20+t146*b21+t157*b22;
  hessian(6,4) = t169*b20+t747+t190*b22;
  hessian(6,5) = t210*b20+t751+t246*b22;
  hessian(6,6) = t65*b20+t157*b21+t259*b22;
  hessian(6,7) = t271*b20+t282*b21+t760;
  hessian(6,8) = t305*b20+t316*b21+t764;
  hessian(7,0) = t734+t169*b21+t271*b22;
  hessian(7,1) = t341*b20+t351*b21+t362*b22;
  hessian(7,2) = t773+t383*b21+t393*b22;
  hessian(7,3) = t88*b20+t747+t282*b22;
  hessian(7,4) = t351*b20+t409*b21+t419*b22;
  hessian(7,5) = t438*b20+t785+t474*b22;
  hessian(7,6) = t99*b20+t190*b21+t760;
  hessian(7,7) = t362*b20+t419*b21+t490*b22;
  hessian(7,8) = t502*b20+t512*b21+t797;
  hessian(8,0) = t738+t210*b21+t305*b22;
  hessian(8,1) = t773+t438*b21+t502*b22;
  hessian(8,2) = t541*b20+t559*b21+t569*b22;
  hessian(8,3) = t122*b20+t751+t316*b22;
  hessian(8,4) = t383*b20+t785+t512*b22;
  hessian(8,5) = t559*b20+t591*b21+t609*b22;
  hessian(8,6) = t133*b20+t246*b21+t764;
  hessian(8,7) = t393*b20+t474*b21+t797;
  hessian(8,8) = t569*b20+t609*b21+t628*b22;
  hessian(9,0) = t42*b30+t54*b31+t65*b32;
  hessian(9,1) = t833+t88*b31+t99*b32;
  hessian(9,2) = t837+t122*b31+t133*b32;
  hessian(9,3) = t54*b30+t146*b31+t157*b32;
  hessian(9,4) = t169*b30+t846+t190*b32;
  hessian(9,5) = t210*b30+t850+t246*b32;
  hessian(9,6) = t65*b30+t157*b31+t259*b32;
  hessian(9,7) = t271*b30+t282*b31+t859;
  hessian(9,8) = t305*b30+t316*b31+t863;
  hessian(10,0) = t833+t169*b31+t271*b32;
  hessian(10,1) = t341*b30+t351*b31+t362*b32;
  hessian(10,2) = t872+t383*b31+t393*b32;
  hessian(10,3) = t88*b30+t846+t282*b32;
  hessian(10,4) = t351*b30+t409*b31+t419*b32;
  hessian(10,5) = t438*b30+t884+t474*b32;
  hessian(10,6) = t99*b30+t190*b31+t859;
  hessian(10,7) = t362*b30+t419*b31+t490*b32;
  hessian(10,8) = t502*b30+t512*b31+t896;
  hessian(11,0) = t837+t210*b31+t305*b32;
  hessian(11,1) = t872+t438*b31+t502*b32;
  hessian(11,2) = t541*b30+t559*b31+t569*b32;
  hessian(11,3) = t122*b30+t850+t316*b32;
  hessian(11,4) = t383*b30+t884+t512*b32;
  hessian(11,5) = t559*b30+t591*b31+t609*b32;
  hessian(11,6) = t133*b30+t246*b31+t863;
  hessian(11,7) = t393*b30+t474*b31+t896;
  hessian(11,8) = t569*b30+t609*b31+t628*b32;
 
 
}

void ARRUDA_BOYCE::hessian6(const Real* F, const VEC3F* b, MATRIX& hessian) {
  const double N = _Nconst;
  const double nkTheta = _nkTheta;
  const double b00 = b[0][0];
  const double b01 = b[0][1];
  const double b02 = b[0][2];
  const double b10 = b[1][0];
  const double b11 = b[1][1];
  const double b12 = b[1][2];
  const double b20 = b[2][0];
  const double b21 = b[2][1];
  const double b22 = b[2][2];
  const double b30 = b[3][0];
  const double b31 = b[3][1];
  const double b32 = b[3][2]; 

 
  Real t1 = 1/N;
  Real t2 = t1*F[6];
  Real t3 = 2.0/5.0*t2;
  Real t4 = N*N;
  Real t5 = 1/t4;
  Real t6 = t5*F[6];
  Real t7 = F[0]*F[0];
  Real t10 = F[1]*F[1];
  Real t11 = F[2]*F[2];
  Real t12 = F[3]*F[3];
  Real t13 = F[4]*F[4];
  Real t14 = F[5]*F[5];
  Real t15 = F[6]*F[6];
  Real t16 = F[7]*F[7];
  Real t17 = F[8]*F[8];
  Real t18 = t7+t10+t11+t12+t13+t14+t15+t16+t17;
  Real t19 = t5*t18;
  Real t20 = t19*F[6];
  Real t21 = 44.0/175.0*t20;
  Real t23 = 1/t4/N;
  Real t24 = t23*t18;
  Real t25 = t7*F[6];
  Real t28 = t18*t18;
  Real t29 = t23*t28;
  Real t30 = t29*F[6];
  Real t31 = 114.0/875.0*t30;
  Real t32 = t4*t4;
  Real t33 = 1/t32;
  Real t34 = t33*t28;
  Real t38 = t33*t28*t18;
  Real t39 = t38*F[6];
  Real t40 = 4152.0/67375.0*t39;
  Real t42 = nkTheta*(t3+88.0/175.0*t6*t7+t21+456.0/875.0*t24*t25+t31+24912.0/67375.0*t34*t25+t40);
  Real t44 = t5*F[0];
  Real t45 = F[6]*F[3];
  Real t48 = t45*F[0];
  Real t54 = nkTheta*(88.0/175.0*t44*t45+456.0/875.0*t24*t48+24912.0/67375.0*t34*t48);
  Real t58 = t5*t15;
  Real t63 = t15*F[0];
  Real t73 = nkTheta*(2.0/5.0*t1*F[0]+88.0/175.0*t58*F[0]+44.0/175.0*t19*F[0]+456.0/875.0*t24*t63+114.0/875.0*t29*F[0]+24912.0/67375.0*t34*t63+4152.0/67375.0*t38*F[0]);
  Real t76 = F[0]*F[1];
  Real t79 = t76*F[6];
  Real t85 = nkTheta*(88.0/175.0*t6*t76+456.0/875.0*t24*t79+24912.0/67375.0*t34*t79);
  Real t86 = t85*b00;
  Real t87 = t5*F[1];
  Real t90 = t45*F[1];
  Real t96 = nkTheta*(88.0/175.0*t87*t45+456.0/875.0*t24*t90+24912.0/67375.0*t34*t90);
  Real t104 = t15*F[1];
  Real t114 = nkTheta*(2.0/5.0*t1*F[1]+88.0/175.0*t58*F[1]+44.0/175.0*t19*F[1]+456.0/875.0*t24*t104+114.0/875.0*t29*F[1]+24912.0/67375.0*t34*t104+4152.0/67375.0*t38*F[1]);
  Real t117 = F[6]*F[2];
  Real t120 = t117*F[0];
  Real t126 = nkTheta*(88.0/175.0*t44*t117+456.0/875.0*t24*t120+24912.0/67375.0*t34*t120);
  Real t127 = t126*b00;
  Real t128 = t5*F[2];
  Real t131 = t45*F[2];
  Real t137 = nkTheta*(88.0/175.0*t128*t45+456.0/875.0*t24*t131+24912.0/67375.0*t34*t131);
  Real t145 = t15*F[2];
  Real t155 = nkTheta*(2.0/5.0*t1*F[2]+88.0/175.0*t128*t15+44.0/175.0*t19*F[2]+456.0/875.0*t24*t145+114.0/875.0*t29*F[2]+24912.0/67375.0*t34*t145+4152.0/67375.0*t38*F[2]);
  Real t162 = F[6]*t12;
  Real t168 = nkTheta*(t3+88.0/175.0*t5*t12*F[6]+t21+456.0/875.0*t24*t162+t31+24912.0/67375.0*t34*t162+t40);
  Real t172 = t5*F[3];
  Real t177 = t15*F[3];
  Real t187 = nkTheta*(2.0/5.0*t1*F[3]+88.0/175.0*t172*t15+44.0/175.0*t19*F[3]+456.0/875.0*t24*t177+114.0/875.0*t29*F[3]+24912.0/67375.0*t34*t177+4152.0/67375.0*t38*F[3]);
  Real t190 = F[6]*F[4];
  Real t193 = t190*F[0];
  Real t199 = nkTheta*(88.0/175.0*t44*t190+456.0/875.0*t24*t193+24912.0/67375.0*t34*t193);
  Real t203 = t190*F[3];
  Real t209 = nkTheta*(88.0/175.0*t172*t190+456.0/875.0*t24*t203+24912.0/67375.0*t34*t203);
  Real t210 = t209*b01;
  Real t213 = t5*F[4];
  Real t218 = t15*F[4];
  Real t228 = nkTheta*(2.0/5.0*t1*F[4]+88.0/175.0*t213*t15+44.0/175.0*t19*F[4]+456.0/875.0*t24*t218+114.0/875.0*t29*F[4]+24912.0/67375.0*t34*t218+4152.0/67375.0*t38*F[4]);
  Real t231 = t5*F[5];
  Real t232 = F[6]*F[0];
  Real t235 = t232*F[5];
  Real t241 = nkTheta*(88.0/175.0*t231*t232+456.0/875.0*t24*t235+24912.0/67375.0*t34*t235);
  Real t243 = F[6]*F[5];
  Real t246 = t243*F[3];
  Real t252 = nkTheta*(88.0/175.0*t172*t243+456.0/875.0*t24*t246+24912.0/67375.0*t34*t246);
  Real t253 = t252*b01;
  Real t260 = t15*F[5];
  Real t270 = nkTheta*(2.0/5.0*t1*F[5]+88.0/175.0*t231*t15+44.0/175.0*t19*F[5]+456.0/875.0*t24*t260+114.0/875.0*t29*F[5]+24912.0/67375.0*t34*t260+4152.0/67375.0*t38*F[5]);
  Real t276 = t15*F[6];
  Real t287 = nkTheta*(6.0/5.0*t2+88.0/175.0*t5*t276+132.0/175.0*t20+456.0/875.0*t24*t276+342.0/875.0*t30+24912.0/67375.0*t34*t276+12456.0/67375.0*t39);
  Real t290 = F[0]*F[7];
  Real t293 = t290*F[6];
  Real t299 = nkTheta*(88.0/175.0*t6*t290+456.0/875.0*t24*t293+24912.0/67375.0*t34*t293);
  Real t301 = F[6]*F[7];
  Real t304 = t301*F[3];
  Real t310 = nkTheta*(88.0/175.0*t172*t301+456.0/875.0*t24*t304+24912.0/67375.0*t34*t304);
  Real t318 = t15*F[7];
  Real t328 = nkTheta*(2.0/5.0*t1*F[7]+88.0/175.0*t58*F[7]+44.0/175.0*t19*F[7]+456.0/875.0*t24*t318+114.0/875.0*t29*F[7]+24912.0/67375.0*t34*t318+4152.0/67375.0*t38*F[7]);
  Real t329 = t328*b02;
  Real t331 = F[0]*F[8];
  Real t334 = t331*F[6];
  Real t340 = nkTheta*(88.0/175.0*t6*t331+456.0/875.0*t24*t334+24912.0/67375.0*t34*t334);
  Real t342 = F[6]*F[8];
  Real t345 = t342*F[3];
  Real t351 = nkTheta*(88.0/175.0*t172*t342+456.0/875.0*t24*t345+24912.0/67375.0*t34*t345);
  Real t359 = t15*F[8];
  Real t369 = nkTheta*(2.0/5.0*t1*F[8]+88.0/175.0*t58*F[8]+44.0/175.0*t19*F[8]+456.0/875.0*t24*t359+114.0/875.0*t29*F[8]+24912.0/67375.0*t34*t359+4152.0/67375.0*t38*F[8]);
  Real t370 = t369*b02;
  Real t377 = t10*F[6];
  Real t383 = nkTheta*(t3+88.0/175.0*t6*t10+t21+456.0/875.0*t24*t377+t31+24912.0/67375.0*t34*t377+t40);
  Real t387 = t190*F[1];
  Real t393 = nkTheta*(88.0/175.0*t87*t190+456.0/875.0*t24*t387+24912.0/67375.0*t34*t387);
  Real t395 = F[7]*F[1];
  Real t398 = t395*F[6];
  Real t404 = nkTheta*(88.0/175.0*t6*t395+456.0/875.0*t24*t398+24912.0/67375.0*t34*t398);
  Real t409 = t117*F[1];
  Real t415 = nkTheta*(88.0/175.0*t87*t117+456.0/875.0*t24*t409+24912.0/67375.0*t34*t409);
  Real t416 = t415*b00;
  Real t419 = t190*F[2];
  Real t425 = nkTheta*(88.0/175.0*t128*t190+456.0/875.0*t24*t419+24912.0/67375.0*t34*t419);
  Real t429 = t301*F[2];
  Real t435 = nkTheta*(88.0/175.0*t128*t301+456.0/875.0*t24*t429+24912.0/67375.0*t34*t429);
  Real t445 = F[6]*t13;
  Real t451 = nkTheta*(t3+88.0/175.0*t5*t13*F[6]+t21+456.0/875.0*t24*t445+t31+24912.0/67375.0*t34*t445+t40);
  Real t455 = t301*F[4];
  Real t461 = nkTheta*(88.0/175.0*t213*t301+456.0/875.0*t24*t455+24912.0/67375.0*t34*t455);
  Real t464 = F[6]*F[1];
  Real t467 = t464*F[5];
  Real t473 = nkTheta*(88.0/175.0*t231*t464+456.0/875.0*t24*t467+24912.0/67375.0*t34*t467);
  Real t477 = t243*F[4];
  Real t483 = nkTheta*(88.0/175.0*t213*t243+456.0/875.0*t24*t477+24912.0/67375.0*t34*t477);
  Real t484 = t483*b01;
  Real t487 = t301*F[5];
  Real t493 = nkTheta*(88.0/175.0*t231*t301+456.0/875.0*t24*t487+24912.0/67375.0*t34*t487);
  Real t503 = t16*F[6];
  Real t509 = nkTheta*(t3+88.0/175.0*t6*t16+t21+456.0/875.0*t24*t503+t31+24912.0/67375.0*t34*t503+t40);
  Real t512 = F[1]*F[8];
  Real t515 = t512*F[6];
  Real t521 = nkTheta*(88.0/175.0*t6*t512+456.0/875.0*t24*t515+24912.0/67375.0*t34*t515);
  Real t525 = t342*F[4];
  Real t531 = nkTheta*(88.0/175.0*t213*t342+456.0/875.0*t24*t525+24912.0/67375.0*t34*t525);
  Real t533 = F[7]*F[8];
  Real t536 = t533*F[6];
  Real t542 = nkTheta*(88.0/175.0*t6*t533+456.0/875.0*t24*t536+24912.0/67375.0*t34*t536);
  Real t543 = t542*b02;
  Real t554 = F[6]*t11;
  Real t560 = nkTheta*(t3+88.0/175.0*t5*t11*F[6]+t21+456.0/875.0*t24*t554+t31+24912.0/67375.0*t34*t554+t40);
  Real t564 = t243*F[2];
  Real t570 = nkTheta*(88.0/175.0*t128*t243+456.0/875.0*t24*t564+24912.0/67375.0*t34*t564);
  Real t574 = t342*F[2];
  Real t580 = nkTheta*(88.0/175.0*t128*t342+456.0/875.0*t24*t574+24912.0/67375.0*t34*t574);
  Real t593 = F[6]*t14;
  Real t599 = nkTheta*(t3+88.0/175.0*t5*t14*F[6]+t21+456.0/875.0*t24*t593+t31+24912.0/67375.0*t34*t593+t40);
  Real t603 = t342*F[5];
  Real t609 = nkTheta*(88.0/175.0*t231*t342+456.0/875.0*t24*t603+24912.0/67375.0*t34*t603);
  Real t622 = t17*F[6];
  Real t628 = nkTheta*(t3+88.0/175.0*t6*t17+t21+456.0/875.0*t24*t622+t31+24912.0/67375.0*t34*t622+t40);
  Real t635 = t85*b10;
  Real t639 = t126*b10;
  Real t648 = t209*b11;
  Real t652 = t252*b11;
  Real t661 = t328*b12;
  Real t665 = t369*b12;
  Real t674 = t415*b10;
  Real t686 = t483*b11;
  Real t698 = t542*b12;
  Real t734 = t85*b20;
  Real t738 = t126*b20;
  Real t747 = t209*b21;
  Real t751 = t252*b21;
  Real t760 = t328*b22;
  Real t764 = t369*b22;
  Real t773 = t415*b20;
  Real t785 = t483*b21;
  Real t797 = t542*b22;
  Real t833 = t85*b30;
  Real t837 = t126*b30;
  Real t846 = t209*b31;
  Real t850 = t252*b31;
  Real t859 = t328*b32;
  Real t863 = t369*b32;
  Real t872 = t415*b30;
  Real t884 = t483*b31;
  Real t896 = t542*b32;
  hessian(0,0) = t42*b00+t54*b01+t73*b02;
  hessian(0,1) = t86+t96*b01+t114*b02;
  hessian(0,2) = t127+t137*b01+t155*b02;
  hessian(0,3) = t54*b00+t168*b01+t187*b02;
  hessian(0,4) = t199*b00+t210+t228*b02;
  hessian(0,5) = t241*b00+t253+t270*b02;
  hessian(0,6) = t73*b00+t187*b01+t287*b02;
  hessian(0,7) = t299*b00+t310*b01+t329;
  hessian(0,8) = t340*b00+t351*b01+t370;
  hessian(1,0) = t86+t199*b01+t299*b02;
  hessian(1,1) = t383*b00+t393*b01+t404*b02;
  hessian(1,2) = t416+t425*b01+t435*b02;
  hessian(1,3) = t96*b00+t210+t310*b02;
  hessian(1,4) = t393*b00+t451*b01+t461*b02;
  hessian(1,5) = t473*b00+t484+t493*b02;
  hessian(1,6) = t114*b00+t228*b01+t329;
  hessian(1,7) = t404*b00+t461*b01+t509*b02;
  hessian(1,8) = t521*b00+t531*b01+t543;
  hessian(2,0) = t127+t241*b01+t340*b02;
  hessian(2,1) = t416+t473*b01+t521*b02;
  hessian(2,2) = t560*b00+t570*b01+t580*b02;
  hessian(2,3) = t137*b00+t253+t351*b02;
  hessian(2,4) = t425*b00+t484+t531*b02;
  hessian(2,5) = t570*b00+t599*b01+t609*b02;
  hessian(2,6) = t155*b00+t270*b01+t370;
  hessian(2,7) = t435*b00+t493*b01+t543;
  hessian(2,8) = t580*b00+t609*b01+t628*b02;
  hessian(3,0) = t42*b10+t54*b11+t73*b12;
  hessian(3,1) = t635+t96*b11+t114*b12;
  hessian(3,2) = t639+t137*b11+t155*b12;
  hessian(3,3) = t54*b10+t168*b11+t187*b12;
  hessian(3,4) = t199*b10+t648+t228*b12;
  hessian(3,5) = t241*b10+t652+t270*b12;
  hessian(3,6) = t73*b10+t187*b11+t287*b12;
  hessian(3,7) = t299*b10+t310*b11+t661;
  hessian(3,8) = t340*b10+t351*b11+t665;
  hessian(4,0) = t635+t199*b11+t299*b12;
  hessian(4,1) = t383*b10+t393*b11+t404*b12;
  hessian(4,2) = t674+t425*b11+t435*b12;
  hessian(4,3) = t96*b10+t648+t310*b12;
  hessian(4,4) = t393*b10+t451*b11+t461*b12;
  hessian(4,5) = t473*b10+t686+t493*b12;
  hessian(4,6) = t114*b10+t228*b11+t661;
  hessian(4,7) = t404*b10+t461*b11+t509*b12;
  hessian(4,8) = t521*b10+t531*b11+t698;
  hessian(5,0) = t639+t241*b11+t340*b12;
  hessian(5,1) = t674+t473*b11+t521*b12;
  hessian(5,2) = t560*b10+t570*b11+t580*b12;
  hessian(5,3) = t137*b10+t652+t351*b12;
  hessian(5,4) = t425*b10+t686+t531*b12;
  hessian(5,5) = t570*b10+t599*b11+t609*b12;
  hessian(5,6) = t155*b10+t270*b11+t665;
  hessian(5,7) = t435*b10+t493*b11+t698;
  hessian(5,8) = t580*b10+t609*b11+t628*b12;
  hessian(6,0) = t42*b20+t54*b21+t73*b22;
  hessian(6,1) = t734+t96*b21+t114*b22;
  hessian(6,2) = t738+t137*b21+t155*b22;
  hessian(6,3) = t54*b20+t168*b21+t187*b22;
  hessian(6,4) = t199*b20+t747+t228*b22;
  hessian(6,5) = t241*b20+t751+t270*b22;
  hessian(6,6) = t73*b20+t187*b21+t287*b22;
  hessian(6,7) = t299*b20+t310*b21+t760;
  hessian(6,8) = t340*b20+t351*b21+t764;
  hessian(7,0) = t734+t199*b21+t299*b22;
  hessian(7,1) = t383*b20+t393*b21+t404*b22;
  hessian(7,2) = t773+t425*b21+t435*b22;
  hessian(7,3) = t96*b20+t747+t310*b22;
  hessian(7,4) = t393*b20+t451*b21+t461*b22;
  hessian(7,5) = t473*b20+t785+t493*b22;
  hessian(7,6) = t114*b20+t228*b21+t760;
  hessian(7,7) = t404*b20+t461*b21+t509*b22;
  hessian(7,8) = t521*b20+t531*b21+t797;
  hessian(8,0) = t738+t241*b21+t340*b22;
  hessian(8,1) = t773+t473*b21+t521*b22;
  hessian(8,2) = t560*b20+t570*b21+t580*b22;
  hessian(8,3) = t137*b20+t751+t351*b22;
  hessian(8,4) = t425*b20+t785+t531*b22;
  hessian(8,5) = t570*b20+t599*b21+t609*b22;
  hessian(8,6) = t155*b20+t270*b21+t764;
  hessian(8,7) = t435*b20+t493*b21+t797;
  hessian(8,8) = t580*b20+t609*b21+t628*b22;
  hessian(9,0) = t42*b30+t54*b31+t73*b32;
  hessian(9,1) = t833+t96*b31+t114*b32;
  hessian(9,2) = t837+t137*b31+t155*b32;
  hessian(9,3) = t54*b30+t168*b31+t187*b32;
  hessian(9,4) = t199*b30+t846+t228*b32;
  hessian(9,5) = t241*b30+t850+t270*b32;
  hessian(9,6) = t73*b30+t187*b31+t287*b32;
  hessian(9,7) = t299*b30+t310*b31+t859;
  hessian(9,8) = t340*b30+t351*b31+t863;
  hessian(10,0) = t833+t199*b31+t299*b32;
  hessian(10,1) = t383*b30+t393*b31+t404*b32;
  hessian(10,2) = t872+t425*b31+t435*b32;
  hessian(10,3) = t96*b30+t846+t310*b32;
  hessian(10,4) = t393*b30+t451*b31+t461*b32;
  hessian(10,5) = t473*b30+t884+t493*b32;
  hessian(10,6) = t114*b30+t228*b31+t859;
  hessian(10,7) = t404*b30+t461*b31+t509*b32;
  hessian(10,8) = t521*b30+t531*b31+t896;
  hessian(11,0) = t837+t241*b31+t340*b32;
  hessian(11,1) = t872+t473*b31+t521*b32;
  hessian(11,2) = t560*b30+t570*b31+t580*b32;
  hessian(11,3) = t137*b30+t850+t351*b32;
  hessian(11,4) = t425*b30+t884+t531*b32;
  hessian(11,5) = t570*b30+t599*b31+t609*b32;
  hessian(11,6) = t155*b30+t270*b31+t863;
  hessian(11,7) = t435*b30+t493*b31+t896;
  hessian(11,8) = t580*b30+t609*b31+t628*b32;
 
 
}

void ARRUDA_BOYCE::hessian7(const Real* F, const VEC3F* b, MATRIX& hessian) {
  const double N = _Nconst;
  const double nkTheta = _nkTheta;
  const double b00 = b[0][0];
  const double b01 = b[0][1];
  const double b02 = b[0][2];
  const double b10 = b[1][0];
  const double b11 = b[1][1];
  const double b12 = b[1][2];
  const double b20 = b[2][0];
  const double b21 = b[2][1];
  const double b22 = b[2][2];
  const double b30 = b[3][0];
  const double b31 = b[3][1];
  const double b32 = b[3][2]; 

 
  Real t1 = 1/N;
  Real t2 = t1*F[7];
  Real t3 = 2.0/5.0*t2;
  Real t4 = N*N;
  Real t5 = 1/t4;
  Real t6 = t5*F[7];
  Real t7 = F[0]*F[0];
  Real t10 = F[1]*F[1];
  Real t11 = F[2]*F[2];
  Real t12 = F[3]*F[3];
  Real t13 = F[4]*F[4];
  Real t14 = F[5]*F[5];
  Real t15 = F[6]*F[6];
  Real t16 = F[7]*F[7];
  Real t17 = F[8]*F[8];
  Real t18 = t7+t10+t11+t12+t13+t14+t15+t16+t17;
  Real t19 = t5*t18;
  Real t20 = t19*F[7];
  Real t21 = 44.0/175.0*t20;
  Real t23 = 1/t4/N;
  Real t24 = t23*t18;
  Real t25 = t7*F[7];
  Real t28 = t18*t18;
  Real t29 = t23*t28;
  Real t30 = t29*F[7];
  Real t31 = 114.0/875.0*t30;
  Real t32 = t4*t4;
  Real t33 = 1/t32;
  Real t34 = t33*t28;
  Real t38 = t33*t28*t18;
  Real t39 = t38*F[7];
  Real t40 = 4152.0/67375.0*t39;
  Real t42 = nkTheta*(t3+88.0/175.0*t6*t7+t21+456.0/875.0*t24*t25+t31+24912.0/67375.0*t34*t25+t40);
  Real t44 = t5*F[0];
  Real t45 = F[3]*F[7];
  Real t48 = t45*F[0];
  Real t54 = nkTheta*(88.0/175.0*t44*t45+456.0/875.0*t24*t48+24912.0/67375.0*t34*t48);
  Real t56 = t5*F[6];
  Real t57 = F[0]*F[7];
  Real t60 = t57*F[6];
  Real t66 = nkTheta*(88.0/175.0*t56*t57+456.0/875.0*t24*t60+24912.0/67375.0*t34*t60);
  Real t69 = F[0]*F[1];
  Real t72 = t69*F[7];
  Real t78 = nkTheta*(88.0/175.0*t6*t69+456.0/875.0*t24*t72+24912.0/67375.0*t34*t72);
  Real t79 = t78*b00;
  Real t80 = t5*F[1];
  Real t83 = t45*F[1];
  Real t89 = nkTheta*(88.0/175.0*t80*t45+456.0/875.0*t24*t83+24912.0/67375.0*t34*t83);
  Real t91 = F[7]*F[1];
  Real t94 = t91*F[6];
  Real t100 = nkTheta*(88.0/175.0*t56*t91+456.0/875.0*t24*t94+24912.0/67375.0*t34*t94);
  Real t103 = F[7]*F[2];
  Real t106 = t103*F[0];
  Real t112 = nkTheta*(88.0/175.0*t44*t103+456.0/875.0*t24*t106+24912.0/67375.0*t34*t106);
  Real t113 = t112*b00;
  Real t114 = t5*F[2];
  Real t117 = t45*F[2];
  Real t123 = nkTheta*(88.0/175.0*t114*t45+456.0/875.0*t24*t117+24912.0/67375.0*t34*t117);
  Real t125 = F[6]*F[7];
  Real t128 = t125*F[2];
  Real t134 = nkTheta*(88.0/175.0*t114*t125+456.0/875.0*t24*t128+24912.0/67375.0*t34*t128);
  Real t141 = t12*F[7];
  Real t147 = nkTheta*(t3+88.0/175.0*t5*t12*F[7]+t21+456.0/875.0*t24*t141+t31+24912.0/67375.0*t34*t141+t40);
  Real t149 = t5*F[3];
  Real t152 = t125*F[3];
  Real t158 = nkTheta*(88.0/175.0*t149*t125+456.0/875.0*t24*t152+24912.0/67375.0*t34*t152);
  Real t161 = F[7]*F[4];
  Real t164 = t161*F[0];
  Real t170 = nkTheta*(88.0/175.0*t44*t161+456.0/875.0*t24*t164+24912.0/67375.0*t34*t164);
  Real t174 = t161*F[3];
  Real t180 = nkTheta*(88.0/175.0*t149*t161+456.0/875.0*t24*t174+24912.0/67375.0*t34*t174);
  Real t181 = t180*b01;
  Real t182 = t5*F[4];
  Real t185 = t125*F[4];
  Real t191 = nkTheta*(88.0/175.0*t182*t125+456.0/875.0*t24*t185+24912.0/67375.0*t34*t185);
  Real t194 = t5*F[5];
  Real t197 = t57*F[5];
  Real t203 = nkTheta*(88.0/175.0*t194*t57+456.0/875.0*t24*t197+24912.0/67375.0*t34*t197);
  Real t205 = F[7]*F[5];
  Real t208 = t205*F[3];
  Real t214 = nkTheta*(88.0/175.0*t149*t205+456.0/875.0*t24*t208+24912.0/67375.0*t34*t208);
  Real t215 = t214*b01;
  Real t218 = t125*F[5];
  Real t224 = nkTheta*(88.0/175.0*t194*t125+456.0/875.0*t24*t218+24912.0/67375.0*t34*t218);
  Real t232 = t15*F[7];
  Real t238 = nkTheta*(t3+88.0/175.0*t5*t15*F[7]+t21+456.0/875.0*t24*t232+t31+24912.0/67375.0*t34*t232+t40);
  Real t243 = t5*t16;
  Real t248 = F[0]*t16;
  Real t258 = nkTheta*(2.0/5.0*t1*F[0]+88.0/175.0*t243*F[0]+44.0/175.0*t19*F[0]+456.0/875.0*t24*t248+114.0/875.0*t29*F[0]+24912.0/67375.0*t34*t248+4152.0/67375.0*t38*F[0]);
  Real t266 = t16*F[3];
  Real t276 = nkTheta*(2.0/5.0*t1*F[3]+88.0/175.0*t149*t16+44.0/175.0*t19*F[3]+456.0/875.0*t24*t266+114.0/875.0*t29*F[3]+24912.0/67375.0*t34*t266+4152.0/67375.0*t38*F[3]);
  Real t284 = t16*F[6];
  Real t294 = nkTheta*(2.0/5.0*t1*F[6]+88.0/175.0*t56*t16+44.0/175.0*t19*F[6]+456.0/875.0*t24*t284+114.0/875.0*t29*F[6]+24912.0/67375.0*t34*t284+4152.0/67375.0*t38*F[6]);
  Real t295 = t294*b02;
  Real t297 = F[0]*F[8];
  Real t300 = t297*F[7];
  Real t306 = nkTheta*(88.0/175.0*t6*t297+456.0/875.0*t24*t300+24912.0/67375.0*t34*t300);
  Real t308 = F[7]*F[8];
  Real t311 = t308*F[3];
  Real t317 = nkTheta*(88.0/175.0*t149*t308+456.0/875.0*t24*t311+24912.0/67375.0*t34*t311);
  Real t321 = t308*F[6];
  Real t327 = nkTheta*(88.0/175.0*t56*t308+456.0/875.0*t24*t321+24912.0/67375.0*t34*t321);
  Real t328 = t327*b02;
  Real t335 = t10*F[7];
  Real t341 = nkTheta*(t3+88.0/175.0*t6*t10+t21+456.0/875.0*t24*t335+t31+24912.0/67375.0*t34*t335+t40);
  Real t345 = t161*F[1];
  Real t351 = nkTheta*(88.0/175.0*t80*t161+456.0/875.0*t24*t345+24912.0/67375.0*t34*t345);
  Real t359 = t16*F[1];
  Real t369 = nkTheta*(2.0/5.0*t1*F[1]+88.0/175.0*t243*F[1]+44.0/175.0*t19*F[1]+456.0/875.0*t24*t359+114.0/875.0*t29*F[1]+24912.0/67375.0*t34*t359+4152.0/67375.0*t38*F[1]);
  Real t374 = t103*F[1];
  Real t380 = nkTheta*(88.0/175.0*t80*t103+456.0/875.0*t24*t374+24912.0/67375.0*t34*t374);
  Real t381 = t380*b00;
  Real t384 = t161*F[2];
  Real t390 = nkTheta*(88.0/175.0*t114*t161+456.0/875.0*t24*t384+24912.0/67375.0*t34*t384);
  Real t398 = t16*F[2];
  Real t408 = nkTheta*(2.0/5.0*t1*F[2]+88.0/175.0*t114*t16+44.0/175.0*t19*F[2]+456.0/875.0*t24*t398+114.0/875.0*t29*F[2]+24912.0/67375.0*t34*t398+4152.0/67375.0*t38*F[2]);
  Real t418 = F[7]*t13;
  Real t424 = nkTheta*(t3+88.0/175.0*t5*t13*F[7]+t21+456.0/875.0*t24*t418+t31+24912.0/67375.0*t34*t418+t40);
  Real t432 = t16*F[4];
  Real t442 = nkTheta*(2.0/5.0*t1*F[4]+88.0/175.0*t182*t16+44.0/175.0*t19*F[4]+456.0/875.0*t24*t432+114.0/875.0*t29*F[4]+24912.0/67375.0*t34*t432+4152.0/67375.0*t38*F[4]);
  Real t447 = t91*F[5];
  Real t453 = nkTheta*(88.0/175.0*t194*t91+456.0/875.0*t24*t447+24912.0/67375.0*t34*t447);
  Real t457 = t205*F[4];
  Real t463 = nkTheta*(88.0/175.0*t182*t205+456.0/875.0*t24*t457+24912.0/67375.0*t34*t457);
  Real t464 = t463*b01;
  Real t471 = t16*F[5];
  Real t481 = nkTheta*(2.0/5.0*t1*F[5]+88.0/175.0*t194*t16+44.0/175.0*t19*F[5]+456.0/875.0*t24*t471+114.0/875.0*t29*F[5]+24912.0/67375.0*t34*t471+4152.0/67375.0*t38*F[5]);
  Real t490 = t16*F[7];
  Real t501 = nkTheta*(6.0/5.0*t2+88.0/175.0*t5*t490+132.0/175.0*t20+456.0/875.0*t24*t490+342.0/875.0*t30+24912.0/67375.0*t34*t490+12456.0/67375.0*t39);
  Real t504 = F[1]*F[8];
  Real t507 = t504*F[7];
  Real t513 = nkTheta*(88.0/175.0*t6*t504+456.0/875.0*t24*t507+24912.0/67375.0*t34*t507);
  Real t517 = t308*F[4];
  Real t523 = nkTheta*(88.0/175.0*t182*t308+456.0/875.0*t24*t517+24912.0/67375.0*t34*t517);
  Real t531 = t16*F[8];
  Real t541 = nkTheta*(2.0/5.0*t1*F[8]+88.0/175.0*t243*F[8]+44.0/175.0*t19*F[8]+456.0/875.0*t24*t531+114.0/875.0*t29*F[8]+24912.0/67375.0*t34*t531+4152.0/67375.0*t38*F[8]);
  Real t542 = t541*b02;
  Real t553 = F[7]*t11;
  Real t559 = nkTheta*(t3+88.0/175.0*t5*t11*F[7]+t21+456.0/875.0*t24*t553+t31+24912.0/67375.0*t34*t553+t40);
  Real t563 = t205*F[2];
  Real t569 = nkTheta*(88.0/175.0*t114*t205+456.0/875.0*t24*t563+24912.0/67375.0*t34*t563);
  Real t573 = t308*F[2];
  Real t579 = nkTheta*(88.0/175.0*t114*t308+456.0/875.0*t24*t573+24912.0/67375.0*t34*t573);
  Real t592 = F[7]*t14;
  Real t598 = nkTheta*(t3+88.0/175.0*t5*t14*F[7]+t21+456.0/875.0*t24*t592+t31+24912.0/67375.0*t34*t592+t40);
  Real t602 = t308*F[5];
  Real t608 = nkTheta*(88.0/175.0*t194*t308+456.0/875.0*t24*t602+24912.0/67375.0*t34*t602);
  Real t621 = t17*F[7];
  Real t627 = nkTheta*(t3+88.0/175.0*t6*t17+t21+456.0/875.0*t24*t621+t31+24912.0/67375.0*t34*t621+t40);
  Real t634 = t78*b10;
  Real t638 = t112*b10;
  Real t647 = t180*b11;
  Real t651 = t214*b11;
  Real t660 = t294*b12;
  Real t664 = t327*b12;
  Real t673 = t380*b10;
  Real t685 = t463*b11;
  Real t697 = t541*b12;
  Real t733 = t78*b20;
  Real t737 = t112*b20;
  Real t746 = t180*b21;
  Real t750 = t214*b21;
  Real t759 = t294*b22;
  Real t763 = t327*b22;
  Real t772 = t380*b20;
  Real t784 = t463*b21;
  Real t796 = t541*b22;
  Real t832 = t78*b30;
  Real t836 = t112*b30;
  Real t845 = t180*b31;
  Real t849 = t214*b31;
  Real t858 = t294*b32;
  Real t862 = t327*b32;
  Real t871 = t380*b30;
  Real t883 = t463*b31;
  Real t895 = t541*b32;
  hessian(0,0) = t42*b00+t54*b01+t66*b02;
  hessian(0,1) = t79+t89*b01+t100*b02;
  hessian(0,2) = t113+t123*b01+t134*b02;
  hessian(0,3) = t54*b00+t147*b01+t158*b02;
  hessian(0,4) = t170*b00+t181+t191*b02;
  hessian(0,5) = t203*b00+t215+t224*b02;
  hessian(0,6) = t66*b00+t158*b01+t238*b02;
  hessian(0,7) = t258*b00+t276*b01+t295;
  hessian(0,8) = t306*b00+t317*b01+t328;
  hessian(1,0) = t79+t170*b01+t258*b02;
  hessian(1,1) = t341*b00+t351*b01+t369*b02;
  hessian(1,2) = t381+t390*b01+t408*b02;
  hessian(1,3) = t89*b00+t181+t276*b02;
  hessian(1,4) = t351*b00+t424*b01+t442*b02;
  hessian(1,5) = t453*b00+t464+t481*b02;
  hessian(1,6) = t100*b00+t191*b01+t295;
  hessian(1,7) = t369*b00+t442*b01+t501*b02;
  hessian(1,8) = t513*b00+t523*b01+t542;
  hessian(2,0) = t113+t203*b01+t306*b02;
  hessian(2,1) = t381+t453*b01+t513*b02;
  hessian(2,2) = t559*b00+t569*b01+t579*b02;
  hessian(2,3) = t123*b00+t215+t317*b02;
  hessian(2,4) = t390*b00+t464+t523*b02;
  hessian(2,5) = t569*b00+t598*b01+t608*b02;
  hessian(2,6) = t134*b00+t224*b01+t328;
  hessian(2,7) = t408*b00+t481*b01+t542;
  hessian(2,8) = t579*b00+t608*b01+t627*b02;
  hessian(3,0) = t42*b10+t54*b11+t66*b12;
  hessian(3,1) = t634+t89*b11+t100*b12;
  hessian(3,2) = t638+t123*b11+t134*b12;
  hessian(3,3) = t54*b10+t147*b11+t158*b12;
  hessian(3,4) = t170*b10+t647+t191*b12;
  hessian(3,5) = t203*b10+t651+t224*b12;
  hessian(3,6) = t66*b10+t158*b11+t238*b12;
  hessian(3,7) = t258*b10+t276*b11+t660;
  hessian(3,8) = t306*b10+t317*b11+t664;
  hessian(4,0) = t634+t170*b11+t258*b12;
  hessian(4,1) = t341*b10+t351*b11+t369*b12;
  hessian(4,2) = t673+t390*b11+t408*b12;
  hessian(4,3) = t89*b10+t647+t276*b12;
  hessian(4,4) = t351*b10+t424*b11+t442*b12;
  hessian(4,5) = t453*b10+t685+t481*b12;
  hessian(4,6) = t100*b10+t191*b11+t660;
  hessian(4,7) = t369*b10+t442*b11+t501*b12;
  hessian(4,8) = t513*b10+t523*b11+t697;
  hessian(5,0) = t638+t203*b11+t306*b12;
  hessian(5,1) = t673+t453*b11+t513*b12;
  hessian(5,2) = t559*b10+t569*b11+t579*b12;
  hessian(5,3) = t123*b10+t651+t317*b12;
  hessian(5,4) = t390*b10+t685+t523*b12;
  hessian(5,5) = t569*b10+t598*b11+t608*b12;
  hessian(5,6) = t134*b10+t224*b11+t664;
  hessian(5,7) = t408*b10+t481*b11+t697;
  hessian(5,8) = t579*b10+t608*b11+t627*b12;
  hessian(6,0) = t42*b20+t54*b21+t66*b22;
  hessian(6,1) = t733+t89*b21+t100*b22;
  hessian(6,2) = t737+t123*b21+t134*b22;
  hessian(6,3) = t54*b20+t147*b21+t158*b22;
  hessian(6,4) = t170*b20+t746+t191*b22;
  hessian(6,5) = t203*b20+t750+t224*b22;
  hessian(6,6) = t66*b20+t158*b21+t238*b22;
  hessian(6,7) = t258*b20+t276*b21+t759;
  hessian(6,8) = t306*b20+t317*b21+t763;
  hessian(7,0) = t733+t170*b21+t258*b22;
  hessian(7,1) = t341*b20+t351*b21+t369*b22;
  hessian(7,2) = t772+t390*b21+t408*b22;
  hessian(7,3) = t89*b20+t746+t276*b22;
  hessian(7,4) = t351*b20+t424*b21+t442*b22;
  hessian(7,5) = t453*b20+t784+t481*b22;
  hessian(7,6) = t100*b20+t191*b21+t759;
  hessian(7,7) = t369*b20+t442*b21+t501*b22;
  hessian(7,8) = t513*b20+t523*b21+t796;
  hessian(8,0) = t737+t203*b21+t306*b22;
  hessian(8,1) = t772+t453*b21+t513*b22;
  hessian(8,2) = t559*b20+t569*b21+t579*b22;
  hessian(8,3) = t123*b20+t750+t317*b22;
  hessian(8,4) = t390*b20+t784+t523*b22;
  hessian(8,5) = t569*b20+t598*b21+t608*b22;
  hessian(8,6) = t134*b20+t224*b21+t763;
  hessian(8,7) = t408*b20+t481*b21+t796;
  hessian(8,8) = t579*b20+t608*b21+t627*b22;
  hessian(9,0) = t42*b30+t54*b31+t66*b32;
  hessian(9,1) = t832+t89*b31+t100*b32;
  hessian(9,2) = t836+t123*b31+t134*b32;
  hessian(9,3) = t54*b30+t147*b31+t158*b32;
  hessian(9,4) = t170*b30+t845+t191*b32;
  hessian(9,5) = t203*b30+t849+t224*b32;
  hessian(9,6) = t66*b30+t158*b31+t238*b32;
  hessian(9,7) = t258*b30+t276*b31+t858;
  hessian(9,8) = t306*b30+t317*b31+t862;
  hessian(10,0) = t832+t170*b31+t258*b32;
  hessian(10,1) = t341*b30+t351*b31+t369*b32;
  hessian(10,2) = t871+t390*b31+t408*b32;
  hessian(10,3) = t89*b30+t845+t276*b32;
  hessian(10,4) = t351*b30+t424*b31+t442*b32;
  hessian(10,5) = t453*b30+t883+t481*b32;
  hessian(10,6) = t100*b30+t191*b31+t858;
  hessian(10,7) = t369*b30+t442*b31+t501*b32;
  hessian(10,8) = t513*b30+t523*b31+t895;
  hessian(11,0) = t836+t203*b31+t306*b32;
  hessian(11,1) = t871+t453*b31+t513*b32;
  hessian(11,2) = t559*b30+t569*b31+t579*b32;
  hessian(11,3) = t123*b30+t849+t317*b32;
  hessian(11,4) = t390*b30+t883+t523*b32;
  hessian(11,5) = t569*b30+t598*b31+t608*b32;
  hessian(11,6) = t134*b30+t224*b31+t862;
  hessian(11,7) = t408*b30+t481*b31+t895;
  hessian(11,8) = t579*b30+t608*b31+t627*b32;
 
 
}

void ARRUDA_BOYCE::hessian8(const Real* F, const VEC3F* b, MATRIX& hessian) {
  const double N = _Nconst;
  const double nkTheta = _nkTheta;
  const double b00 = b[0][0];
  const double b01 = b[0][1];
  const double b02 = b[0][2];
  const double b10 = b[1][0];
  const double b11 = b[1][1];
  const double b12 = b[1][2];
  const double b20 = b[2][0];
  const double b21 = b[2][1];
  const double b22 = b[2][2];
  const double b30 = b[3][0];
  const double b31 = b[3][1];
  const double b32 = b[3][2]; 

 
  Real t1 = 1/N;
  Real t2 = t1*F[8];
  Real t3 = 2.0/5.0*t2;
  Real t4 = N*N;
  Real t5 = 1/t4;
  Real t6 = t5*F[8];
  Real t7 = F[0]*F[0];
  Real t10 = F[1]*F[1];
  Real t11 = F[2]*F[2];
  Real t12 = F[3]*F[3];
  Real t13 = F[4]*F[4];
  Real t14 = F[5]*F[5];
  Real t15 = F[6]*F[6];
  Real t16 = F[7]*F[7];
  Real t17 = F[8]*F[8];
  Real t18 = t7+t10+t11+t12+t13+t14+t15+t16+t17;
  Real t19 = t5*t18;
  Real t20 = t19*F[8];
  Real t21 = 44.0/175.0*t20;
  Real t23 = 1/t4/N;
  Real t24 = t23*t18;
  Real t25 = t7*F[8];
  Real t28 = t18*t18;
  Real t29 = t23*t28;
  Real t30 = t29*F[8];
  Real t31 = 114.0/875.0*t30;
  Real t32 = t4*t4;
  Real t33 = 1/t32;
  Real t34 = t33*t28;
  Real t38 = t33*t28*t18;
  Real t39 = t38*F[8];
  Real t40 = 4152.0/67375.0*t39;
  Real t42 = nkTheta*(t3+88.0/175.0*t6*t7+t21+456.0/875.0*t24*t25+t31+24912.0/67375.0*t34*t25+t40);
  Real t44 = t5*F[0];
  Real t45 = F[3]*F[8];
  Real t48 = t45*F[0];
  Real t54 = nkTheta*(88.0/175.0*t44*t45+456.0/875.0*t24*t48+24912.0/67375.0*t34*t48);
  Real t56 = t5*F[6];
  Real t57 = F[0]*F[8];
  Real t60 = t57*F[6];
  Real t66 = nkTheta*(88.0/175.0*t56*t57+456.0/875.0*t24*t60+24912.0/67375.0*t34*t60);
  Real t69 = F[0]*F[1];
  Real t72 = t69*F[8];
  Real t78 = nkTheta*(88.0/175.0*t6*t69+456.0/875.0*t24*t72+24912.0/67375.0*t34*t72);
  Real t79 = t78*b00;
  Real t80 = t5*F[1];
  Real t83 = t45*F[1];
  Real t89 = nkTheta*(88.0/175.0*t80*t45+456.0/875.0*t24*t83+24912.0/67375.0*t34*t83);
  Real t91 = F[1]*F[8];
  Real t94 = t91*F[6];
  Real t100 = nkTheta*(88.0/175.0*t56*t91+456.0/875.0*t24*t94+24912.0/67375.0*t34*t94);
  Real t103 = F[8]*F[2];
  Real t106 = t103*F[0];
  Real t112 = nkTheta*(88.0/175.0*t44*t103+456.0/875.0*t24*t106+24912.0/67375.0*t34*t106);
  Real t113 = t112*b00;
  Real t114 = t5*F[2];
  Real t117 = t45*F[2];
  Real t123 = nkTheta*(88.0/175.0*t114*t45+456.0/875.0*t24*t117+24912.0/67375.0*t34*t117);
  Real t125 = F[6]*F[8];
  Real t128 = t125*F[2];
  Real t134 = nkTheta*(88.0/175.0*t114*t125+456.0/875.0*t24*t128+24912.0/67375.0*t34*t128);
  Real t141 = t12*F[8];
  Real t147 = nkTheta*(t3+88.0/175.0*t5*t12*F[8]+t21+456.0/875.0*t24*t141+t31+24912.0/67375.0*t34*t141+t40);
  Real t149 = t5*F[3];
  Real t152 = t125*F[3];
  Real t158 = nkTheta*(88.0/175.0*t149*t125+456.0/875.0*t24*t152+24912.0/67375.0*t34*t152);
  Real t161 = F[4]*F[8];
  Real t164 = t161*F[0];
  Real t170 = nkTheta*(88.0/175.0*t44*t161+456.0/875.0*t24*t164+24912.0/67375.0*t34*t164);
  Real t174 = t161*F[3];
  Real t180 = nkTheta*(88.0/175.0*t149*t161+456.0/875.0*t24*t174+24912.0/67375.0*t34*t174);
  Real t181 = t180*b01;
  Real t182 = t5*F[4];
  Real t185 = t125*F[4];
  Real t191 = nkTheta*(88.0/175.0*t182*t125+456.0/875.0*t24*t185+24912.0/67375.0*t34*t185);
  Real t194 = t5*F[5];
  Real t197 = t57*F[5];
  Real t203 = nkTheta*(88.0/175.0*t194*t57+456.0/875.0*t24*t197+24912.0/67375.0*t34*t197);
  Real t205 = F[8]*F[5];
  Real t208 = t205*F[3];
  Real t214 = nkTheta*(88.0/175.0*t149*t205+456.0/875.0*t24*t208+24912.0/67375.0*t34*t208);
  Real t215 = t214*b01;
  Real t218 = t125*F[5];
  Real t224 = nkTheta*(88.0/175.0*t194*t125+456.0/875.0*t24*t218+24912.0/67375.0*t34*t218);
  Real t232 = t15*F[8];
  Real t238 = nkTheta*(t3+88.0/175.0*t5*t15*F[8]+t21+456.0/875.0*t24*t232+t31+24912.0/67375.0*t34*t232+t40);
  Real t241 = t5*F[7];
  Real t244 = t57*F[7];
  Real t250 = nkTheta*(88.0/175.0*t241*t57+456.0/875.0*t24*t244+24912.0/67375.0*t34*t244);
  Real t252 = F[7]*F[8];
  Real t255 = t252*F[3];
  Real t261 = nkTheta*(88.0/175.0*t149*t252+456.0/875.0*t24*t255+24912.0/67375.0*t34*t255);
  Real t265 = t252*F[6];
  Real t271 = nkTheta*(88.0/175.0*t56*t252+456.0/875.0*t24*t265+24912.0/67375.0*t34*t265);
  Real t272 = t271*b02;
  Real t276 = t5*t17;
  Real t281 = F[0]*t17;
  Real t291 = nkTheta*(2.0/5.0*t1*F[0]+88.0/175.0*t276*F[0]+44.0/175.0*t19*F[0]+456.0/875.0*t24*t281+114.0/875.0*t29*F[0]+24912.0/67375.0*t34*t281+4152.0/67375.0*t38*F[0]);
  Real t299 = t17*F[3];
  Real t309 = nkTheta*(2.0/5.0*t1*F[3]+88.0/175.0*t149*t17+44.0/175.0*t19*F[3]+456.0/875.0*t24*t299+114.0/875.0*t29*F[3]+24912.0/67375.0*t34*t299+4152.0/67375.0*t38*F[3]);
  Real t317 = t17*F[6];
  Real t327 = nkTheta*(2.0/5.0*t1*F[6]+88.0/175.0*t56*t17+44.0/175.0*t19*F[6]+456.0/875.0*t24*t317+114.0/875.0*t29*F[6]+24912.0/67375.0*t34*t317+4152.0/67375.0*t38*F[6]);
  Real t328 = t327*b02;
  Real t335 = t10*F[8];
  Real t341 = nkTheta*(t3+88.0/175.0*t6*t10+t21+456.0/875.0*t24*t335+t31+24912.0/67375.0*t34*t335+t40);
  Real t345 = t161*F[1];
  Real t351 = nkTheta*(88.0/175.0*t80*t161+456.0/875.0*t24*t345+24912.0/67375.0*t34*t345);
  Real t355 = t91*F[7];
  Real t361 = nkTheta*(88.0/175.0*t241*t91+456.0/875.0*t24*t355+24912.0/67375.0*t34*t355);
  Real t366 = t103*F[1];
  Real t372 = nkTheta*(88.0/175.0*t80*t103+456.0/875.0*t24*t366+24912.0/67375.0*t34*t366);
  Real t373 = t372*b00;
  Real t376 = t161*F[2];
  Real t382 = nkTheta*(88.0/175.0*t114*t161+456.0/875.0*t24*t376+24912.0/67375.0*t34*t376);
  Real t386 = t252*F[2];
  Real t392 = nkTheta*(88.0/175.0*t114*t252+456.0/875.0*t24*t386+24912.0/67375.0*t34*t386);
  Real t402 = t13*F[8];
  Real t408 = nkTheta*(t3+88.0/175.0*t5*t13*F[8]+t21+456.0/875.0*t24*t402+t31+24912.0/67375.0*t34*t402+t40);
  Real t412 = t252*F[4];
  Real t418 = nkTheta*(88.0/175.0*t182*t252+456.0/875.0*t24*t412+24912.0/67375.0*t34*t412);
  Real t423 = t91*F[5];
  Real t429 = nkTheta*(88.0/175.0*t194*t91+456.0/875.0*t24*t423+24912.0/67375.0*t34*t423);
  Real t433 = t205*F[4];
  Real t439 = nkTheta*(88.0/175.0*t182*t205+456.0/875.0*t24*t433+24912.0/67375.0*t34*t433);
  Real t440 = t439*b01;
  Real t443 = t252*F[5];
  Real t449 = nkTheta*(88.0/175.0*t194*t252+456.0/875.0*t24*t443+24912.0/67375.0*t34*t443);
  Real t460 = t16*F[8];
  Real t466 = nkTheta*(t3+88.0/175.0*t5*t16*F[8]+t21+456.0/875.0*t24*t460+t31+24912.0/67375.0*t34*t460+t40);
  Real t475 = F[1]*t17;
  Real t485 = nkTheta*(2.0/5.0*t1*F[1]+88.0/175.0*t276*F[1]+44.0/175.0*t19*F[1]+456.0/875.0*t24*t475+114.0/875.0*t29*F[1]+24912.0/67375.0*t34*t475+4152.0/67375.0*t38*F[1]);
  Real t493 = t17*F[4];
  Real t503 = nkTheta*(2.0/5.0*t1*F[4]+88.0/175.0*t182*t17+44.0/175.0*t19*F[4]+456.0/875.0*t24*t493+114.0/875.0*t29*F[4]+24912.0/67375.0*t34*t493+4152.0/67375.0*t38*F[4]);
  Real t511 = t17*F[7];
  Real t521 = nkTheta*(2.0/5.0*t1*F[7]+88.0/175.0*t241*t17+44.0/175.0*t19*F[7]+456.0/875.0*t24*t511+114.0/875.0*t29*F[7]+24912.0/67375.0*t34*t511+4152.0/67375.0*t38*F[7]);
  Real t522 = t521*b02;
  Real t533 = F[8]*t11;
  Real t539 = nkTheta*(t3+88.0/175.0*t5*t11*F[8]+t21+456.0/875.0*t24*t533+t31+24912.0/67375.0*t34*t533+t40);
  Real t543 = t205*F[2];
  Real t549 = nkTheta*(88.0/175.0*t114*t205+456.0/875.0*t24*t543+24912.0/67375.0*t34*t543);
  Real t557 = t17*F[2];
  Real t567 = nkTheta*(2.0/5.0*t1*F[2]+88.0/175.0*t114*t17+44.0/175.0*t19*F[2]+456.0/875.0*t24*t557+114.0/875.0*t29*F[2]+24912.0/67375.0*t34*t557+4152.0/67375.0*t38*F[2]);
  Real t580 = F[8]*t14;
  Real t586 = nkTheta*(t3+88.0/175.0*t5*t14*F[8]+t21+456.0/875.0*t24*t580+t31+24912.0/67375.0*t34*t580+t40);
  Real t594 = t17*F[5];
  Real t604 = nkTheta*(2.0/5.0*t1*F[5]+88.0/175.0*t194*t17+44.0/175.0*t19*F[5]+456.0/875.0*t24*t594+114.0/875.0*t29*F[5]+24912.0/67375.0*t34*t594+4152.0/67375.0*t38*F[5]);
  Real t616 = t17*F[8];
  Real t627 = nkTheta*(6.0/5.0*t2+88.0/175.0*t5*t616+132.0/175.0*t20+456.0/875.0*t24*t616+342.0/875.0*t30+24912.0/67375.0*t34*t616+12456.0/67375.0*t39);
  Real t634 = t78*b10;
  Real t638 = t112*b10;
  Real t647 = t180*b11;
  Real t651 = t214*b11;
  Real t660 = t271*b12;
  Real t664 = t327*b12;
  Real t673 = t372*b10;
  Real t685 = t439*b11;
  Real t697 = t521*b12;
  Real t733 = t78*b20;
  Real t737 = t112*b20;
  Real t746 = t180*b21;
  Real t750 = t214*b21;
  Real t759 = t271*b22;
  Real t763 = t327*b22;
  Real t772 = t372*b20;
  Real t784 = t439*b21;
  Real t796 = t521*b22;
  Real t832 = t78*b30;
  Real t836 = t112*b30;
  Real t845 = t180*b31;
  Real t849 = t214*b31;
  Real t858 = t271*b32;
  Real t862 = t327*b32;
  Real t871 = t372*b30;
  Real t883 = t439*b31;
  Real t895 = t521*b32;
  hessian(0,0) = t42*b00+t54*b01+t66*b02;
  hessian(0,1) = t79+t89*b01+t100*b02;
  hessian(0,2) = t113+t123*b01+t134*b02;
  hessian(0,3) = t54*b00+t147*b01+t158*b02;
  hessian(0,4) = t170*b00+t181+t191*b02;
  hessian(0,5) = t203*b00+t215+t224*b02;
  hessian(0,6) = t66*b00+t158*b01+t238*b02;
  hessian(0,7) = t250*b00+t261*b01+t272;
  hessian(0,8) = t291*b00+t309*b01+t328;
  hessian(1,0) = t79+t170*b01+t250*b02;
  hessian(1,1) = t341*b00+t351*b01+t361*b02;
  hessian(1,2) = t373+t382*b01+t392*b02;
  hessian(1,3) = t89*b00+t181+t261*b02;
  hessian(1,4) = t351*b00+t408*b01+t418*b02;
  hessian(1,5) = t429*b00+t440+t449*b02;
  hessian(1,6) = t100*b00+t191*b01+t272;
  hessian(1,7) = t361*b00+t418*b01+t466*b02;
  hessian(1,8) = t485*b00+t503*b01+t522;
  hessian(2,0) = t113+t203*b01+t291*b02;
  hessian(2,1) = t373+t429*b01+t485*b02;
  hessian(2,2) = t539*b00+t549*b01+t567*b02;
  hessian(2,3) = t123*b00+t215+t309*b02;
  hessian(2,4) = t382*b00+t440+t503*b02;
  hessian(2,5) = t549*b00+t586*b01+t604*b02;
  hessian(2,6) = t134*b00+t224*b01+t328;
  hessian(2,7) = t392*b00+t449*b01+t522;
  hessian(2,8) = t567*b00+t604*b01+t627*b02;
  hessian(3,0) = t42*b10+t54*b11+t66*b12;
  hessian(3,1) = t634+t89*b11+t100*b12;
  hessian(3,2) = t638+t123*b11+t134*b12;
  hessian(3,3) = t54*b10+t147*b11+t158*b12;
  hessian(3,4) = t170*b10+t647+t191*b12;
  hessian(3,5) = t203*b10+t651+t224*b12;
  hessian(3,6) = t66*b10+t158*b11+t238*b12;
  hessian(3,7) = t250*b10+t261*b11+t660;
  hessian(3,8) = t291*b10+t309*b11+t664;
  hessian(4,0) = t634+t170*b11+t250*b12;
  hessian(4,1) = t341*b10+t351*b11+t361*b12;
  hessian(4,2) = t673+t382*b11+t392*b12;
  hessian(4,3) = t89*b10+t647+t261*b12;
  hessian(4,4) = t351*b10+t408*b11+t418*b12;
  hessian(4,5) = t429*b10+t685+t449*b12;
  hessian(4,6) = t100*b10+t191*b11+t660;
  hessian(4,7) = t361*b10+t418*b11+t466*b12;
  hessian(4,8) = t485*b10+t503*b11+t697;
  hessian(5,0) = t638+t203*b11+t291*b12;
  hessian(5,1) = t673+t429*b11+t485*b12;
  hessian(5,2) = t539*b10+t549*b11+t567*b12;
  hessian(5,3) = t123*b10+t651+t309*b12;
  hessian(5,4) = t382*b10+t685+t503*b12;
  hessian(5,5) = t549*b10+t586*b11+t604*b12;
  hessian(5,6) = t134*b10+t224*b11+t664;
  hessian(5,7) = t392*b10+t449*b11+t697;
  hessian(5,8) = t567*b10+t604*b11+t627*b12;
  hessian(6,0) = t42*b20+t54*b21+t66*b22;
  hessian(6,1) = t733+t89*b21+t100*b22;
  hessian(6,2) = t737+t123*b21+t134*b22;
  hessian(6,3) = t54*b20+t147*b21+t158*b22;
  hessian(6,4) = t170*b20+t746+t191*b22;
  hessian(6,5) = t203*b20+t750+t224*b22;
  hessian(6,6) = t66*b20+t158*b21+t238*b22;
  hessian(6,7) = t250*b20+t261*b21+t759;
  hessian(6,8) = t291*b20+t309*b21+t763;
  hessian(7,0) = t733+t170*b21+t250*b22;
  hessian(7,1) = t341*b20+t351*b21+t361*b22;
  hessian(7,2) = t772+t382*b21+t392*b22;
  hessian(7,3) = t89*b20+t746+t261*b22;
  hessian(7,4) = t351*b20+t408*b21+t418*b22;
  hessian(7,5) = t429*b20+t784+t449*b22;
  hessian(7,6) = t100*b20+t191*b21+t759;
  hessian(7,7) = t361*b20+t418*b21+t466*b22;
  hessian(7,8) = t485*b20+t503*b21+t796;
  hessian(8,0) = t737+t203*b21+t291*b22;
  hessian(8,1) = t772+t429*b21+t485*b22;
  hessian(8,2) = t539*b20+t549*b21+t567*b22;
  hessian(8,3) = t123*b20+t750+t309*b22;
  hessian(8,4) = t382*b20+t784+t503*b22;
  hessian(8,5) = t549*b20+t586*b21+t604*b22;
  hessian(8,6) = t134*b20+t224*b21+t763;
  hessian(8,7) = t392*b20+t449*b21+t796;
  hessian(8,8) = t567*b20+t604*b21+t627*b22;
  hessian(9,0) = t42*b30+t54*b31+t66*b32;
  hessian(9,1) = t832+t89*b31+t100*b32;
  hessian(9,2) = t836+t123*b31+t134*b32;
  hessian(9,3) = t54*b30+t147*b31+t158*b32;
  hessian(9,4) = t170*b30+t845+t191*b32;
  hessian(9,5) = t203*b30+t849+t224*b32;
  hessian(9,6) = t66*b30+t158*b31+t238*b32;
  hessian(9,7) = t250*b30+t261*b31+t858;
  hessian(9,8) = t291*b30+t309*b31+t862;
  hessian(10,0) = t832+t170*b31+t250*b32;
  hessian(10,1) = t341*b30+t351*b31+t361*b32;
  hessian(10,2) = t871+t382*b31+t392*b32;
  hessian(10,3) = t89*b30+t845+t261*b32;
  hessian(10,4) = t351*b30+t408*b31+t418*b32;
  hessian(10,5) = t429*b30+t883+t449*b32;
  hessian(10,6) = t100*b30+t191*b31+t858;
  hessian(10,7) = t361*b30+t418*b31+t466*b32;
  hessian(10,8) = t485*b30+t503*b31+t895;
  hessian(11,0) = t836+t203*b31+t291*b32;
  hessian(11,1) = t871+t429*b31+t485*b32;
  hessian(11,2) = t539*b30+t549*b31+t567*b32;
  hessian(11,3) = t123*b30+t849+t309*b32;
  hessian(11,4) = t382*b30+t883+t503*b32;
  hessian(11,5) = t549*b30+t586*b31+t604*b32;
  hessian(11,6) = t134*b30+t224*b31+t862;
  hessian(11,7) = t392*b30+t449*b31+t895;
  hessian(11,8) = t567*b30+t604*b31+t627*b32;
 
 
}
