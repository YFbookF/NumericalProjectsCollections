/*
This file is part of Cubica.
 
Cubica is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Cubica is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Cubica.  If not, see <http://www.gnu.org/licenses/>.
*/
// NEO_HOOKEAN.cpp: implementation of the NEO_HOOKEAN class.
//
//////////////////////////////////////////////////////////////////////

#include "NEO_HOOKEAN.h"

//////////////////////////////////////////////////////////////////////
// Constructor for NEO_HOOKEAN
//////////////////////////////////////////////////////////////////////
NEO_HOOKEAN::NEO_HOOKEAN(Real mu, Real lambda) :
  _mu(mu),
  _lambda(lambda),
  // work arrays
  _pf_pF(12,9),
  _pF_pu(9,12)
{
  _materialName.assign("NEO_HOOKEAN");
}

//////////////////////////////////////////////////////////////////////
// make a copy
//////////////////////////////////////////////////////////////////////
MATERIAL* NEO_HOOKEAN::copy()
{
  MATERIAL* material = new NEO_HOOKEAN(_mu, _lambda);
  return material;
}

//////////////////////////////////////////////////////////////////////
// stiffness matrix implementation
//////////////////////////////////////////////////////////////////////
MATRIX NEO_HOOKEAN::stiffness(TET& tet, bool diagonal)
{
  computeStresses(tet);
  computePFPu(tet, _pF_pu);
  MATRIX product = _pf_pF * _pF_pu;
  return product;
}

//////////////////////////////////////////////////////////////////////
// implementation of second PK stress tensor
//////////////////////////////////////////////////////////////////////
MATRIX3 NEO_HOOKEAN::secondPiolaKirchhoff(MATRIX3& F, bool diagonal)
{
  //return 0.5 * _mu * MATRIX3::I();
  MATRIX3 C = F.transpose() * F;
  MATRIX3 Cinverse = C.inverse();
  const Real J = det(F);
  return _mu * (MATRIX3::I() - Cinverse) + _lambda * (log(J)) * Cinverse;
}

//////////////////////////////////////////////////////////////////////
// autogenerated as "forceDensity" from:
//
/*
 setup_symbols_wrt_u;
 syms mu lambda;
 strain_energy = mu/2 * (trace(C) - 3) - mu * log(J) + lambda / 2 * log(J)^2;
 % strain_energy = mu/2 * (trace(C) - 3)
 Rd_sym = sym('DUMMY_TEMP')*ones(1,12);
 for i = 1:12
    Rd_sym(1,i) = - diff( strain_energy, u(i));
 end
 forceDensity = maple('codegen[C]', Rd_sym, 'optimized')
*/
//
// see "MATERIAL.h" for more details
//////////////////////////////////////////////////////////////////////
void NEO_HOOKEAN::forceDensity(TET& tet, VEC3F* forces, bool diagonal)
{
  for (int x = 0; x < 4; x++)
    forces[x].clear();

  VEC3F** nodes = tet.vertices;
  const MATRIX3 matInv = tet.DmInv();
  const double mu = _mu;
  const double lambda = _lambda;
  
  const double a = (*nodes[0])[0];
  const double b = (*nodes[0])[1];
  const double c = (*nodes[0])[2];
  const double d = (*nodes[1])[0];
  const double e = (*nodes[1])[1];
  const double f = (*nodes[1])[2];
  const double g = (*nodes[2])[0];
  const double h = (*nodes[2])[1];
  const double i = (*nodes[2])[2];
  const double j = (*nodes[3])[0];
  const double k = (*nodes[3])[1];
  const double l = (*nodes[3])[2];

  const double m = matInv(0,0);
  const double n = matInv(0,1);
  const double o = matInv(0,2);
  const double p = matInv(1,0);
  const double q = matInv(1,1);
  const double r = matInv(1,2);
  const double s = matInv(2,0);
  const double t = matInv(2,1);
  const double u = matInv(2,2);

  const double t1 = d-a;
  const double t3 = g-a;
  const double t5 = j-a;
  const double t7 = t1*m+t3*p+t5*s;
  const double t8 = -m-p-s;
  const double t13 = t1*n+t3*q+t5*t;
  const double t14 = -n-q-t;
  const double t19 = t1*o+t3*r+t5*u;
  const double t20 = -o-r-u;
  const double t25 = p*h;
  const double t26 = u*n;
  const double t27 = t26*f;
  const double t28 = t25*t27;
  const double t29 = m*q;
  const double t30 = h*u;
  const double t31 = t30*l;
  const double t32 = t29*t31;
  const double t33 = o*t;
  const double t34 = t33*l;
  const double t35 = t25*t34;
  const double t36 = m*r;
  const double t37 = h*t;
  const double t38 = t37*l;
  const double t39 = t36*t38;
  const double t40 = m*f;
  const double t41 = r*t;
  const double t42 = t41*k;
  const double t43 = t40*t42;
  const double t44 = m*e;
  const double t45 = q*u;
  const double t46 = t45*l;
  const double t47 = t44*t46;
  const double t48 = t41*i;
  const double t49 = t44*t48;
  const double t50 = s*l;
  const double t51 = q*o;
  const double t52 = t51*e;
  const double t53 = t50*t52;
  const double t54 = t45*h;
  const double t55 = t40*t54;
  const double t56 = p*i;
  const double t57 = t33*e;
  const double t58 = t56*t57;
  const double t59 = t33*k;
  const double t60 = t56*t59;
  const double t61 = t41*l;
  const double t62 = t44*t61;
  const double t63 = n*r;
  const double t64 = t63*h;
  const double t65 = t50*t64;
  const double t66 = t41*h;
  const double t67 = t40*t66;
  const double t68 = t45*k;
  const double t69 = t40*t68;
  const double t70 = m*u;
  const double t71 = k*q;
  const double t72 = t71*i;
  const double t73 = t70*t72;
  const double t74 = p*u;
  const double t75 = k*n;
  const double t76 = t75*f;
  const double t77 = t74*t76;
  const double t78 = s*k;
  const double t79 = t63*f;
  const double t80 = t78*t79;
  const double t81 = -t28-t32-t35+t39+t43+t47+t49-t53+t55-t58+t60-t62-t65-t67-t69+t73+t77-t80;
  const double t82 = t51*i;
  const double t83 = t78*t82;
  const double t84 = p*o;
  const double t85 = e*t;
  const double t86 = t85*l;
  const double t87 = t84*t86;
  const double t88 = t51*f;
  const double t89 = t78*t88;
  const double t90 = t26*l;
  const double t91 = t25*t90;
  const double t92 = t45*i;
  const double t93 = t44*t92;
  const double t94 = m*t;
  const double t95 = k*r;
  const double t96 = t95*i;
  const double t97 = t94*t96;
  const double t98 = t51*h;
  const double t99 = t50*t98;
  const double t100 = s*n;
  const double t101 = e*r;
  const double t102 = t101*i;
  const double t103 = t100*t102;
  const double t104 = t33*f;
  const double t105 = t25*t104;
  const double t106 = s*q;
  const double t107 = h*o;
  const double t108 = t107*f;
  const double t109 = t106*t108;
  const double t110 = t26*k;
  const double t111 = t56*t110;
  const double t112 = p*t;
  const double t113 = k*o;
  const double t114 = t113*f;
  const double t115 = t112*t114;
  const double t116 = s*r;
  const double t117 = h*n;
  const double t118 = t117*f;
  const double t119 = t116*t118;
  const double t120 = t63*e;
  const double t121 = t50*t120;
  const double t122 = s*o;
  const double t123 = e*q;
  const double t124 = t123*i;
  const double t125 = t122*t124;
  const double t126 = p*n;
  const double t127 = e*u;
  const double t128 = t127*l;
  const double t129 = t126*t128;
  const double t130 = t26*e;
  const double t131 = t56*t130;
  const double t132 = t63*i;
  const double t133 = t78*t132;
  const double t134 = -t83+t87+t89+t91-t93-t97+t99-t103+t105-t109-t111-t115+t119+t121+t125-t129+t131+t133;
  const double t135 = t81+t134;
  const double t137 = s*b;
  const double t139 = d*q;
  const double t140 = t139*i;
  const double t143 = d*r;
  const double t144 = t143*i;
  const double t147 = g*n;
  const double t148 = t147*f;
  const double t150 = t78*r;
  const double t151 = a*n;
  const double t152 = t151*f;
  const double t154 = t78*q;
  const double t155 = g*o;
  const double t158 = a*o;
  const double t159 = t158*f;
  const double t161 = t155*f;
  const double t165 = t40*q;
  const double t166 = g*u;
  const double t167 = t166*k;
  const double t171 = a*u;
  const double t172 = t171*k;
  const double t174 = t40*t;
  const double t175 = j*r;
  const double t176 = t175*h;
  const double t178 = a*r;
  const double t179 = t178*h;
  const double t181 = t40*r;
  const double t182 = g*t;
  const double t183 = t182*k;
  const double t187 = a*t;
  const double t188 = t187*k;
  const double t190 = t40*u;
  const double t191 = j*q;
  const double t192 = t191*h;
  const double t194 = t175*b;
  const double t196 = -t137*o*t140+t137*n*t144-t137*r*t148-t150*t152+t154*t155*c+t154*t159-t154*t161+t137*q*t161+t165*t167-t165*t166*b-t165*t172+t174*t176-t174*t179-t181*t183+t181*t182*b+t181*t188-t190*t192-t174*t194;
  const double t197 = m*c;
  const double t202 = p*g;
  const double t203 = t202*n;
  const double t204 = t127*c;
  const double t207 = b*u*l;
  const double t209 = s*j;
  const double t210 = t209*n;
  const double t212 = m*d;
  const double t213 = t212*r;
  const double t214 = t37*c;
  const double t216 = t44*u;
  const double t217 = t191*c;
  const double t219 = a*q;
  const double t220 = t219*i;
  const double t222 = t44*q;
  const double t223 = t171*l;
  const double t225 = t56*u;
  const double t226 = t151*e;
  const double t228 = p*c;
  const double t230 = d*u;
  const double t231 = t230*k;
  const double t234 = j*o;
  const double t235 = t234*e;
  const double t238 = t78*n;
  const double t239 = t178*i;
  const double t241 = t78*o;
  const double t246 = t44*t;
  const double t247 = t175*i;
  const double t249 = -t197*q*t167-t197*t*t176-t203*t204-t203*t207+t210*t102+t213*t214-t216*t217-t216*t220+t222*t223+t225*t226-t228*n*t231-t228*t*t235-t213*t38+t238*t239-t241*t220+t150*t148-t150*t147*c-t246*t247;
  const double t251 = t175*c;
  const double t255 = d*t;
  const double t256 = t255*k;
  const double t259 = j*n;
  const double t260 = t259*e;
  const double t262 = t44*r;
  const double t263 = t182*l;
  const double t265 = t202*o;
  const double t267 = b*t*l;
  const double t269 = t202*u;
  const double t274 = t182*c;
  const double t276 = t187*l;
  const double t278 = t166*l;
  const double t280 = t166*c;
  const double t288 = t50*r;
  const double t289 = t147*e;
  const double t291 = t246*t251+t246*t239+t228*o*t256+t228*u*t260+t262*t263+t265*t267-t269*t76+t269*t75*c+t203*t128-t262*t274-t262*t276-t222*t278+t222*t280+t241*t140-t241*t139*c-t238*t144+t238*t143*c-t288*t289;
  const double t292 = t147*b;
  const double t295 = s*c;
  const double t297 = t143*h;
  const double t299 = m*a;
  const double t304 = t50*o;
  const double t305 = t139*b;
  const double t307 = t219*h;
  const double t309 = m*b;
  const double t311 = t191*i;
  const double t317 = t50*n;
  const double t319 = p*b;
  const double t321 = t259*f;
  const double t324 = t234*f;
  const double t327 = t255*l;
  const double t330 = t230*l;
  const double t332 = t25*u;
  const double t334 = t25*t;
  const double t338 = t288*t292+t288*t226-t295*n*t297-t299*q*t31-t299*t*t96+t304*t305+t304*t307-t309*u*t311+t309*t*t247-t309*r*t263+t317*t297-t319*u*t321+t319*t*t324-t319*o*t327+t319*n*t330-t332*t152-t334*t324+t334*t234*c;
  const double t342 = t25*o;
  const double t349 = t143*b;
  const double t352 = t50*q;
  const double t353 = t155*e;
  const double t355 = t155*b;
  const double t360 = t139*h;
  const double t365 = t85*c;
  const double t368 = b*n*f;
  const double t370 = t202*t;
  const double t375 = b*o*f;
  const double t377 = t334*t159-t342*t276+t309*q*t278+t332*t321-t332*t259*c-t317*t349-t317*t179+t352*t353-t352*t355-t295*q*t353+t295*o*t360+t295*r*t289-t265*t86+t265*t365+t269*t368+t370*t114-t370*t113*c-t370*t375;
  const double t378 = p*a;
  const double t381 = t25*n;
  const double t383 = t230*c;
  const double t386 = t255*c;
  const double t388 = t158*e;
  const double t391 = t56*t;
  const double t397 = t209*o;
  const double t402 = b*q*i;
  const double t404 = s*a;
  const double t413 = t378*o*t86-t381*t330+t381*t383+t381*t223-t342*t386-t352*t388-t304*t360+t391*t235-t391*t234*b-t378*t*t114-t397*t124+t397*t123*c+t397*t402-t404*q*t108+t216*t311+t378*u*t76-t378*n*t128-t391*t388;
  const double t415 = t56*o;
  const double t420 = t209*r;
  const double t428 = t212*t;
  const double t430 = b*r*i;
  const double t437 = t56*n;
  const double t441 = t209*q;
  const double t449 = -t415*t256+t415*t255*b+t415*t188-t420*t118+t420*t117*c+t420*t368-t225*t260+t225*t259*b-t428*t430+t299*r*t38+t299*u*t72+t342*t327-t437*t230*b-t437*t172-t441*t375+t404*o*t124+t404*r*t118-t404*n*t102;
  const double t451 = t212*u;
  const double t453 = t71*c;
  const double t456 = t212*q;
  const double t464 = t191*b;
  const double t472 = t30*c;
  const double t476 = t95*c;
  const double t478 = t213*t267-t451*t72+t451*t453+t451*t402+t456*t31-t210*t101*c-t210*t430+t441*t108-t441*t107*c+t190*t464+t190*t307+t197*r*t183+t197*u*t192+t437*t231-t456*t472-t456*t207+t428*t96-t428*t476;
  const double t481 = t196+t249+t291+t338+t377+t413+t449+t478;
  const double t482 = 1/t481;
  const double t484 = log(t481);
  const double t485 = lambda*t484;
  const double t489 = e-b;
  const double t491 = h-b;
  const double t493 = k-b;
  const double t495 = t489*m+t491*p+t493*s;
  const double t500 = t489*n+t491*q+t493*t;
  const double t505 = t489*o+t491*r+t493*u;
  const double t510 = u*j;
  const double t511 = t510*q;
  const double t512 = t40*t511;
  const double t513 = t202*t90;
  const double t514 = t202*t34;
  const double t515 = t209*t88;
  const double t516 = t202*t27;
  const double t517 = t*j;
  const double t518 = t517*r;
  const double t519 = t40*t518;
  const double t520 = t212*t48;
  const double t521 = o*d;
  const double t522 = t521*t;
  const double t523 = t56*t522;
  const double t524 = t212*t92;
  const double t525 = t521*q;
  const double t526 = t50*t525;
  const double t527 = t126*t330;
  const double t528 = t202*t104;
  const double t529 = t116*t148;
  const double t530 = t100*t144;
  const double t531 = t122*t140;
  const double t532 = r*g;
  const double t533 = t532*t;
  const double t534 = t40*t533;
  const double t535 = q*g;
  const double t536 = t535*u;
  const double t537 = t40*t536;
  const double t538 = t106*t161;
  const double t539 = t512-t513+t514-t515+t516-t519-t520+t523+t524+t526+t527-t528-t529+t530-t531+t534-t537+t538;
  const double t540 = t209*t132;
  const double t541 = t535*o;
  const double t542 = t50*t541;
  const double t543 = n*d;
  const double t544 = t543*u;
  const double t545 = t56*t544;
  const double t546 = t517*o;
  const double t547 = t56*t546;
  const double t548 = t212*t46;
  const double t549 = t74*t321;
  const double t550 = t29*t278;
  const double t551 = t84*t327;
  const double t552 = t112*t324;
  const double t553 = t532*n;
  const double t554 = t50*t553;
  const double t555 = t209*t79;
  const double t556 = t510*n;
  const double t557 = t56*t556;
  const double t558 = t209*t82;
  const double t559 = t543*r;
  const double t560 = t50*t559;
  const double t561 = t212*t61;
  const double t562 = t36*t263;
  const double t563 = t70*t311;
  const double t564 = t94*t247;
  const double t565 = -t540-t542-t545-t547-t548-t549+t550-t551+t552+t554+t555+t557+t558-t560+t561-t562-t563+t564;
  const double t566 = t539+t565;
  const double t572 = f-c;
  const double t574 = i-c;
  const double t576 = l-c;
  const double t578 = t572*m+t574*p+t576*s;
  const double t583 = t572*n+t574*q+t576*t;
  const double t588 = t572*o+t574*r+t576*u;
  const double t593 = t36*t183;
  const double t594 = t212*t68;
  const double t595 = t25*t546;
  const double t596 = t84*t256;
  const double t597 = t74*t260;
  const double t598 = t25*t556;
  const double t599 = t126*t231;
  const double t600 = t44*t536;
  const double t601 = t112*t235;
  const double t602 = t44*t511;
  const double t603 = t94*t176;
  const double t604 = t202*t59;
  const double t605 = t29*t167;
  const double t606 = t70*t192;
  const double t607 = t209*t52;
  const double t608 = t78*t541;
  const double t609 = t212*t42;
  const double t610 = t44*t518;
  const double t611 = t593+t594+t595+t596+t597-t598-t599+t600-t601-t602-t603-t604-t605+t606+t607+t608-t609+t610;
  const double t612 = t100*t297;
  const double t613 = t106*t353;
  const double t614 = t212*t54;
  const double t615 = t122*t360;
  const double t616 = t25*t522;
  const double t617 = t25*t544;
  const double t618 = t202*t130;
  const double t619 = t202*t57;
  const double t620 = t209*t64;
  const double t621 = t209*t120;
  const double t622 = t116*t289;
  const double t623 = t209*t98;
  const double t624 = t202*t110;
  const double t625 = t78*t525;
  const double t626 = t44*t533;
  const double t627 = t78*t559;
  const double t628 = t78*t553;
  const double t629 = t212*t66;
  const double t630 = -t612-t613-t614+t615-t616+t617-t618+t619+t620-t621+t622-t623+t624-t625-t626+t627-t628+t629;
  const double t631 = t611+t630;
  const double t643 = t137*t82;
  const double t644 = t63*b;
  const double t645 = t50*t644;
  const double t646 = t33*b;
  const double t647 = t56*t646;
  const double t648 = t36*t267;
  const double t649 = t228*t110;
  const double t650 = t36*t214;
  const double t651 = t295*t64;
  const double t652 = t70*t453;
  const double t653 = t94*t476;
  const double t654 = t70*t402;
  const double t655 = -t643+t32+t35-t645+t647+t648-t39-t60+t65-t649+t650-t73-t651+t83+t652-t653+t654-t91;
  const double t656 = t29*t472;
  const double t657 = t319*t34;
  const double t658 = t29*t207;
  const double t659 = t94*t430;
  const double t660 = t26*c;
  const double t661 = t25*t660;
  const double t662 = t228*t59;
  const double t663 = t33*c;
  const double t664 = t25*t663;
  const double t665 = t137*t132;
  const double t666 = t26*b;
  const double t667 = t56*t666;
  const double t668 = t51*c;
  const double t669 = t78*t668;
  const double t670 = t63*c;
  const double t671 = t78*t670;
  const double t672 = t295*t98;
  const double t673 = t319*t90;
  const double t674 = t51*b;
  const double t675 = t50*t674;
  const double t676 = t97-t656-t99-t657-t658-t659+t661+t662+t111-t664+t665-t667-t669+t671+t672-t133+t673+t675;
  const double t677 = t655+t676;
  const double t689 = t171*n;
  const double t690 = t56*t689;
  const double t691 = t70*t220;
  const double t692 = t404*t82;
  const double t693 = t404*t132;
  const double t694 = t295*t541;
  const double t695 = t295*t553;
  const double t696 = t219*o;
  const double t697 = t50*t696;
  const double t698 = t228*t556;
  const double t699 = t202*t663;
  const double t700 = t513-t514+t540+t542+t547+t690-t550-t691+t692-t693-t554-t694+t695-t697+t698+t699-t557-t558;
  const double t701 = t202*t660;
  const double t702 = t36*t276;
  const double t703 = t29*t280;
  const double t704 = t178*n;
  const double t705 = t50*t704;
  const double t706 = t209*t670;
  const double t707 = t187*o;
  const double t708 = t56*t707;
  const double t709 = t94*t239;
  const double t710 = t29*t223;
  const double t711 = t36*t274;
  const double t712 = t94*t251;
  const double t713 = t209*t668;
  const double t714 = t378*t34;
  const double t715 = t378*t90;
  const double t716 = t228*t546;
  const double t717 = t70*t217;
  const double t718 = t562+t563-t564-t701-t702+t703+t705-t706-t708+t709+t710-t711+t712+t713+t714-t715-t716-t717;
  const double t719 = t700+t718;
  const double t731 = t309*t536;
  const double t732 = t94*t194;
  const double t733 = t299*t54;
  const double t734 = t122*t307;
  const double t735 = t309*t533;
  const double t736 = t100*t179;
  const double t737 = t106*t355;
  const double t738 = t299*t66;
  const double t739 = t78*t704;
  const double t740 = t378*t110;
  const double t741 = -t731-t732-t593+t733-t595-t734+t735+t736+t737+t598+t603+t604+t605-t606-t738-t739-t608+t740;
  const double t742 = t319*t546;
  const double t743 = t319*t556;
  const double t744 = t78*t696;
  const double t745 = t378*t59;
  const double t746 = t36*t188;
  const double t747 = t70*t464;
  const double t748 = t25*t689;
  const double t749 = t209*t674;
  const double t750 = t209*t644;
  const double t751 = t116*t292;
  const double t752 = t29*t172;
  const double t753 = t202*t646;
  const double t754 = t202*t666;
  const double t755 = t25*t707;
  const double t756 = t742-t743+t744-t620+t623-t624-t745+t746+t628+t747-t748-t749+t750-t751-t752-t753+t754+t755;
  const double t757 = t741+t756;
  const double t769 = t126*t204;
  const double t770 = t84*t365;
  const double t771 = t645-t648-t43-t47+t53+t62-t769+t69+t649-t77+t80-t87+t770-t652+t653-t89+t657+t658;
  const double t772 = t112*t375;
  const double t773 = t137*t79;
  const double t774 = t137*t88;
  const double t775 = t295*t120;
  const double t776 = t295*t52;
  const double t777 = t45*c;
  const double t778 = t44*t777;
  const double t779 = t74*t368;
  const double t780 = t41*c;
  const double t781 = t44*t780;
  const double t782 = t45*b;
  const double t783 = t40*t782;
  const double t784 = t41*b;
  const double t785 = t40*t784;
  const double t786 = -t772-t773+t774+t775-t776+t778+t779-t662+t115-t121+t129+t669-t671-t781-t673-t783+t785-t675;
  const double t787 = t771+t786;
  const double t799 = t295*t525;
  const double t800 = t404*t88;
  const double t801 = t404*t79;
  const double t802 = -t512+t515+t519-t526-t527+t548+t549+t551-t552+t799-t800+t697-t555-t698+t801+t560-t561+t702;
  const double t803 = t212*t780;
  const double t804 = t212*t777;
  const double t805 = t126*t383;
  const double t806 = t84*t386;
  const double t807 = t74*t152;
  const double t808 = t112*t159;
  const double t809 = t295*t559;
  const double t810 = t187*r;
  const double t811 = t40*t810;
  const double t812 = t171*q;
  const double t813 = t40*t812;
  const double t814 = t803-t705+t706-t804+t805-t806-t807+t808-t710-t809-t712-t713-t714+t715+t716+t717-t811+t813;
  const double t815 = t802+t814;
  const double t827 = t122*t305;
  const double t828 = t319*t522;
  const double t829 = t319*t544;
  const double t830 = t732-t594-t596-t597+t599+t601+t602-t607-t827+t739+t609-t610+t828-t829-t740-t742+t743-t744;
  const double t831 = t378*t57;
  const double t832 = t378*t130;
  const double t833 = t116*t226;
  const double t834 = t44*t812;
  const double t835 = t44*t810;
  const double t836 = t100*t349;
  const double t837 = t106*t388;
  const double t838 = t212*t784;
  const double t839 = t212*t782;
  const double t840 = -t831+t832-t833-t834+t835+t621+t836+t837+t625-t627+t745-t746-t747+t749-t750-t838+t839+t752;
  const double t841 = t830+t840;
  const double t853 = t28+t643-t647-t49-t55+t58+t769+t67-t650+t651-t770-t654+t93+t656+t103-t105+t772+t773;
  const double t854 = -t774+t659-t661+t109-t775+t776-t778-t779-t119-t125+t664-t665+t667-t131+t781-t672+t783-t785;
  const double t855 = t853+t854;
  const double t867 = -t516+t520-t523-t524+t528+t529-t530+t531-t534+t537-t538+t545-t690+t691-t692-t799+t693+t694;
  const double t868 = -t695+t800-t801-t699+t701-t803-t703+t804-t805+t806+t807+t708-t709-t808+t711+t809+t811-t813;
  const double t869 = t867+t868;
  const double t881 = t731-t733+t734-t735-t736-t737-t600+t827+t738+t612-t828+t829+t613+t614-t615+t616-t617+t618;
  const double t882 = t831-t832+t833-t619+t834-t835-t622-t836-t837+t626-t629+t748+t751+t838-t839+t753-t754-t755;
  const double t883 = t881+t882;
  forces[0][0] = -mu*(t7*t8+t13*t14+t19*t20)+mu*t135*t482-t485*t135*t482;
  forces[0][1] = -mu*(t495*t8+t500*t14+t505*t20)+mu*t566*t482-t485*t566*t482;
  forces[0][2] = -mu*(t578*t8+t583*t14+t588*t20)+mu*t631*t482-t485*t631*t482;
  forces[1][0] = -mu*(t7*m+t13*n+t19*o)+mu*t677*t482-t485*t677*t482;
  forces[1][1] = -mu*(t495*m+t500*n+t505*o)+mu*t719*t482-t485*t719*t482;
  forces[1][2] = -mu*(t578*m+t583*n+t588*o)+mu*t757*t482-t485*t757*t482;
  forces[2][0] = -mu*(t7*p+t13*q+t19*r)+mu*t787*t482-t485*t787*t482;
  forces[2][1] = -mu*(t495*p+t500*q+t505*r)+mu*t815*t482-t485*t815*t482;
  forces[2][2] = -mu*(t578*p+t583*q+t588*r)+mu*t841*t482-t485*t841*t482;
  forces[3][0] = -mu*(t7*s+t13*t+t19*u)+mu*t855*t482-t485*t855*t482;
  forces[3][1] = -mu*(t495*s+t500*t+t505*u)+mu*t869*t482-t485*t869*t482;
  forces[3][2] = -mu*(t578*s+t583*t+t588*u)+mu*t883*t482-t485*t883*t482;
}

//////////////////////////////////////////////////////////////////////
// autogenerated as "stiffnessDensity" from:
//
/*
 setup_symbols_wrt_F;
 syms mu;
 %strain_energy = mu/2 * (trace(C) - 3);
 strain_energy = mu/2 * (trace(C) - 3) - mu * log(J) + lambda / 2 * log(J)^2;
 [forceDensity stiffnessDensity] = codegen_density(strain_energy,F)
*/
//
// see "MATERIAL.h" for more details
//////////////////////////////////////////////////////////////////////
void NEO_HOOKEAN::stiffnessDensity(const Real* F, Real* stiffness, bool diagonal)
{
  const double mu = _mu;

  stiffness[0] = -mu;
  stiffness[1] = 0.0;
  stiffness[2] = 0.0;
  stiffness[3] = 0.0;
  stiffness[4] = 0.0;
  stiffness[5] = 0.0;
  stiffness[6] = 0.0;
  stiffness[7] = 0.0;
  stiffness[8] = 0.0;
  
  stiffness[9] = 0.0;
  stiffness[10] = -mu;
  stiffness[11] = 0.0;
  stiffness[12] = 0.0;
  stiffness[13] = 0.0;
  stiffness[14] = 0.0;
  stiffness[15] = 0.0;
  stiffness[16] = 0.0;
  stiffness[17] = 0.0;
  
  stiffness[18] = 0.0;
  stiffness[19] = 0.0;
  stiffness[20] = -mu;
  stiffness[21] = 0.0;
  stiffness[22] = 0.0;
  stiffness[23] = 0.0;
  stiffness[24] = 0.0;
  stiffness[25] = 0.0;
  stiffness[26] = 0.0;
  
  stiffness[27] = 0.0;
  stiffness[28] = 0.0;
  stiffness[29] = 0.0;
  stiffness[30] = -mu;
  stiffness[31] = 0.0;
  stiffness[32] = 0.0;
  stiffness[33] = 0.0;
  stiffness[34] = 0.0;
  stiffness[35] = 0.0;
  
  stiffness[36] = 0.0;
  stiffness[37] = 0.0;
  stiffness[38] = 0.0;
  stiffness[39] = 0.0;
  stiffness[40] = -mu;
  stiffness[41] = 0.0;
  stiffness[42] = 0.0;
  stiffness[43] = 0.0;
  stiffness[44] = 0.0;
  
  stiffness[45] = 0.0;
  stiffness[46] = 0.0;
  stiffness[47] = 0.0;
  stiffness[48] = 0.0;
  stiffness[49] = 0.0;
  stiffness[50] = -mu;
  stiffness[51] = 0.0;
  stiffness[52] = 0.0;
  stiffness[53] = 0.0;
  
  stiffness[54] = 0.0;
  stiffness[55] = 0.0;
  stiffness[56] = 0.0;
  stiffness[57] = 0.0;
  stiffness[58] = 0.0;
  stiffness[59] = 0.0;
  stiffness[60] = -mu;
  stiffness[61] = 0.0;
  stiffness[62] = 0.0;
  
  stiffness[63] = 0.0;
  stiffness[64] = 0.0;
  stiffness[65] = 0.0;
  stiffness[66] = 0.0;
  stiffness[67] = 0.0;
  stiffness[68] = 0.0;
  stiffness[69] = 0.0;
  stiffness[70] = -mu;
  stiffness[71] = 0.0;

  stiffness[72] = 0.0;
  stiffness[73] = 0.0;
  stiffness[74] = 0.0;
  stiffness[75] = 0.0;
  stiffness[76] = 0.0;
  stiffness[77] = 0.0;
  stiffness[78] = 0.0;
  stiffness[79] = 0.0;
  stiffness[80] = -mu;
}

//////////////////////////////////////////////////////////////////////
// autogenerated as "forceDensity" from:
//
/*
 setup_symbols_wrt_F;
 syms mu;
 %strain_energy = mu/2 * (trace(C) - 3);
 strain_energy = mu/2 * (trace(C) - 3) - mu * log(J) + lambda / 2 * log(J)^2;
 [forceDensity stiffnessDensity] = codegen_density(strain_energy,F)
*/
//
// see "MATERIAL.h" for more details
//////////////////////////////////////////////////////////////////////
void NEO_HOOKEAN::forceDensity(const Real* F, Real* forces, bool diagonal)
{
  const double mu = _mu;
  forces[0] = -mu*F[0];
  forces[1] = -mu*F[1];
  forces[2] = -mu*F[2];
  forces[3] = -mu*F[3];
  forces[4] = -mu*F[4];
  forces[5] = -mu*F[5];
  forces[6] = -mu*F[6];
  forces[7] = -mu*F[7];
  forces[8] = -mu*F[8];
}

//////////////////////////////////////////////////////////////////////
// stiffness matrix implementation
//
// The Matlab code to generate the code is below. This computes
// stiffness wrt F with the expectation that it will be multiplied
// by DF/Du later to get the stiffness wrt u
//
// see "MATERIAL.h" for more details
/*
function code = codegen_neo-hookean_stiffness_wrt_F()
    syms f00 f01 f02 f10 f11 f12 f20 f21 f22;
    F = [
        f00 f01 f02
        f10 f11 f12
        f20 f21 f22
        ];
    syms b00 b01 b02 b10 b11 b12 b20 b21 b22 b30 b31 b32;
    b = [
        b00 b10 b20 b30
        b01 b11 b21 b31
        b02 b12 b22 b32
        ];
    display '-- computing 2nd PK --';
    C = mytrans(F)*F;
    syms mu lambda;
    display '-- calculating force --';
    I_C = trace(C);
    J = det(F);
    syms mu;
    %energy = mu/2 * (trace(C) - 3);
    energy = mu/2 * (trace(C) - 3) - mu * log(J) + lambda / 2 * log(J)^2;
    P = [diff(energy, f00) diff(energy, f01) diff(energy, f02);
         diff(energy, f10) diff(energy, f11) diff(energy, f12);
         diff(energy, f20) diff(energy, f21) diff(energy, f22)]
    
    forces = P * b;
    forces = reshape(forces, 12, 1);
    F = reshape(F, 9, 1);
    
    display '-- differentiating --';
    df_dF = sym('a') * ones(12,9);
    for i = 1:12
        for j = 1:9
            df_dF(i,j) = diff( forces(i), F(j) );
        end
    end
    display '-- code gen''ing --';   
    code = maple('codegen[C]', df_dF, 'optimized')
end
*/
//////////////////////////////////////////////////////////////////////
void NEO_HOOKEAN::computeStresses(TET& tet)
{
  MATRIX3 F = tet.F();
  const VEC3F* areaVecs = tet.b();
  _pf_pF.clear();

  const double mu = _mu;
  const double lambda = _lambda;

  const double f00 = F(0,0);
  const double f01 = F(0,1);
  const double f02 = F(0,2);
  const double f10 = F(1,0);
  const double f11 = F(1,1);
  const double f12 = F(1,2);
  const double f20 = F(2,0);
  const double f21 = F(2,1);
  const double f22 = F(2,2);

  const double b00 = areaVecs[0][0];
  const double b01 = areaVecs[0][1];
  const double b02 = areaVecs[0][2];
  const double b10 = areaVecs[1][0];
  const double b11 = areaVecs[1][1];
  const double b12 = areaVecs[1][2];
  const double b20 = areaVecs[2][0];
  const double b21 = areaVecs[2][1];
  const double b22 = areaVecs[2][2];
  const double b30 = areaVecs[3][0];
  const double b31 = areaVecs[3][1];
  const double b32 = areaVecs[3][2];

  /*
  const double t1 = mu*b00;
  const double t2 = mu*b01;
  const double t3 = mu*b02;
  const double t4 = mu*b10;
  const double t5 = mu*b11;
  const double t6 = mu*b12;
  const double t7 = mu*b20;
  const double t8 = mu*b21;
  const double t9 = mu*b22;
  const double t10 = mu*b30;
  const double t11 = mu*b31;
  const double t12 = mu*b32;
  _pf_pF(0,0) = t1;
  _pf_pF(0,1) = 0.0;
  _pf_pF(0,2) = 0.0;
  _pf_pF(0,3) = t2;
  _pf_pF(0,4) = 0.0;
  _pf_pF(0,5) = 0.0;
  _pf_pF(0,6) = t3;
  _pf_pF(0,7) = 0.0;
  _pf_pF(0,8) = 0.0;
  _pf_pF(1,0) = 0.0;
  _pf_pF(1,1) = t1;
  _pf_pF(1,2) = 0.0;
  _pf_pF(1,3) = 0.0;
  _pf_pF(1,4) = t2;
  _pf_pF(1,5) = 0.0;
  _pf_pF(1,6) = 0.0;
  _pf_pF(1,7) = t3;
  _pf_pF(1,8) = 0.0;
  _pf_pF(2,0) = 0.0;
  _pf_pF(2,1) = 0.0;
  _pf_pF(2,2) = t1;
  _pf_pF(2,3) = 0.0;
  _pf_pF(2,4) = 0.0;
  _pf_pF(2,5) = t2;
  _pf_pF(2,6) = 0.0;
  _pf_pF(2,7) = 0.0;
  _pf_pF(2,8) = t3;
  _pf_pF(3,0) = t4;
  _pf_pF(3,1) = 0.0;
  _pf_pF(3,2) = 0.0;
  _pf_pF(3,3) = t5;
  _pf_pF(3,4) = 0.0;
  _pf_pF(3,5) = 0.0;
  _pf_pF(3,6) = t6;
  _pf_pF(3,7) = 0.0;
  _pf_pF(3,8) = 0.0;
  _pf_pF(4,0) = 0.0;
  _pf_pF(4,1) = t4;
  _pf_pF(4,2) = 0.0;
  _pf_pF(4,3) = 0.0;
  _pf_pF(4,4) = t5;
  _pf_pF(4,5) = 0.0;
  _pf_pF(4,6) = 0.0;
  _pf_pF(4,7) = t6;
  _pf_pF(4,8) = 0.0;
  _pf_pF(5,0) = 0.0;
  _pf_pF(5,1) = 0.0;
  _pf_pF(5,2) = t4;
  _pf_pF(5,3) = 0.0;
  _pf_pF(5,4) = 0.0;
  _pf_pF(5,5) = t5;
  _pf_pF(5,6) = 0.0;
  _pf_pF(5,7) = 0.0;
  _pf_pF(5,8) = t6;
  _pf_pF(6,0) = t7;
  _pf_pF(6,1) = 0.0;
  _pf_pF(6,2) = 0.0;
  _pf_pF(6,3) = t8;
  _pf_pF(6,4) = 0.0;
  _pf_pF(6,5) = 0.0;
  _pf_pF(6,6) = t9;
  _pf_pF(6,7) = 0.0;
  _pf_pF(6,8) = 0.0;
  _pf_pF(7,0) = 0.0;
  _pf_pF(7,1) = t7;
  _pf_pF(7,2) = 0.0;
  _pf_pF(7,3) = 0.0;
  _pf_pF(7,4) = t8;
  _pf_pF(7,5) = 0.0;
  _pf_pF(7,6) = 0.0;
  _pf_pF(7,7) = t9;
  _pf_pF(7,8) = 0.0;
  _pf_pF(8,0) = 0.0;
  _pf_pF(8,1) = 0.0;
  _pf_pF(8,2) = t7;
  _pf_pF(8,3) = 0.0;
  _pf_pF(8,4) = 0.0;
  _pf_pF(8,5) = t8;
  _pf_pF(8,6) = 0.0;
  _pf_pF(8,7) = 0.0;
  _pf_pF(8,8) = t9;
  _pf_pF(9,0) = t10;
  _pf_pF(9,1) = 0.0;
  _pf_pF(9,2) = 0.0;
  _pf_pF(9,3) = t11;
  _pf_pF(9,4) = 0.0;
  _pf_pF(9,5) = 0.0;
  _pf_pF(9,6) = t12;
  _pf_pF(9,7) = 0.0;
  _pf_pF(9,8) = 0.0;
  _pf_pF(10,0) = 0.0;
  _pf_pF(10,1) = t10;
  _pf_pF(10,2) = 0.0;
  _pf_pF(10,3) = 0.0;
  _pf_pF(10,4) = t11;
  _pf_pF(10,5) = 0.0;
  _pf_pF(10,6) = 0.0;
  _pf_pF(10,7) = t12;
  _pf_pF(10,8) = 0.0;
  _pf_pF(11,0) = 0.0;
  _pf_pF(11,1) = 0.0;
  _pf_pF(11,2) = t10;
  _pf_pF(11,3) = 0.0;
  _pf_pF(11,4) = 0.0;
  _pf_pF(11,5) = t11;
  _pf_pF(11,6) = 0.0;
  _pf_pF(11,7) = 0.0;
  _pf_pF(11,8) = t12;
  */
  const double t3 = f11*f22-f12*f21;
  const double t4 = t3*t3;
  const double t6 = f00*f11;
  const double t8 = f00*f12;
  const double t10 = f10*f01;
  const double t12 = f10*f02;
  const double t14 = f20*f01;
  const double t16 = f20*f02;
  const double t18 = t6*f22-t8*f21-t10*f22+t12*f21+t14*f12-t16*f11;
  const double t19 = t18*t18;
  const double t20 = 1/t19;
  const double t24 = log(t18);
  const double t25 = lambda*t24;
  const double t28 = mu+mu*t4*t20+lambda*t4*t20-t25*t4*t20;
  const double t32 = -f10*f22+f20*f12;
  const double t33 = mu*t32;
  const double t34 = t20*t3;
  const double t36 = lambda*t3;
  const double t37 = t20*t32;
  const double t41 = t33*t34+t36*t37-t25*t37*t3;
  const double t45 = f10*f21-f20*f11;
  const double t46 = mu*t45;
  const double t48 = t20*t45;
  const double t52 = t46*t34+t36*t48-t25*t48*t3;
  const double t55 = mu*t3;
  const double t58 = -f01*f22+f02*f21;
  const double t59 = t20*t58;
  const double t61 = lambda*t58;
  const double t65 = t55*t59+t61*t34-t25*t34*t58;
  const double t66 = t65*b00;
  const double t68 = 1/t18;
  const double t69 = mu*f22*t68;
  const double t73 = t25*f22*t68;
  const double t76 = t69+t33*t59+t61*t37-t73-t25*t37*t58;
  const double t79 = mu*f21*t68;
  const double t83 = t25*f21*t68;
  const double t86 = -t79+t46*t59+t61*t48+t83-t25*t48*t58;
  const double t91 = f01*f12-f02*f11;
  const double t92 = t20*t91;
  const double t94 = lambda*t91;
  const double t98 = t55*t92+t94*t34-t25*t34*t91;
  const double t99 = t98*b00;
  const double t101 = mu*f12*t68;
  const double t105 = t25*f12*t68;
  const double t108 = -t101+t33*t92+t94*t37+t105-t25*t37*t91;
  const double t111 = mu*f11*t68;
  const double t115 = t25*f11*t68;
  const double t118 = t111+t46*t92+t94*t48-t115-t25*t48*t91;
  const double t122 = t32*t32;
  const double t129 = mu+mu*t122*t20+lambda*t122*t20-t25*t122*t20;
  const double t136 = t46*t37+lambda*t32*t48-t25*t48*t32;
  const double t140 = f00*f22-t16;
  const double t141 = t20*t140;
  const double t143 = lambda*t140;
  const double t147 = -t69+t55*t141+t143*t34+t73-t25*t34*t140;
  const double t153 = t33*t141+t143*t37-t25*t37*t140;
  const double t154 = t153*b01;
  const double t156 = mu*f20*t68;
  const double t160 = t25*f20*t68;
  const double t163 = t156+t46*t141+t143*t48-t160-t25*t48*t140;
  const double t166 = -t8+t12;
  const double t167 = t20*t166;
  const double t169 = lambda*t166;
  const double t173 = t101+t55*t167+t169*t34-t105-t25*t34*t166;
  const double t179 = t33*t167+t169*t37-t25*t37*t166;
  const double t180 = t179*b01;
  const double t182 = mu*f10*t68;
  const double t186 = t25*f10*t68;
  const double t189 = -t182+t46*t167+t169*t48+t186-t25*t48*t166;
  const double t194 = t45*t45;
  const double t201 = mu+mu*t194*t20+lambda*t194*t20-t25*t194*t20;
  const double t205 = -f00*f21+t14;
  const double t206 = t20*t205;
  const double t208 = lambda*t205;
  const double t212 = t79+t55*t206+t208*t34-t83-t25*t34*t205;
  const double t218 = -t156+t33*t206+t208*t37+t160-t25*t37*t205;
  const double t224 = t46*t206+t208*t48-t25*t48*t205;
  const double t225 = t224*b02;
  const double t227 = t6-t10;
  const double t228 = t20*t227;
  const double t230 = lambda*t227;
  const double t234 = -t111+t55*t228+t230*t34+t115-t25*t34*t227;
  const double t240 = t182+t33*t228+t230*t37-t186-t25*t37*t227;
  const double t246 = t46*t228+t230*t48-t25*t48*t227;
  const double t247 = t246*b02;
  const double t252 = t58*t58;
  const double t259 = mu+mu*t252*t20+lambda*t252*t20-t25*t252*t20;
  const double t261 = mu*t140;
  const double t266 = t261*t59+t61*t141-t25*t141*t58;
  const double t268 = mu*t205;
  const double t273 = t268*t59+t61*t206-t25*t206*t58;
  const double t276 = mu*t58;
  const double t281 = t276*t92+t94*t59-t25*t59*t91;
  const double t282 = t281*b00;
  const double t284 = mu*f02*t68;
  const double t288 = t25*f02*t68;
  const double t291 = t284+t261*t92+t94*t141-t288-t25*t141*t91;
  const double t294 = mu*f01*t68;
  const double t298 = t25*f01*t68;
  const double t301 = -t294+t268*t92+t94*t206+t298-t25*t206*t91;
  const double t308 = t140*t140;
  const double t315 = mu+mu*t308*t20+lambda*t308*t20-t25*t308*t20;
  const double t321 = t268*t141+t143*t206-t25*t206*t140;
  const double t328 = -t284+t276*t167+t169*t59+t288-t25*t59*t166;
  const double t334 = t261*t167+t169*t141-t25*t141*t166;
  const double t335 = t334*b01;
  const double t337 = mu*f00*t68;
  const double t341 = t25*f00*t68;
  const double t344 = t337+t268*t167+t169*t206-t341-t25*t206*t166;
  const double t352 = t205*t205;
  const double t359 = mu+mu*t352*t20+lambda*t352*t20-t25*t352*t20;
  const double t366 = t294+t276*t228+t230*t59-t298-t25*t59*t227;
  const double t372 = -t337+t261*t228+t230*t141+t341-t25*t141*t227;
  const double t378 = t268*t228+t230*t206-t25*t206*t227;
  const double t379 = t378*b02;
  const double t387 = t91*t91;
  const double t394 = mu+mu*t387*t20+lambda*t387*t20-t25*t387*t20;
  const double t401 = mu*t166*t92+t94*t167-t25*t167*t91;
  const double t403 = mu*t227;
  const double t408 = t403*t92+t94*t228-t25*t228*t91;
  const double t418 = t166*t166;
  const double t425 = mu+mu*t418*t20+lambda*t418*t20-t25*t418*t20;
  const double t431 = t403*t167+t169*t228-t25*t228*t166;
  const double t442 = t227*t227;
  const double t449 = mu+mu*t442*t20+lambda*t442*t20-t25*t442*t20;
  const double t456 = t65*b10;
  const double t460 = t98*b10;
  const double t469 = t153*b11;
  const double t473 = t179*b11;
  const double t482 = t224*b12;
  const double t486 = t246*b12;
  const double t495 = t281*b10;
  const double t507 = t334*b11;
  const double t519 = t378*b12;
  const double t555 = t65*b20;
  const double t559 = t98*b20;
  const double t568 = t153*b21;
  const double t572 = t179*b21;
  const double t581 = t224*b22;
  const double t585 = t246*b22;
  const double t594 = t281*b20;
  const double t606 = t334*b21;
  const double t618 = t378*b22;
  const double t654 = t65*b30;
  const double t658 = t98*b30;
  const double t667 = t153*b31;
  const double t671 = t179*b31;
  const double t680 = t224*b32;
  const double t684 = t246*b32;
  const double t693 = t281*b30;
  const double t705 = t334*b31;
  const double t717 = t378*b32;
  _pf_pF(0,0) = t28*b00+t41*b01+t52*b02;
  _pf_pF(0,1) = t66+t76*b01+t86*b02;
  _pf_pF(0,2) = t99+t108*b01+t118*b02;
  _pf_pF(0,3) = t41*b00+t129*b01+t136*b02;
  _pf_pF(0,4) = t147*b00+t154+t163*b02;
  _pf_pF(0,5) = t173*b00+t180+t189*b02;
  _pf_pF(0,6) = t52*b00+t136*b01+t201*b02;
  _pf_pF(0,7) = t212*b00+t218*b01+t225;
  _pf_pF(0,8) = t234*b00+t240*b01+t247;
  _pf_pF(1,0) = t66+t147*b01+t212*b02;
  _pf_pF(1,1) = t259*b00+t266*b01+t273*b02;
  _pf_pF(1,2) = t282+t291*b01+t301*b02;
  _pf_pF(1,3) = t76*b00+t154+t218*b02;
  _pf_pF(1,4) = t266*b00+t315*b01+t321*b02;
  _pf_pF(1,5) = t328*b00+t335+t344*b02;
  _pf_pF(1,6) = t86*b00+t163*b01+t225;
  _pf_pF(1,7) = t273*b00+t321*b01+t359*b02;
  _pf_pF(1,8) = t366*b00+t372*b01+t379;
  _pf_pF(2,0) = t99+t173*b01+t234*b02;
  _pf_pF(2,1) = t282+t328*b01+t366*b02;
  _pf_pF(2,2) = t394*b00+t401*b01+t408*b02;
  _pf_pF(2,3) = t108*b00+t180+t240*b02;
  _pf_pF(2,4) = t291*b00+t335+t372*b02;
  _pf_pF(2,5) = t401*b00+t425*b01+t431*b02;
  _pf_pF(2,6) = t118*b00+t189*b01+t247;
  _pf_pF(2,7) = t301*b00+t344*b01+t379;
  _pf_pF(2,8) = t408*b00+t431*b01+t449*b02;
  _pf_pF(3,0) = t28*b10+t41*b11+t52*b12;
  _pf_pF(3,1) = t456+t76*b11+t86*b12;
  _pf_pF(3,2) = t460+t108*b11+t118*b12;
  _pf_pF(3,3) = t41*b10+t129*b11+t136*b12;
  _pf_pF(3,4) = t147*b10+t469+t163*b12;
  _pf_pF(3,5) = t173*b10+t473+t189*b12;
  _pf_pF(3,6) = t52*b10+t136*b11+t201*b12;
  _pf_pF(3,7) = t212*b10+t218*b11+t482;
  _pf_pF(3,8) = t234*b10+t240*b11+t486;
  _pf_pF(4,0) = t456+t147*b11+t212*b12;
  _pf_pF(4,1) = t259*b10+t266*b11+t273*b12;
  _pf_pF(4,2) = t495+t291*b11+t301*b12;
  _pf_pF(4,3) = t76*b10+t469+t218*b12;
  _pf_pF(4,4) = t266*b10+t315*b11+t321*b12;
  _pf_pF(4,5) = t328*b10+t507+t344*b12;
  _pf_pF(4,6) = t86*b10+t163*b11+t482;
  _pf_pF(4,7) = t273*b10+t321*b11+t359*b12;
  _pf_pF(4,8) = t366*b10+t372*b11+t519;
  _pf_pF(5,0) = t460+t173*b11+t234*b12;
  _pf_pF(5,1) = t495+t328*b11+t366*b12;
  _pf_pF(5,2) = t394*b10+t401*b11+t408*b12;
  _pf_pF(5,3) = t108*b10+t473+t240*b12;
  _pf_pF(5,4) = t291*b10+t507+t372*b12;
  _pf_pF(5,5) = t401*b10+t425*b11+t431*b12;
  _pf_pF(5,6) = t118*b10+t189*b11+t486;
  _pf_pF(5,7) = t301*b10+t344*b11+t519;
  _pf_pF(5,8) = t408*b10+t431*b11+t449*b12;
  _pf_pF(6,0) = t28*b20+t41*b21+t52*b22;
  _pf_pF(6,1) = t555+t76*b21+t86*b22;
  _pf_pF(6,2) = t559+t108*b21+t118*b22;
  _pf_pF(6,3) = t41*b20+t129*b21+t136*b22;
  _pf_pF(6,4) = t147*b20+t568+t163*b22;
  _pf_pF(6,5) = t173*b20+t572+t189*b22;
  _pf_pF(6,6) = t52*b20+t136*b21+t201*b22;
  _pf_pF(6,7) = t212*b20+t218*b21+t581;
  _pf_pF(6,8) = t234*b20+t240*b21+t585;
  _pf_pF(7,0) = t555+t147*b21+t212*b22;
  _pf_pF(7,1) = t259*b20+t266*b21+t273*b22;
  _pf_pF(7,2) = t594+t291*b21+t301*b22;
  _pf_pF(7,3) = t76*b20+t568+t218*b22;
  _pf_pF(7,4) = t266*b20+t315*b21+t321*b22;
  _pf_pF(7,5) = t328*b20+t606+t344*b22;
  _pf_pF(7,6) = t86*b20+t163*b21+t581;
  _pf_pF(7,7) = t273*b20+t321*b21+t359*b22;
  _pf_pF(7,8) = t366*b20+t372*b21+t618;
  _pf_pF(8,0) = t559+t173*b21+t234*b22;
  _pf_pF(8,1) = t594+t328*b21+t366*b22;
  _pf_pF(8,2) = t394*b20+t401*b21+t408*b22;
  _pf_pF(8,3) = t108*b20+t572+t240*b22;
  _pf_pF(8,4) = t291*b20+t606+t372*b22;
  _pf_pF(8,5) = t401*b20+t425*b21+t431*b22;
  _pf_pF(8,6) = t118*b20+t189*b21+t585;
  _pf_pF(8,7) = t301*b20+t344*b21+t618;
  _pf_pF(8,8) = t408*b20+t431*b21+t449*b22;
  _pf_pF(9,0) = t28*b30+t41*b31+t52*b32;
  _pf_pF(9,1) = t654+t76*b31+t86*b32;
  _pf_pF(9,2) = t658+t108*b31+t118*b32;
  _pf_pF(9,3) = t41*b30+t129*b31+t136*b32;
  _pf_pF(9,4) = t147*b30+t667+t163*b32;
  _pf_pF(9,5) = t173*b30+t671+t189*b32;
  _pf_pF(9,6) = t52*b30+t136*b31+t201*b32;
  _pf_pF(9,7) = t212*b30+t218*b31+t680;
  _pf_pF(9,8) = t234*b30+t240*b31+t684;
  _pf_pF(10,0) = t654+t147*b31+t212*b32;
  _pf_pF(10,1) = t259*b30+t266*b31+t273*b32;
  _pf_pF(10,2) = t693+t291*b31+t301*b32;
  _pf_pF(10,3) = t76*b30+t667+t218*b32;
  _pf_pF(10,4) = t266*b30+t315*b31+t321*b32;
  _pf_pF(10,5) = t328*b30+t705+t344*b32;
  _pf_pF(10,6) = t86*b30+t163*b31+t680;
  _pf_pF(10,7) = t273*b30+t321*b31+t359*b32;
  _pf_pF(10,8) = t366*b30+t372*b31+t717;
  _pf_pF(11,0) = t658+t173*b31+t234*b32;
  _pf_pF(11,1) = t693+t328*b31+t366*b32;
  _pf_pF(11,2) = t394*b30+t401*b31+t408*b32;
  _pf_pF(11,3) = t108*b30+t671+t240*b32;
  _pf_pF(11,4) = t291*b30+t705+t372*b32;
  _pf_pF(11,5) = t401*b30+t425*b31+t431*b32;
  _pf_pF(11,6) = t118*b30+t189*b31+t684;
  _pf_pF(11,7) = t301*b30+t344*b31+t717;
  _pf_pF(11,8) = t408*b30+t431*b31+t449*b32;
}

